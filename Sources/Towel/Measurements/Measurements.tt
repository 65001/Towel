<#@ template debug="false" hostspecific="false" language="C#" #><#@ output extension=".cs" #>//------------------------------------------------------------------------------
// <auto-generated>
//	  This code was generated from the "MEASUREMENTS.tt" T4 Text Template.
// </auto-generated>
//------------------------------------------------------------------------------
<# string[] measurements = new string[]
{
	"Acceleration",
	"Angle",
	"Attenuation",
	"Current",
	"Density",
	"Energy",
	"Force",
	"Length",
	"Luminosity",
	"Mass",
	"Power",
	"Pressure",
	"Speed",
	"Tempurature",
	"Time",
	"Torque",
	"Volume",
}; #>
using System;
using Towel.Mathematics;

namespace Towel.Measurements
{<# foreach (string measurement in measurements) { #>
	#region <#= measurement #>

	/// <summary>An <#= measurement #> measurement.</summary>
    /// <typeparam name="T">The generic numeric type used to store the <#= measurement #> measurement.</typeparam>
    [Serializable]
    public struct <#= measurement #><T>
    {
        internal static T[][] Table = UnitConversionTable.Build<<#= measurement #>.Units, T>();
        internal T _measurement;
        internal <#= measurement #>.Units _units;

        #region Constructors

        /// <summary>Constructs an <#= measurement #> with the specified measurement and units.</summary>
        /// <param name="measurement">The measurement of the <#= measurement #>.</param>
        /// <param name="units">The units of the <#= measurement #>.</param>
        public <#= measurement #>(T measurement, <#= measurement #>.Units units)
        {
            this._measurement = measurement;
            this._units = units;
        }

        #endregion

        #region Properties

        /// <summary>The current units used to represent the <#= measurement #>.</summary>
        public <#= measurement #>.Units Units
        {
            get { return this._units; }
            set
            {
                if (value != this._units)
                {
                    this._measurement = this[value];
                    this._units = value;
                }
            }
        }

        /// <summary>Gets the measurement in the desired units.</summary>
        /// <param name="units">The units you want the measurement to be in.</param>
        /// <returns>The measurement in the specified units.</returns>
        public T this[<#= measurement #>.Units units]
        {
            get
            {
                if (this._units == units)
                {
                    return this._measurement;
                }
                else
                {
                    T factor = Table[(int)this._units][(int)units];
                    return Compute.Multiply(this._measurement, factor);
                }
            }
        }

        #endregion

        #region Mathematics

        #region Add

        public static <#= measurement #><T> Add(<#= measurement #><T> a, <#= measurement #><T> b)
        {
            <#= measurement #>.Units units = a.Units <= b.Units ? a.Units : b.Units;
            return new <#= measurement #><T>(Compute.Add(a[units], b[units]), units);
        }

        public static <#= measurement #><T> operator +(<#= measurement #><T> a, <#= measurement #><T> b)
        {
            return Add(a, b);
        }

        #endregion

        #region Subtract

        public static <#= measurement #><T> Subtract(<#= measurement #><T> a, <#= measurement #><T> b)
        {
            <#= measurement #>.Units units = a.Units <= b.Units ? a.Units : b.Units;
            return new <#= measurement #><T>(Compute.Subtract(a[units], b[units]), units);
        }

        public static <#= measurement #><T> operator -(<#= measurement #><T> a, <#= measurement #><T> b)
        {
            return Subtract(a, b);
        }

        #endregion

        #region Multiply

        public static <#= measurement #><T> Multiply(<#= measurement #><T> a, T b)
        {
            return new <#= measurement #><T>(Compute.Multiply(a._measurement, b), a._units);
        }

        public static <#= measurement #><T> Multiply(T b, <#= measurement #><T> a)
        {
            return new <#= measurement #><T>(Compute.Multiply(a._measurement, b), a._units);
        }

        public static <#= measurement #><T> operator *(<#= measurement #><T> a, T b)
        {
            return Multiply(a, b);
        }

        public static <#= measurement #><T> operator *(T b, <#= measurement #><T> a)
        {
            return Multiply(b, a);
        }

        #endregion

        #region Divide

        public static <#= measurement #><T> Divide(<#= measurement #><T> a, T b)
        {
            return new <#= measurement #><T>(Compute.Divide(a._measurement, b), a._units);
        }

        public static <#= measurement #><T> operator /(<#= measurement #><T> a, T b)
        {
            return Divide(a, b);
        }

        #endregion

        #region LessThan

        public static bool LessThan(<#= measurement #><T> a, <#= measurement #><T> b)
        {
            <#= measurement #>.Units units = a.Units <= b.Units ? a.Units : b.Units;
            return Compute.LessThan(a[units], b[units]);
        }

        public static bool operator <(<#= measurement #><T> a, <#= measurement #><T> b)
        {
            return LessThan(a, b);
        }

        #endregion

        #region GreaterThan

        public static bool GreaterThan(<#= measurement #><T> a, <#= measurement #><T> b)
        {
            <#= measurement #>.Units units = a.Units <= b.Units ? a.Units : b.Units;
            return Compute.GreaterThan(a[units], b[units]);
        }

        public static bool operator >(<#= measurement #><T> a, <#= measurement #><T> b)
        {
            return GreaterThan(a, b);
        }

        #endregion

        #region LessThanOrEqual

        public static bool LessThanOrEqual(<#= measurement #><T> a, <#= measurement #><T> b)
        {
            <#= measurement #>.Units units = a.Units <= b.Units ? a.Units : b.Units;
            return Compute.LessThanOrEqual(a[units], b[units]);
        }

        public static bool operator <=(<#= measurement #><T> a, <#= measurement #><T> b)
        {
            return LessThanOrEqual(a, b);
        }

        #endregion

        #region GreaterThanOrEqual

        public static bool GreaterThanOrEqual(<#= measurement #><T> a, <#= measurement #><T> b)
        {
            <#= measurement #>.Units units = a.Units <= b.Units ? a.Units : b.Units;
            return Compute.GreaterThanOrEqual(a[units], b[units]);
        }

        public static bool operator >=(<#= measurement #><T> left, <#= measurement #><T> right)
        {
            return GreaterThanOrEqual(left, right);
        }

        #endregion

        #region Equal

        public static bool Equal(<#= measurement #><T> a, <#= measurement #><T> b)
        {
            <#= measurement #>.Units units = a.Units <= b.Units ? a.Units : b.Units;
            return Compute.Equal(a[units], b[units]);
        }

        public static bool operator ==(<#= measurement #><T> a, <#= measurement #><T> b)
        {
            return Equal(a, b);
        }

        public static bool NotEqual(<#= measurement #><T> a, <#= measurement #><T> b)
        {
            <#= measurement #>.Units units = a.Units <= b.Units ? a.Units : b.Units;
            return Compute.NotEqual(a[units], b[units]);
        }

        public static bool operator !=(<#= measurement #><T> a, <#= measurement #><T> b)
        {
            return NotEqual(a, b);
        }

        #endregion

        #endregion

        #region Overrides

        public override string ToString()
        {
            switch (this._units)
            {
                default: return this._measurement + " " + this._units;
            }
        }

        public override bool Equals(object obj)
        {
            if (obj is <#= measurement #><T>)
            {
                return this == ((<#= measurement #><T>)obj);
            }
            return false;
        }

        public override int GetHashCode()
        {
            return this._measurement.GetHashCode() ^ this._units.GetHashCode();
        }

        #endregion
    }

	#endregion
<# } #>}