<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Towel</name>
    </assembly>
    <members>
        <member name="T:Towel.GetIndex`1">
            <summary>Delegate for getting a value at a specified index.</summary>
            <param name="index">The index to get the value of.</param>
            <returns>The value at the given index.</returns>
        </member>
        <member name="T:Towel.SetIndex`1">
            <summary>Delegate for setting a value at a specified index.</summary>
            <param name="index">The index to set the value of.</param>
            <param name="value">The value to set at the given index.</param>
        </member>
        <member name="T:Towel.Accessor">
            <summary>Static class containing extensions for converting IList indexers to delegates.</summary>
        </member>
        <member name="M:Towel.Accessor.Get``1(System.Collections.Generic.IList{``0})">
            <summary>Converts the get indexer of an IList to a delegate.</summary>
            <typeparam name="T">The generic type of the IList.</typeparam>
            <param name="ilist">The IList to retrieve the get delegate of.</param>
            <returns>A delegate for getting an indexed value in the IList.</returns>
        </member>
        <member name="M:Towel.Accessor.Assign``1(System.Collections.Generic.IList{``0})">
            <summary>Converts the set indexer of an IList to a delegate.</summary>
            <typeparam name="T">The generic type of the IList.</typeparam>
            <param name="ilist">The IList to retrieve the set delegate of.</param>
            <returns>A delegate for setting an indexed value in the IList.</returns>
        </member>
        <member name="T:Towel.Algorithms.Search">
            <summary>Static class taht constains algorithms for searching.</summary>
        </member>
        <member name="M:Towel.Algorithms.Search.Binary``1(Towel.GetIndex{``0},System.Int32,Towel.CompareToKnownValue{``0})">
            <summary>Performs a binary search to find the index where a specific value fits in indexed, sorted items.</summary>
            <param name="get">Indexer delegate.</param>
            <param name="length">The number of indexed items.</param>
            <param name="compare">Comparison delegate.</param>
            <returns>The index where the specific value fits into the index, sorted items.</returns>
        </member>
        <member name="T:Towel.Algorithms.Search.Neighbors`1">
            <summary>Step function for all neigbors of a given node.</summary>
            <param name="current">The node to step through all the neighbors of.</param>
            <param name="neighbors">Step function to perform on all neighbors.</param>
        </member>
        <member name="T:Towel.Algorithms.Search.Heuristic`2">
            <summary>Computes the heuristic value of a given node in a graph (smaller values mean closer to goal node).</summary>
            <param name="node">The node to compute the heuristic value of.</param>
            <returns>The computed heuristic value for this node.</returns>
        </member>
        <member name="T:Towel.Algorithms.Search.Cost`2">
            <summary>Computes the cost of moving from the current node to a specific neighbor.</summary>
            <param name="current">The current (starting) node.</param>
            <param name="neighbor">The node to compute the cost of movign to.</param>
            <returns>The computed cost value of movign from current to neighbor.</returns>
        </member>
        <member name="T:Towel.Algorithms.Search.Goal`1">
            <summary>Predicate for determining if we have reached the goal node.</summary>
            <param name="current">The current node.</param>
            <returns>True if the current node is a/the goal node; False if not.</returns>
        </member>
        <member name="M:Towel.Algorithms.Search.Graph``2(``0,Towel.Algorithms.Search.Neighbors{``0},Towel.Algorithms.Search.Heuristic{``0,``1},Towel.Algorithms.Search.Cost{``0,``1},Towel.Algorithms.Search.Goal{``0})">
            <summary>Runs the A* search algorithm algorithm on a graph.</summary>
            <param name="start">The node to start at.</param>
            <param name="neighbors">Step function for all neigbors of a given node.</param>
            <param name="heuristic">Computes the heuristic value of a given node in a graph.</param>
            <param name="cost">Computes the cost of moving from the current node to a specific neighbor.</param>
            <param name="goal">Predicate for determining if we have reached the goal node.</param>
            <returns>Stepper of the shortest path or null if no path exists.</returns>
        </member>
        <member name="M:Towel.Algorithms.Search.Graph``2(``0,Towel.DataStructures.IGraph{``0},Towel.Algorithms.Search.Heuristic{``0,``1},Towel.Algorithms.Search.Cost{``0,``1},Towel.Algorithms.Search.Goal{``0})">
            <summary>Runs the A* search algorithm algorithm on a graph.</summary>
            <param name="start">The node to start at.</param>
            <param name="graph">The graph to perform the search on.</param>
            <param name="heuristic">Computes the heuristic value of a given node in a graph.</param>
            <param name="cost">Computes the cost of moving from the current node to a specific neighbor.</param>
            <param name="goal">Predicate for determining if we have reached the goal node.</param>
            <returns>Stepper of the shortest path or null if no path exists.</returns>
        </member>
        <member name="M:Towel.Algorithms.Search.Graph``2(``0,Towel.Algorithms.Search.Neighbors{``0},Towel.Algorithms.Search.Heuristic{``0,``1},Towel.Algorithms.Search.Cost{``0,``1},``0)">
            <summary>Runs the A* search algorithm algorithm on a graph.</summary>
            <param name="start">The node to start at.</param>
            <param name="neighbors">Delegate for gettign the neighbors of a node.</param>
            <param name="heuristic">Computes the heuristic value of a given node in a graph.</param>
            <param name="cost">Computes the cost of moving from the current node to a specific neighbor.</param>
            <param name="goal">The goal node.</param>
            <returns>Stepper of the shortest path or null if no path exists.</returns>
        </member>
        <member name="M:Towel.Algorithms.Search.Graph``2(``0,Towel.Algorithms.Search.Neighbors{``0},Towel.Algorithms.Search.Heuristic{``0,``1},Towel.Algorithms.Search.Cost{``0,``1},``0,Towel.Equate{``0})">
            <summary>Runs the A* search algorithm algorithm on a graph.</summary>
            <param name="start">The node to start at.</param>
            <param name="neighbors">Delegate for gettign the neighbors of a node.</param>
            <param name="heuristic">Computes the heuristic value of a given node in a graph.</param>
            <param name="cost">Computes the cost of moving from the current node to a specific neighbor.</param>
            <param name="goal">The goal node.</param>
            <param name="equate">A delegate for checking for equality between two nodes.</param>
            <returns>Stepper of the shortest path or null if no path exists.</returns>
        </member>
        <member name="M:Towel.Algorithms.Search.Graph``2(``0,Towel.DataStructures.IGraph{``0},Towel.Algorithms.Search.Heuristic{``0,``1},Towel.Algorithms.Search.Cost{``0,``1},``0)">
            <summary>Runs the A* search algorithm algorithm on a graph.</summary>
            <param name="start">The node to start at.</param>
            <param name="graph">The graph to perform the search on.</param>
            <param name="heuristic">Computes the heuristic value of a given node in a graph.</param>
            <param name="cost">Computes the cost of moving from the current node to a specific neighbor.</param>
            <param name="goal">The goal node.</param>
            <returns>Stepper of the shortest path or null if no path exists.</returns>
        </member>
        <member name="M:Towel.Algorithms.Search.Graph``2(``0,Towel.DataStructures.IGraph{``0},Towel.Algorithms.Search.Heuristic{``0,``1},Towel.Algorithms.Search.Cost{``0,``1},``0,Towel.Equate{``0})">
            <summary>Runs the A* search algorithm algorithm on a graph.</summary>
            <param name="start">The node to start at.</param>
            <param name="graph">The graph to perform the search on.</param>
            <param name="heuristic">Computes the heuristic value of a given node in a graph.</param>
            <param name="cost">Computes the cost of moving from the current node to a specific neighbor.</param>
            <param name="goal">The goal node.</param>
            <param name="equate">A delegate for checking for equality between two nodes.</param>
            <returns>Stepper of the shortest path or null if no path exists.</returns>
        </member>
        <member name="M:Towel.Algorithms.Search.Graph``2(``0,Towel.Algorithms.Search.Neighbors{``0},Towel.Algorithms.Search.Heuristic{``0,``1},Towel.Algorithms.Search.Goal{``0})">
            <summary>Runs the Greedy search algorithm algorithm on a graph.</summary>
            <param name="start">The node to start at.</param>
            <param name="neighbors">Step function for all neigbors of a given node.</param>
            <param name="heuristic">Computes the heuristic value of a given node in a graph.</param>
            <param name="goal">Predicate for determining if we have reached the goal node.</param>
            <returns>Stepper of the shortest path or null if no path exists.</returns>
        </member>
        <member name="M:Towel.Algorithms.Search.Graph``2(``0,Towel.Algorithms.Search.Neighbors{``0},Towel.Algorithms.Search.Heuristic{``0,``1},``0)">
            <summary>Runs the Greedy search algorithm algorithm on a graph.</summary>
            <param name="start">The node to start at.</param>
            <param name="neighbors">Step function for all neigbors of a given node.</param>
            <param name="heuristic">Computes the heuristic value of a given node in a graph.</param>
            <param name="goal">Predicate for determining if we have reached the goal node.</param>
            <returns>Stepper of the shortest path or null if no path exists.</returns>
        </member>
        <member name="M:Towel.Algorithms.Search.Graph``2(``0,Towel.Algorithms.Search.Neighbors{``0},Towel.Algorithms.Search.Heuristic{``0,``1},``0,Towel.Equate{``0})">
            <summary>Runs the Greedy search algorithm algorithm on a graph.</summary>
            <param name="start">The node to start at.</param>
            <param name="neighbors">Step function for all neigbors of a given node.</param>
            <param name="heuristic">Computes the heuristic value of a given node in a graph.</param>
            <param name="goal">Predicate for determining if we have reached the goal node.</param>
            <param name="equate">Delegate for checking for equality between two nodes.</param>
            <returns>Stepper of the shortest path or null if no path exists.</returns>
        </member>
        <member name="M:Towel.Algorithms.Search.Graph``2(``0,Towel.DataStructures.IGraph{``0},Towel.Algorithms.Search.Heuristic{``0,``1},``0)">
            <summary>Runs the Greedy search algorithm algorithm on a graph.</summary>
            <param name="start">The node to start at.</param>
            <param name="graph">The graph to search against.</param>
            <param name="heuristic">Computes the heuristic value of a given node in a graph.</param>
            <param name="goal">Predicate for determining if we have reached the goal node.</param>
            <returns>Stepper of the shortest path or null if no path exists.</returns>
        </member>
        <member name="M:Towel.Algorithms.Search.Graph``2(``0,Towel.DataStructures.IGraph{``0},Towel.Algorithms.Search.Heuristic{``0,``1},``0,Towel.Equate{``0})">
            <summary>Runs the Greedy search algorithm algorithm on a graph.</summary>
            <param name="start">The node to start at.</param>
            <param name="graph">The graph to search against.</param>
            <param name="heuristic">Computes the heuristic value of a given node in a graph.</param>
            <param name="goal">Predicate for determining if we have reached the goal node.</param>
            <param name="equate">Delegate for checking for equality between two nodes.</param>
            <returns>Stepper of the shortest path or null if no path exists.</returns>
        </member>
        <member name="M:Towel.Algorithms.Search.Graph``2(``0,Towel.DataStructures.IGraph{``0},Towel.Algorithms.Search.Heuristic{``0,``1},Towel.Algorithms.Search.Goal{``0})">
            <summary>Runs the Greedy search algorithm algorithm on a graph.</summary>
            <param name="start">The node to start at.</param>
            <param name="graph">The graph to search against.</param>
            <param name="heuristic">Computes the heuristic value of a given node in a graph.</param>
            <param name="goal">Predicate for determining if we have reached the goal node.</param>
            <returns>Stepper of the shortest path or null if no path exists.</returns>
        </member>
        <member name="T:Towel.Algorithms.Sort">
            <summary>Contains static sorting algorithms.</summary>
        </member>
        <member name="M:Towel.Algorithms.Sort.Bubble``1(``0[])">
            <summary>Sorts an entire array in non-decreasing order using the bubble sort algorithm.</summary>
            <typeparam name="T">The type of objects stored within the array.</typeparam>
            <param name="array">the array to be sorted</param>
            <remarks>Runtime: Omega(n), average(n^2), O(n^2). Memory: in place. Stability: yes.</remarks>
        </member>
        <member name="M:Towel.Algorithms.Sort.Bubble``1(Towel.Compare{``0},``0[])">
            <summary>Sorts an entire array in non-decreasing order using the bubble sort algorithm.</summary>
            <typeparam name="T">The type of objects stored within the array.</typeparam>
            <param name="compare">The compare function (returns a positive value if left is greater than right).</param>
            <param name="array">the array to be sorted</param>
            <remarks>Runtime: Omega(n), average(n^2), O(n^2). Memory: in place. Stability: yes.</remarks>
        </member>
        <member name="M:Towel.Algorithms.Sort.Bubble``1(Towel.Compare{``0},``0[],System.Int32,System.Int32)">
            <summary>Sorts an entire array in non-decreasing order using the bubble sort algorithm.</summary>
            <typeparam name="T">The type of objects stored within the array.</typeparam>
            <param name="compare">The compare function (returns a positive value if left is greater than right).</param>
            <param name="array">the array to be sorted</param>
            <param name="start">The starting index of the sort.</param>
            <param name="end">The ending index of the sort.</param>
            <remarks>Runtime: Omega(n), average(n^2), O(n^2). Memory: in place. Stability: yes.</remarks>
        </member>
        <member name="M:Towel.Algorithms.Sort.Bubble``1(Towel.Compare{``0},Towel.GetIndex{``0},Towel.SetIndex{``0},System.Int32,System.Int32)">
            <summary>Sorts an entire array in non-decreasing order using the bubble sort algorithm.</summary>
            <typeparam name="T">The type of objects stored within the array.</typeparam>
            <param name="compare">The compare function (returns a positive value if left is greater than right).</param>
            <param name="get">Delegate for getting a value at a specified index.</param>
            <param name="set">Delegate for setting a value at a specified index.</param>
            <param name="start">The starting index of the sort.</param>
            <param name="end">The ending index of the sort.</param>
            <remarks>Runtime: Omega(n), average(n^2), O(n^2). Memory: in place. Stability: yes.</remarks>
        </member>
        <member name="M:Towel.Algorithms.Sort.Selection``1(``0[])">
            <summary>Sorts an entire array in non-decreasing order using the selection sort algoritm.</summary>
            <typeparam name="T">The type of objects stored within the array.</typeparam>
            <param name="array">the array to be sorted</param>
            <remarks>Runtime: Omega(n^2), average(n^2), O(n^2). Memory: in place. Stablity: no.</remarks>
        </member>
        <member name="M:Towel.Algorithms.Sort.Selection``1(Towel.Compare{``0},``0[])">
            <summary>Sorts an entire array in non-decreasing order using the selection sort algoritm.</summary>
            <typeparam name="T">The type of objects stored within the array.</typeparam>
            <param name="compare">Returns negative if the left is less than the right.</param>
            <param name="array">the array to be sorted</param>
            <remarks>Runtime: Omega(n^2), average(n^2), O(n^2). Memory: in place. Stablity: no.</remarks>
        </member>
        <member name="M:Towel.Algorithms.Sort.Selection``1(Towel.Compare{``0},``0[],System.Int32,System.Int32)">
            <summary>Sorts an entire array in non-decreasing order using the selection sort algoritm.</summary>
            <typeparam name="T">The type of objects stored within the array.</typeparam>
            <param name="compare">Returns negative if the left is less than the right.</param>
            <param name="array">the array to be sorted</param>
            <param name="start">The starting index of the sort.</param>
            <param name="end">The ending index of the sort.</param>
            <remarks>Runtime: Omega(n^2), average(n^2), O(n^2). Memory: in place. Stablity: no.</remarks>
        </member>
        <member name="M:Towel.Algorithms.Sort.Selection``1(Towel.Compare{``0},Towel.GetIndex{``0},Towel.SetIndex{``0},System.Int32,System.Int32)">
            <summary>Sorts an entire array in non-decreasing order using the selection sort algoritm.</summary>
            <typeparam name="T">The type of objects stored within the array.</typeparam>
            <param name="compare">Returns negative if the left is less than the right.</param>
            <param name="get">Delegate for getting a value at a specified index.</param>
            <param name="set">Delegate for setting a value at a specified index.</param>
            <param name="start">The starting index of the sort.</param>
            <param name="end">The ending index of the sort.</param>
            <remarks>Runtime: Omega(n^2), average(n^2), O(n^2). Memory: in place. Stablity: no.</remarks>
        </member>
        <member name="M:Towel.Algorithms.Sort.Insertion``1(``0[])">
            <summary>Sorts an entire array in non-decreasing order using the insertion sort algorithm.</summary>
            <typeparam name="T">The type of objects stored within the array.</typeparam>
            <param name="array">the array to be sorted</param>
            <remarks>Runtime: Omega(n), average(n^2), O(n^2). Memory: in place. Stablity: yes.</remarks>
        </member>
        <member name="M:Towel.Algorithms.Sort.Insertion``1(Towel.Compare{``0},``0[])">
            <summary>Sorts an entire array in non-decreasing order using the insertion sort algorithm.</summary>
            <typeparam name="T">The type of objects stored within the array.</typeparam>
            <param name="compare">Returns positive if left greater than right.</param>
            <param name="array">the array to be sorted</param>
            <remarks>Runtime: Omega(n), average(n^2), O(n^2). Memory: in place. Stablity: yes.</remarks>
        </member>
        <member name="M:Towel.Algorithms.Sort.Insertion``1(Towel.Compare{``0},``0[],System.Int32,System.Int32)">
            <summary>Sorts an entire array in non-decreasing order using the insertion sort algorithm.</summary>
            <typeparam name="T">The type of objects stored within the array.</typeparam>
            <param name="compare">Returns positive if left greater than right.</param>
            <param name="array">the array to be sorted</param>
            <param name="start">The starting index of the sort.</param>
            <param name="end">The ending index of the sort.</param>
            <remarks>Runtime: Omega(n), average(n^2), O(n^2). Memory: in place. Stablity: yes.</remarks>
        </member>
        <member name="M:Towel.Algorithms.Sort.Insertion``1(Towel.Compare{``0},Towel.GetIndex{``0},Towel.SetIndex{``0},System.Int32,System.Int32)">
            <summary>Sorts an entire array in non-decreasing order using the insertion sort algorithm.</summary>
            <typeparam name="T">The type of objects stored within the array.</typeparam>
            <param name="compare">Returns positive if left greater than right.</param>
            <param name="get">Delegate for getting a value at a specified index.</param>
            <param name="set">Delegate for setting a value at a specified index.</param>
            <param name="start">The starting index of the sort.</param>
            <param name="end">The ending index of the sort.</param>
            <remarks>Runtime: Omega(n), average(n^2), O(n^2). Memory: in place. Stablity: yes.</remarks>
        </member>
        <member name="M:Towel.Algorithms.Sort.Quick``1(``0[])">
            <summary>Sorts an entire array in non-decreasing order using the quick sort algorithm.</summary>
            <typeparam name="T">The type of objects stored within the array.</typeparam>
            <param name="array">The array to be sorted</param>
            <remarks>Runtime: Omega(n*ln(n)), average(n*ln(n)), O(n^2). Memory: ln(n). Stablity: no.</remarks>
        </member>
        <member name="M:Towel.Algorithms.Sort.Quick``1(Towel.Compare{``0},``0[])">
            <summary>Sorts an entire array in non-decreasing order using the quick sort algorithm.</summary>
            <typeparam name="T">The type of objects stored within the array.</typeparam>
            <param name="compare">The method of compare to be sorted by.</param>
            <param name="array">The array to be sorted</param>
            <remarks>Runtime: Omega(n*ln(n)), average(n*ln(n)), O(n^2). Memory: ln(n). Stablity: no.</remarks>
        </member>
        <member name="M:Towel.Algorithms.Sort.Quick``1(Towel.Compare{``0},``0[],System.Int32,System.Int32)">
            <summary>Sorts an entire array in non-decreasing order using the quick sort algorithm.</summary>
            <typeparam name="T">The type of objects stored within the array.</typeparam>
            <param name="compare">The method of compare to be sorted by.</param>
            <param name="array">The array to be sorted</param>
            <param name="start">The starting index of the sort.</param>
            <param name="end">The ending index of the sort.</param>
            <remarks>Runtime: Omega(n*ln(n)), average(n*ln(n)), O(n^2). Memory: ln(n). Stablity: no.</remarks>
        </member>
        <member name="M:Towel.Algorithms.Sort.Quick``1(Towel.Compare{``0},Towel.GetIndex{``0},Towel.SetIndex{``0},System.Int32,System.Int32)">
            <summary>Sorts an entire array in non-decreasing order using the quick sort algorithm.</summary>
            <typeparam name="T">The type of objects stored within the array.</typeparam>
            <param name="compare">The method of compare to be sorted by.</param>
            <param name="get">Delegate for getting a value at a specified index.</param>
            <param name="set">Delegate for setting a value at a specified index.</param>
            <param name="start">The starting index of the sort.</param>
            <param name="end">The ending index of the sort.</param>
            <remarks>Runtime: Omega(n*ln(n)), average(n*ln(n)), O(n^2). Memory: ln(n). Stablity: no.</remarks>
        </member>
        <member name="M:Towel.Algorithms.Sort.Merge``1(``0[])">
            <summary>Sorts up to an array in non-decreasing order using the merge sort algorithm.</summary>
            <typeparam name="T">The type of objects stored within the array.</typeparam>
            <param name="array">The array to be sorted</param>
            <remarks>Runtime: Omega(n*ln(n)), average(n*ln(n)), O(n*ln(n)). Memory: n. Stablity: yes.</remarks>
        </member>
        <member name="M:Towel.Algorithms.Sort.Merge``1(Towel.Compare{``0},``0[])">
            <summary>Sorts up to an array in non-decreasing order using the merge sort algorithm.</summary>
            <typeparam name="T">The type of objects stored within the array.</typeparam>
            <param name="compare">Returns zero or negative if the left is less than or equal to the right.</param>
            <param name="array">The array to be sorted</param>
            <remarks>Runtime: Omega(n*ln(n)), average(n*ln(n)), O(n*ln(n)). Memory: n. Stablity: yes.</remarks>
        </member>
        <member name="M:Towel.Algorithms.Sort.Merge``1(Towel.Compare{``0},``0[],System.Int32,System.Int32)">
            <summary>Sorts up to an array in non-decreasing order using the merge sort algorithm.</summary>
            <typeparam name="T">The type of objects stored within the array.</typeparam>
            <param name="compare">Returns zero or negative if the left is less than or equal to the right.</param>
            <param name="array">The array to be sorted</param>
            <param name="start">The starting index of the sort.</param>
            <param name="end">The ending index of the sort.</param>
            <remarks>Runtime: Omega(n*ln(n)), average(n*ln(n)), O(n*ln(n)). Memory: n. Stablity: yes.</remarks>
        </member>
        <member name="M:Towel.Algorithms.Sort.Merge``1(Towel.Compare{``0},Towel.GetIndex{``0},Towel.SetIndex{``0},System.Int32,System.Int32)">
            <summary>Sorts up to an array in non-decreasing order using the merge sort algorithm.</summary>
            <typeparam name="T">The type of objects stored within the array.</typeparam>
            <param name="compare">Returns zero or negative if the left is less than or equal to the right.</param>
            <param name="get">Delegate for getting a value at a specified index.</param>
            <param name="set">Delegate for setting a value at a specified index.</param>
            <param name="start">The starting index of the sort.</param>
            <param name="end">The ending index of the sort.</param>
            <remarks>Runtime: Omega(n*ln(n)), average(n*ln(n)), O(n*ln(n)). Memory: n. Stablity: yes.</remarks>
        </member>
        <member name="M:Towel.Algorithms.Sort.Heap``1(``0[])">
            <summary>Sorts an entire array in non-decreasing order using the heap sort algorithm.</summary>
            <typeparam name="T">The type of objects stored within the array.</typeparam>
            <param name="array">The array to be sorted</param>
            <remarks>Runtime: Omega(n*ln(n)), average(n*ln(n)), O(n^2). Memory: in place. Stablity: no.</remarks>
        </member>
        <member name="M:Towel.Algorithms.Sort.Heap``1(Towel.Compare{``0},``0[])">
            <summary>Sorts an entire array in non-decreasing order using the heap sort algorithm.</summary>
            <typeparam name="T">The type of objects stored within the array.</typeparam>
            <param name="compare">The method of compare for the sort.</param>
            <param name="array">The array to be sorted</param>
            <remarks>Runtime: Omega(n*ln(n)), average(n*ln(n)), O(n^2). Memory: in place. Stablity: no.</remarks>
        </member>
        <member name="M:Towel.Algorithms.Sort.Heap``1(Towel.Compare{``0},``0[],System.Int32,System.Int32)">
            <summary>Sorts an entire array in non-decreasing order using the heap sort algorithm.</summary>
            <typeparam name="T">The type of objects stored within the array.</typeparam>
            <param name="compare">The method of compare for the sort.</param>
            <param name="array">The array to be sorted</param>
            <param name="start">The starting index of the sort.</param>
            <param name="end">The ending index of the sort.</param>
            <remarks>Runtime: Omega(n*ln(n)), average(n*ln(n)), O(n^2). Memory: in place. Stablity: no.</remarks>
        </member>
        <member name="M:Towel.Algorithms.Sort.Heap``1(Towel.Compare{``0},Towel.GetIndex{``0},Towel.SetIndex{``0},System.Int32,System.Int32)">
            <summary>Sorts an entire array in non-decreasing order using the heap sort algorithm.</summary>
            <typeparam name="T">The type of objects stored within the array.</typeparam>
            <param name="compare">The method of compare for the sort.</param>
            <param name="get">Delegate for getting a value at a specified index.</param>
            <param name="set">Delegate for setting a value at a specified index.</param>
            <param name="start">The starting index of the sort.</param>
            <param name="end">The ending index of the sort.</param>
            <remarks>Runtime: Omega(n*ln(n)), average(n*ln(n)), O(n^2). Memory: in place. Stablity: no.</remarks>
        </member>
        <member name="M:Towel.Algorithms.Sort.OddEven``1(``0[])">
            <summary>Sorts an entire array in non-decreasing order using the odd-even sort algorithm.</summary>
            <typeparam name="T">The type of objects stored within the array.</typeparam>
            <param name="array">The array to be sorted</param>
            <remarks>Runtime: Omega(n), average(n^2), O(n^2). Memory: in place. Stablity: yes.</remarks>
        </member>
        <member name="M:Towel.Algorithms.Sort.OddEven``1(Towel.Compare{``0},``0[])">
            <summary>Sorts an entire array in non-decreasing order using the odd-even sort algorithm.</summary>
            <typeparam name="T">The type of objects stored within the array.</typeparam>
            <param name="compare">The method of compare for the sort.</param>
            <param name="array">The array to be sorted</param>
            <remarks>Runtime: Omega(n), average(n^2), O(n^2). Memory: in place. Stablity: yes.</remarks>
        </member>
        <member name="M:Towel.Algorithms.Sort.OddEven``1(Towel.Compare{``0},``0[],System.Int32,System.Int32)">
            <summary>Sorts an entire array in non-decreasing order using the odd-even sort algorithm.</summary>
            <typeparam name="T">The type of objects stored within the array.</typeparam>
            <param name="compare">The method of compare for the sort.</param>
            <param name="array">The array to be sorted</param>
            <param name="start">The starting index of the sort.</param>
            <param name="end">The ending index of the sort.</param>
            <remarks>Runtime: Omega(n), average(n^2), O(n^2). Memory: in place. Stablity: yes.</remarks>
        </member>
        <member name="M:Towel.Algorithms.Sort.OddEven``1(Towel.Compare{``0},Towel.GetIndex{``0},Towel.SetIndex{``0},System.Int32,System.Int32)">
            <summary>Sorts an entire array in non-decreasing order using the odd-even sort algorithm.</summary>
            <typeparam name="T">The type of objects stored within the array.</typeparam>
            <param name="compare">The method of compare for the sort.</param>
            <param name="get">Delegate for getting a value at a specified index.</param>
            <param name="set">Delegate for setting a value at a specified index.</param>
            <param name="start">The starting index of the sort.</param>
            <param name="end">The ending index of the sort.</param>
            <remarks>Runtime: Omega(n), average(n^2), O(n^2). Memory: in place. Stablity: yes.</remarks>
        </member>
        <member name="M:Towel.Algorithms.Sort.Shuffle``1(System.Random,``0[])">
            <summary>Sorts an entire array in a randomized order.</summary>
            <typeparam name="T">The type of objects stored within the array.</typeparam>
            <param name="random">The random to shuffle with.</param>
            <param name="array">The aray to shuffle.</param>
            <remarks>Runtime: O(n). Memory: in place. Stable: N/A (not a comparative sort).</remarks>
        </member>
        <member name="M:Towel.Algorithms.Sort.Shuffle``1(``0[])">
            <summary>Sorts an entire array in a randomized order.</summary>
            <typeparam name="T">The type of objects stored within the array.</typeparam>
            <param name="array">The array to shuffle.</param>
            <remarks>Runtime: O(n). Memory: in place. Stable: N/A (not a comparative sort).</remarks>
        </member>
        <member name="M:Towel.Algorithms.Sort.Shuffle``1(System.Random,``0[],System.Int32,System.Int32)">
            <summary>Sorts an entire array in a randomized order.</summary>
            <typeparam name="T">The type of objects stored within the array.</typeparam>
            <param name="random">The random to shuffle with.</param>
            <param name="array">The array to shuffle.</param>
            <param name="start">The starting index of the shuffle.</param>
            <param name="end">The ending index of the shuffle.</param>
            <runtime>O(n)</runtime>
        </member>
        <member name="M:Towel.Algorithms.Sort.Shuffle``1(``0[],System.Int32,System.Int32)">
            <summary>Sorts an entire array in a randomized order.</summary>
            <typeparam name="T">The type of objects stored within the array.</typeparam>
            <param name="array">The array to shuffle.</param>
            <param name="start">The starting index of the shuffle.</param>
            <param name="end">The ending index of the shuffle.</param>
            <remarks>Runtime: O(n). Memory: in place. Stable: N/A (not a comparative sort).</remarks>
        </member>
        <member name="M:Towel.Algorithms.Sort.Shuffle``1(Towel.GetIndex{``0},Towel.SetIndex{``0},System.Int32,System.Int32)">
            <summary>Sorts an entire array in a randomized order.</summary>
            <typeparam name="T">The type of objects stored within the array.</typeparam>
            <param name="get">The get accessor of the structure to shuffle.</param>
            <param name="set">The set accessor of the structure to shuffle.</param>
            <param name="start">The starting index of the shuffle.</param>
            <param name="end">The ending index of the shuffle.</param>
            <remarks>Runtime: O(n). Memory: in place. Stable: N/A (not a comparative sort).</remarks>
        </member>
        <member name="M:Towel.Algorithms.Sort.Shuffle``1(System.Random,Towel.GetIndex{``0},Towel.SetIndex{``0},System.Int32,System.Int32)">
            <summary>Sorts an entire array in a randomized order.</summary>
            <typeparam name="T">The type of objects stored within the array.</typeparam>
            <param name="random">The random to shuffle with.</param>
            <param name="get">The get accessor of the structure to shuffle.</param>
            <param name="set">The set accessor of the structure to shuffle.</param>
            <param name="start">The starting index of the shuffle.</param>
            <param name="end">The ending index of the shuffle.</param>
            <remarks>Runtime: O(n). Memory: in place. Stable: N/A (not a comparative sort).</remarks>
        </member>
        <member name="M:Towel.Algorithms.Sort.Bogo``1(``0[])">
            <summary>Sorts an entire array in non-decreasing order using the slow sort algorithm.</summary>
            <typeparam name="T">The type of objects stored within the array.</typeparam>
            <param name="array">The array to be sorted.</param>
            <remarks>Runtime: Omega(n), average(n*n!), O(infinity). Memory: in place. Stablity: no.</remarks>
        </member>
        <member name="M:Towel.Algorithms.Sort.Bogo``1(Towel.Compare{``0},``0[])">
            <summary>Sorts an entire array in non-decreasing order using the slow sort algorithm.</summary>
            <typeparam name="T">The type of objects stored within the array.</typeparam>
            <param name="compare">The method of compare for the sort.</param>
            <param name="array">The array to be sorted.</param>
            <remarks>Runtime: Omega(n), average(n*n!), O(infinity). Memory: in place. Stablity: no.</remarks>
        </member>
        <member name="M:Towel.Algorithms.Sort.Bogo``1(Towel.Compare{``0},``0[],System.Int32,System.Int32)">
            <summary>Sorts an entire array in non-decreasing order using the slow sort algorithm.</summary>
            <typeparam name="T">The type of objects stored within the array.</typeparam>
            <param name="compare">The method of compare for the sort.</param>
            <param name="array">The array to be sorted.</param>
            <param name="start">The starting index of the sort.</param>
            <param name="end">The ending index of the sort.</param>
            <remarks>Runtime: Omega(n), average(n*n!), O(infinity). Memory: in place. Stablity: no.</remarks>
        </member>
        <member name="M:Towel.Algorithms.Sort.Bogo``1(Towel.Compare{``0},Towel.GetIndex{``0},Towel.SetIndex{``0},System.Int32,System.Int32)">
            <summary>Sorts an entire array in non-decreasing order using the slow sort algorithm.</summary>
            <typeparam name="T">The type of objects stored within the array.</typeparam>
            <param name="compare">The method of compare for the sort.</param>
            <param name="get">Delegate for getting a value at a specified index.</param>
            <param name="set">Delegate for setting a value at a specified index.</param>
            <param name="start">The starting index of the sort.</param>
            <param name="end">The ending index of the sort.</param>
            <remarks>Runtime: Omega(n), average(n*n!), O(infinity). Memory: in place. Stablity: no.</remarks>
        </member>
        <member name="T:Towel.Comparison">
            <summary>Comparison operator between two operands in a logical expression.</summary>
        </member>
        <member name="F:Towel.Comparison.Less">
            <summary>The left operand is less than the right operand.</summary>
        </member>
        <member name="F:Towel.Comparison.Equal">
            <summary>The left operand is equal to the right operand.</summary>
        </member>
        <member name="F:Towel.Comparison.Greater">
            <summary>The left operand is greater than the right operand.</summary>
        </member>
        <member name="T:Towel.Compare`1">
            <summary>Delegate for comparing two instances of the same type.</summary>
            <typeparam name="T">The type of the istances to compare.</typeparam>
            <param name="left">The left operand of the comparison.</param>
            <param name="right">The right operand of the comparison.</param>
            <returns>The Comparison operator between the operands to form a true logic statement.</returns>
        </member>
        <member name="T:Towel.Compare`2">
            <summary>Delegate for comparing two instances of different types.</summary>
            <typeparam name="Left">The type of the left istance to compare.</typeparam>
            <typeparam name="Right">The type of the right instance to compare.</typeparam>
            <param name="left">The left operand of the comparison.</param>
            <param name="right">The right operand of the comparison.</param>
            <returns>The Comparison operator between the operands to form a true logic statement.</returns>
        </member>
        <member name="T:Towel.CompareToKnownValue`1">
            <summary>Delegate for comparing a value to a known value.</summary>
            <typeparam name="T">The generic types to compare.</typeparam>
            <param name="value">The value to compare to the known value.</param>
            <returns>The result of the comparison.</returns>
        </member>
        <member name="T:Towel.Compare">
            <summary>Static wrapper for "CompareTo" methods on IComparables.</summary>
        </member>
        <member name="M:Towel.Compare.Wrap(System.Int32)">
            <summary>Converts an int into a comparison.</summary>
            <param name="comparison">The integer comparison result to convert into a Comparison.</param>
            <returns>The converted Comparison value.</returns>
        </member>
        <member name="M:Towel.Compare.Default``1(``0,``0)">
            <summary>Gets the default comparer or throws an exception if non exists.</summary>
            <typeparam name="T">The generic type of the comparison.</typeparam>
            <param name="a">Left operand of the comparison.</param>
            <param name="b">Right operand of the comparison.</param>
            <returns>The result of the comparison.</returns>
        </member>
        <member name="M:Towel.Compare.Invert``2(Towel.Compare{``0,``1})">
            <summary>Inverts a comparison delegate.</summary>
            <returns>The invert of the compare delegate.</returns>
        </member>
        <member name="M:Towel.Compare.Invert``1(Towel.Compare{``0})">
            <summary>Inverts a comparison delegate.</summary>
            <returns>The invert of the compare delegate.</returns>
        </member>
        <member name="M:Towel.Compare.Invert(Towel.Comparison)">
            <summary>Inverts a comparison value.</summary>
            <returns>The invert of the comparison value.</returns>
        </member>
        <member name="M:Towel.Compare.FromComparer``1(System.Collections.Generic.Comparer{``0})">
            <summary>Converts a System.Collection.Generic.Comparer into a Towel.Compare delegate.</summary>
            <typeparam name="T">The generic type that the comparing methods operate on.</typeparam>
            <param name="comparer">The system.Collections.Generic.Comparer to convert into a Towel.Compare delegate.</param>
            <returns>The converted Towel.Compare delegate.</returns>
        </member>
        <member name="M:Towel.Compare.ToSystemComparison``1(Towel.Compare{``0})">
            <summary>Converts a Towel.Compare to a System.Comparison.</summary>
            <typeparam name="T">The generic type that the comparing methods operate on.</typeparam>
            <param name="compare">The Towel.Compare to convert to a System.Comparison delegate.</param>
            <returns>The converted System.Comparison delegate.</returns>
        </member>
        <member name="T:Towel.DataStructures.IArray`2">
            <summary>An indexed fixed-sized data structure.</summary>
            <typeparam name="T">The generic type within the structure.</typeparam>
            <typeparam name="Index">The generic type of the indexing.</typeparam>
        </member>
        <member name="P:Towel.DataStructures.IArray`2.Item(`1)">
            <summary>Allows indexed access of the array.</summary>
            <param name="index">The index of the array to get/set.</param>
            <returns>The value at the desired index.</returns>
        </member>
        <member name="P:Towel.DataStructures.IArray`2.Length">
            <summary>The length of the array.</summary>
        </member>
        <member name="T:Towel.DataStructures.IArray`1">
            <summary>An indexed fixed-sized data structure.</summary>
            <typeparam name="T">The generic type within the structure.</typeparam>
        </member>
        <member name="T:Towel.DataStructures.Array`1">
            <summary>Contiguous fixed-sized data structure.</summary>
            <typeparam name="T">The generic type within the structure.</typeparam>
        </member>
        <member name="M:Towel.DataStructures.Array`1.#ctor(System.Int32)">
            <summary>Constructs an array that implements a traversal delegate function 
            which is an optimized "foreach" implementation.</summary>
            <param name="size">The length of the array in memory.</param>
        </member>
        <member name="M:Towel.DataStructures.Array`1.#ctor(`0[])">
            <summary>Constructs by wrapping an existing array.</summary>
            <param name="array">The array to be wrapped.</param>
        </member>
        <member name="P:Towel.DataStructures.Array`1.Item(System.Int32)">
            <summary>Allows indexed access of the array.</summary>
            <param name="index">The index of the array to get/set.</param>
            <returns>The value at the desired index.</returns>
        </member>
        <member name="P:Towel.DataStructures.Array`1.Length">
            <summary>The length of the array.</summary>
        </member>
        <member name="M:Towel.DataStructures.Array`1.op_Implicit(`0[])~Towel.DataStructures.Array{`0}">
            <summary>Implicitly converts a C# System array into a Towel array.</summary>
            <param name="array">The array to be represented as a Towel array.</param>
            <returns>The array wrapped in a Towel array.</returns>
        </member>
        <member name="M:Towel.DataStructures.Array`1.op_Implicit(Towel.DataStructures.Array{`0})~`0[]">
            <summary>FOR COMPATIBILITY ONLY. AVOID IF POSSIBLE.</summary>
        </member>
        <member name="M:Towel.DataStructures.Array`1.Clone">
            <summary>Creates a shallow clone of this data structure.</summary>
            <returns>A shallow clone of this data structure.</returns>
        </member>
        <member name="M:Towel.DataStructures.Array`1.Stepper(Towel.Step{`0})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="step">The delegate to invoke on each item in the structure.</param>
        </member>
        <member name="M:Towel.DataStructures.Array`1.Stepper(Towel.StepRef{`0})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="step">The delegate to invoke on each item in the structure.</param>
        </member>
        <member name="M:Towel.DataStructures.Array`1.Stepper(Towel.StepBreak{`0})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="step">The delegate to invoke on each item in the structure.</param>
            <returns>The resulting status of the iteration.</returns>
        </member>
        <member name="M:Towel.DataStructures.Array`1.Stepper(Towel.StepRefBreak{`0})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="step">The delegate to invoke on each item in the structure.</param>
            <returns>The resulting status of the iteration.</returns>
        </member>
        <member name="M:Towel.DataStructures.Array`1.GetEnumerator">
            <summary>Gets the enumerator for the array.</summary>
            <returns>The enumerator for the array.</returns>
        </member>
        <member name="M:Towel.DataStructures.Array`1.ToArray">
            <summary>Converts the structure into an array.</summary>
            <returns>An array containing all the item in the structure.</returns>
        </member>
        <member name="T:Towel.DataStructures.ArrayJagged`1">
            <summary>An array implemented as a jagged array to allow for a number of elements > Int.MaxValue.</summary>
            <typeparam name="T">The generic type of value to store in the array.</typeparam>
        </member>
        <member name="M:Towel.DataStructures.ArrayJagged`1.Stepper(Towel.Step{`0})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="step">The delegate to invoke on each item in the structure.</param>
        </member>
        <member name="M:Towel.DataStructures.ArrayJagged`1.Stepper(Towel.StepRef{`0})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="step">The delegate to invoke on each item in the structure.</param>
        </member>
        <member name="M:Towel.DataStructures.ArrayJagged`1.Stepper(Towel.StepBreak{`0})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="step">The delegate to invoke on each item in the structure.</param>
            <returns>The resulting status of the iteration.</returns>
        </member>
        <member name="M:Towel.DataStructures.ArrayJagged`1.Stepper(Towel.StepRefBreak{`0})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="step">The delegate to invoke on each item in the structure.</param>
            <returns>The resulting status of the iteration.</returns>
        </member>
        <member name="T:Towel.DataStructures.IAvlTree`1">
            <summary>A self-sorting binary tree based on the heights of each node.</summary>
            <typeparam name="T">The generic type of this data structure.</typeparam>
        </member>
        <member name="P:Towel.DataStructures.IAvlTree`1.CurrentLeast">
            <summary>Gets the current least item in the avl tree.</summary>
        </member>
        <member name="P:Towel.DataStructures.IAvlTree`1.CurrentGreatest">
            <summary>Gets the current greated item in the avl tree.</summary>
        </member>
        <member name="M:Towel.DataStructures.IAvlTree`1.Contains``1(``0,Towel.Compare{`0,``0})">
            <summary>Determines if this structure contains a given item.</summary>
            <typeparam name="Key">The type of the key.</typeparam>
            <param name="key">The key of the item to check.</param>
            <param name="compare">Comparison technique (must match the sorting technique of the structure).</param>
            <returns>True if contained, False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.IAvlTree`1.Get``1(``0,Towel.Compare{`0,``0})">
            <summary>Gets an item based on a given key.</summary>
            <typeparam name="Key">The type of the key.</typeparam>
            <param name="key">The key of the item to get.</param>
            <param name="compare">Comparison technique (must match the sorting technique of the structure).</param>
            <returns>The found item.</returns>
        </member>
        <member name="M:Towel.DataStructures.IAvlTree`1.Remove``1(``0,Towel.Compare{`0,``0})">
            <summary>Removes and item based on a given key.</summary>
            <typeparam name="Key">The type of the key.</typeparam>
            <param name="key">The key of the item to be removed.</param>
            <param name="compare">Comparison technique (must match the sorting technique of the structure).</param>
        </member>
        <member name="M:Towel.DataStructures.IAvlTree`1.StepperReverse(Towel.Step{`0})">
            <summary>Invokes a delegate for each entry in the data structure (right to left).</summary>
            <param name="step">The delegate to invoke on each item in the structure.</param>
        </member>
        <member name="M:Towel.DataStructures.IAvlTree`1.StepperReverse(Towel.StepRef{`0})">
            <summary>Invokes a delegate for each entry in the data structure (right to left).</summary>
            <param name="step">The delegate to invoke on each item in the structure.</param>
        </member>
        <member name="M:Towel.DataStructures.IAvlTree`1.StepperReverse(Towel.StepBreak{`0})">
            <summary>Invokes a delegate for each entry in the data structure (right to left).</summary>
            <param name="step">The delegate to invoke on each item in the structure.</param>
            <returns>The resulting status of the iteration.</returns>
        </member>
        <member name="M:Towel.DataStructures.IAvlTree`1.StepperReverse(Towel.StepRefBreak{`0})">
            <summary>Invokes a delegate for each entry in the data structure (right to left).</summary>
            <param name="step">The delegate to invoke on each item in the structure.</param>
            <returns>The resulting status of the iteration.</returns>
        </member>
        <member name="M:Towel.DataStructures.IAvlTree`1.Stepper(Towel.Step{`0},`0,`0)">
            <summary>Does an optimized step function (left to right) for sorted binary search trees.</summary>
            <param name="step">The step function.</param>
            <param name="minimum">The minimum step value.</param>
            <param name="maximum">The maximum step value.</param>
        </member>
        <member name="M:Towel.DataStructures.IAvlTree`1.Stepper(Towel.StepRef{`0},`0,`0)">
            <summary>Does an optimized step function (left to right) for sorted binary search trees.</summary>
            <param name="step">The step function.</param>
            <param name="minimum">The minimum step value.</param>
            <param name="maximum">The maximum step value.</param>
        </member>
        <member name="M:Towel.DataStructures.IAvlTree`1.Stepper(Towel.StepBreak{`0},`0,`0)">
            <summary>Does an optimized step function (left to right) for sorted binary search trees.</summary>
            <param name="step">The step function.</param>
            <param name="minimum">The minimum step value.</param>
            <param name="maximum">The maximum step value.</param>
            <returns>The result status of the stepper function.</returns>
        </member>
        <member name="M:Towel.DataStructures.IAvlTree`1.Stepper(Towel.StepRefBreak{`0},`0,`0)">
            <summary>Does an optimized step function (left to right) for sorted binary search trees.</summary>
            <param name="step">The step function.</param>
            <param name="minimum">The minimum step value.</param>
            <param name="maximum">The maximum step value.</param>
            <returns>The result status of the stepper function.</returns>
        </member>
        <member name="M:Towel.DataStructures.IAvlTree`1.StepperReverse(Towel.Step{`0},`0,`0)">
            <summary>Does an optimized step function (right to left) for sorted binary search trees.</summary>
            <param name="step">The step function.</param>
            <param name="minimum">The minimum step value.</param>
            <param name="maximum">The maximum step value.</param>
        </member>
        <member name="M:Towel.DataStructures.IAvlTree`1.StepperReverse(Towel.StepRef{`0},`0,`0)">
            <summary>Does an optimized step function (right to left) for sorted binary search trees.</summary>
            <param name="step">The step function.</param>
            <param name="minimum">The minimum step value.</param>
            <param name="maximum">The maximum step value.</param>
        </member>
        <member name="M:Towel.DataStructures.IAvlTree`1.StepperReverse(Towel.StepBreak{`0},`0,`0)">
            <summary>Does an optimized step function (right to left) for sorted binary search trees.</summary>
            <param name="step">The step function.</param>
            <param name="minimum">The minimum step value.</param>
            <param name="maximum">The maximum step value.</param>
            <returns>The result status of the stepper function.</returns>
        </member>
        <member name="M:Towel.DataStructures.IAvlTree`1.StepperReverse(Towel.StepRefBreak{`0},`0,`0)">
            <summary>Does an optimized step function (right to left) for sorted binary search trees.</summary>
            <param name="step">The step function.</param>
            <param name="minimum">The minimum step value.</param>
            <param name="maximum">The maximum step value.</param>
            <returns>The result status of the stepper function.</returns>
        </member>
        <member name="T:Towel.DataStructures.AvlTree">
            <summary>Contains extensions methods for the AvlTree interface.</summary>
        </member>
        <member name="M:Towel.DataStructures.AvlTree.TryGet``2(Towel.DataStructures.IAvlTree{``0},``1,Towel.Compare{``0,``1},``0@)">
            <summary>Wrapper for the get function to handle exceptions.</summary>
            <typeparam name="T">The generic type of this data structure.</typeparam>
            <typeparam name="Key">The type of the key.</typeparam>
            <param name="avlTree">This structure.</param>
            <param name="key">The key to get.</param>
            <param name="compare">The sorting technique (must synchronize with this structure's sorting).</param>
            <param name="item">The item if found.</param>
            <returns>True if successful, False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.AvlTree.TryRemove``2(Towel.DataStructures.IAvlTree{``0},``1,Towel.Compare{``0,``1})">
            <summary>Wrapper for the remove function to handle exceptions.</summary>
            <typeparam name="T">The generic type of this data structure.</typeparam>
            <typeparam name="Key">The type of the key.</typeparam>
            <param name="avlTree">This structure.</param>
            <param name="key">The key.</param>
            <param name="compare">The sorting technique (must synchronize with this structure's sorting).</param>
            <returns>True if successful, False if not.</returns>
        </member>
        <member name="T:Towel.DataStructures.AvlTreeLinked`1">
            <summary>A self-sorting binary tree based on the heights of each node.</summary>
            <citation>
            This AVL tree imlpementation was originally developed by 
            Rodney Howell of Kansas State University. However, it has 
            been modified since its addition into the Towel framework.
            </citation>
        </member>
        <member name="T:Towel.DataStructures.AvlTreeLinked`1.Node">
            <summary>This class just holds the data for each individual node of the tree.</summary>
        </member>
        <member name="M:Towel.DataStructures.AvlTreeLinked`1.#ctor(Towel.Compare{`0})">
            <summary>Constructs an AVL Tree.</summary>
            <param name="compare">The comparison function for sorting the items.</param>
            <runtime>θ(1)</runtime>
        </member>
        <member name="M:Towel.DataStructures.AvlTreeLinked`1.#ctor">
            <summary>Constructs an AVL Tree.</summary>
            <runtime>θ(1)</runtime>
        </member>
        <member name="P:Towel.DataStructures.AvlTreeLinked`1.CurrentLeast">
            <summary>Gets the current least item in the avl tree.</summary>
            <runtime>θ(ln(Count))</runtime>
        </member>
        <member name="P:Towel.DataStructures.AvlTreeLinked`1.CurrentGreatest">
            <summary>Gets the current greated item in the avl tree.</summary>
            <runtime>θ(ln(Count))</runtime>
        </member>
        <member name="P:Towel.DataStructures.AvlTreeLinked`1.Compare">
            <summary>The comparison function being utilized by this structure.</summary>
            <runtime>θ(1)</runtime>
        </member>
        <member name="P:Towel.DataStructures.AvlTreeLinked`1.Count">
            <summary>Gets the number of elements in the collection.</summary>
            <runtime>θ(1)</runtime>
        </member>
        <member name="M:Towel.DataStructures.AvlTreeLinked`1.Add(`0)">
            <summary>Adds an object to the AVL Tree.</summary>
            <param name="addition">The object to add.</param>
            <runtime>O(ln(n))</runtime>
        </member>
        <member name="M:Towel.DataStructures.AvlTreeLinked`1.Clear">
            <summary>Returns the tree to an iterative state.</summary>
            <runtime>θ(1)</runtime>
        </member>
        <member name="M:Towel.DataStructures.AvlTreeLinked`1.Clone">
            <summary>Clones the AVL tree.</summary>
            <returns>A clone of the AVL tree.</returns>
            <runtime>θ(n)</runtime>
        </member>
        <member name="M:Towel.DataStructures.AvlTreeLinked`1.Contains(`0)">
            <summary>Determines if the AVL tree contains a value.</summary>
            <param name="value">The value to look for.</param>
            <returns>Whether or not the AVL tree contains the value.</returns>
            <runtime>O(ln(Count)) Ω(1)</runtime>
        </member>
        <member name="M:Towel.DataStructures.AvlTreeLinked`1.Contains``1(``0,Towel.Compare{`0,``0})">
            <summary>Determines if this structure contains an item by a given key.</summary>
            <typeparam name="Key">The type of the key.</typeparam>
            <param name="key">The key.</param>
            <param name="comparison">The sorting technique (must synchronize with this structure's sorting).</param>
            <returns>True of contained, False if not.</returns>
            <runtime>O(ln(Count)) Ω(1)</runtime>
        </member>
        <member name="M:Towel.DataStructures.AvlTreeLinked`1.Get``1(``0,Towel.Compare{`0,``0})">
            <summary>Gets the item with the designated by the string.</summary>
            <param name="key">The string ID to look for.</param>
            <param name="compare">The sorting technique (must synchronize with this structure's sorting).</param>
            <returns>The object with the desired string ID if it exists.</returns>
            <runtime>O(ln(Count)) Ω(1)</runtime>
        </member>
        <member name="M:Towel.DataStructures.AvlTreeLinked`1.Remove(`0)">
            <summary>Removes an item from this structure.</summary>
            <param name="removal">The item to remove.</param>
            <runtime>O(ln(n))</runtime>
        </member>
        <member name="M:Towel.DataStructures.AvlTreeLinked`1.Remove``1(``0,Towel.Compare{`0,``0})">
            <summary>Removes an item from this structure by a given key.</summary>
            <typeparam name="Key">The type of the key.</typeparam>
            <param name="key">The key.</param>
            <param name="comparison">The sorting technique (must synchronize with the structure's sorting).</param>
            <runtime>O(ln(n))</runtime>
        </member>
        <member name="M:Towel.DataStructures.AvlTreeLinked`1.Stepper(Towel.Step{`0})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="step">The delegate to invoke on each item in the structure.</param>
            <remarks>Runtime: O(n * step).</remarks>
        </member>
        <member name="M:Towel.DataStructures.AvlTreeLinked`1.Stepper(Towel.StepRef{`0})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="step">The delegate to invoke on each item in the structure.</param>
            <remarks>Runtime: O(n * step).</remarks>
        </member>
        <member name="M:Towel.DataStructures.AvlTreeLinked`1.Stepper(Towel.StepBreak{`0})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="step">The delegate to invoke on each item in the structure.</param>
            <returns>The resulting status of the iteration.</returns>
            <remarks>Runtime: O(n * step).</remarks>
        </member>
        <member name="M:Towel.DataStructures.AvlTreeLinked`1.Stepper(Towel.StepRefBreak{`0})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="step">The delegate to invoke on each item in the structure.</param>
            <returns>The resulting status of the iteration.</returns>
            <remarks>Runtime: O(n * step).</remarks>
        </member>
        <member name="M:Towel.DataStructures.AvlTreeLinked`1.Stepper(Towel.Step{`0},`0,`0)">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="step">The delegate to invoke on each item in the structure.</param>
            <param name="minimum">The minimum value of the optimized stepper function.</param>
            <param name="maximum">The maximum value of the optimized stepper function.</param>
            <remarks>Runtime: O(n * step).</remarks>
        </member>
        <member name="M:Towel.DataStructures.AvlTreeLinked`1.Stepper(Towel.StepRef{`0},`0,`0)">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="step">The delegate to invoke on each item in the structure.</param>
            <param name="minimum">The minimum value of the optimized stepper function.</param>
            <param name="maximum">The maximum value of the optimized stepper function.</param>
            <remarks>Runtime: O(n * step).</remarks>
        </member>
        <member name="M:Towel.DataStructures.AvlTreeLinked`1.Stepper(Towel.StepBreak{`0},`0,`0)">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="step">The delegate to invoke on each item in the structure.</param>
            <param name="minimum">The minimum value of the optimized stepper function.</param>
            <param name="maximum">The maximum value of the optimized stepper function.</param>
            <remarks>Runtime: O(n * step).</remarks>
        </member>
        <member name="M:Towel.DataStructures.AvlTreeLinked`1.Stepper(Towel.StepRefBreak{`0},`0,`0)">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="step">The delegate to invoke on each item in the structure.</param>
            <param name="minimum">The minimum value of the optimized stepper function.</param>
            <param name="maximum">The maximum value of the optimized stepper function.</param>
            <remarks>Runtime: O(n * step).</remarks>
        </member>
        <member name="M:Towel.DataStructures.AvlTreeLinked`1.StepperReverse(Towel.Step{`0})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="step">The delegate to invoke on each item in the structure.</param>
            <remarks>Runtime: O(n * traversalFunction).</remarks>
        </member>
        <member name="M:Towel.DataStructures.AvlTreeLinked`1.StepperReverse(Towel.StepRef{`0})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="step">The delegate to invoke on each item in the structure.</param>
            <remarks>Runtime: O(n * traversalFunction).</remarks>
        </member>
        <member name="M:Towel.DataStructures.AvlTreeLinked`1.StepperReverse(Towel.StepBreak{`0})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="step">The delegate to invoke on each item in the structure.</param>
            <returns>The resulting status of the iteration.</returns>
            <remarks>Runtime: O(n * traversalFunction).</remarks>
        </member>
        <member name="M:Towel.DataStructures.AvlTreeLinked`1.StepperReverse(Towel.StepRefBreak{`0})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="step">The delegate to invoke on each item in the structure.</param>
            <returns>The resulting status of the iteration.</returns>
            <remarks>Runtime: O(n * traversalFunction).</remarks>
        </member>
        <member name="M:Towel.DataStructures.AvlTreeLinked`1.StepperReverse(Towel.Step{`0},`0,`0)">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="step">The delegate to invoke on each item in the structure.</param>
            <param name="minimum">The minimum value of the optimized stepper function.</param>
            <param name="maximum">The maximum value of the optimized stepper function.</param>
            <remarks>Runtime: O(n * traversalFunction).</remarks>
        </member>
        <member name="M:Towel.DataStructures.AvlTreeLinked`1.StepperReverse(Towel.StepRef{`0},`0,`0)">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="step">The delegate to invoke on each item in the structure.</param>
            <param name="minimum">The minimum value of the optimized stepper function.</param>
            <param name="maximum">The maximum value of the optimized stepper function.</param>
            <remarks>Runtime: O(n * traversalFunction).</remarks>
        </member>
        <member name="M:Towel.DataStructures.AvlTreeLinked`1.StepperReverse(Towel.StepBreak{`0},`0,`0)">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="step_function">The delegate to invoke on each item in the structure.</param>
            <param name="minimum">The minimum value of the optimized stepper function.</param>
            <param name="maximum">The maximum value of the optimized stepper function.</param>
            <remarks>Runtime: O(n * traversalFunction).</remarks>
        </member>
        <member name="M:Towel.DataStructures.AvlTreeLinked`1.StepperReverse(Towel.StepRefBreak{`0},`0,`0)">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="step">The delegate to invoke on each item in the structure.</param>
            <param name="minimum">The minimum value of the optimized stepper function.</param>
            <param name="maximum">The maximum value of the optimized stepper function.</param>
            <remarks>Runtime: O(n * step_function).</remarks>
        </member>
        <member name="M:Towel.DataStructures.AvlTreeLinked`1.Balance(Towel.DataStructures.AvlTreeLinked{`0}.Node)">
            <summary>Standard balancing algorithm for an AVL Tree.</summary>
            <param name="node">The tree to check the balancing of.</param>
            <returns>The result of the possible balancing.</returns>
            <runtime>θ(1)</runtime>
        </member>
        <member name="M:Towel.DataStructures.AvlTreeLinked`1.Height(Towel.DataStructures.AvlTreeLinked{`0}.Node)">
            <summary>This is just a protection against the null valued leaf nodes, which have a height of "-1".</summary>
            <param name="node">The node to find the hight of.</param>
            <returns>Returns "-1" if null (leaf) or the height property of the node.</returns>
            <runtime>θ(1)</runtime>
        </member>
        <member name="M:Towel.DataStructures.AvlTreeLinked`1.RemoveLeftMost(Towel.DataStructures.AvlTreeLinked{`0}.Node,Towel.DataStructures.AvlTreeLinked{`0}.Node@)">
            <summary>Removes the left-most child of an AVL Tree node and returns it 
            through the out parameter.</summary>
            <param name="node">The tree to remove the left-most child from.</param>
            <param name="leftMost">The left-most child of this AVL tree.</param>
            <returns>The updated tree with the removal.</returns>
        </member>
        <member name="M:Towel.DataStructures.AvlTreeLinked`1.RemoveRightMost(Towel.DataStructures.AvlTreeLinked{`0}.Node,Towel.DataStructures.AvlTreeLinked{`0}.Node@)">
            <summary>Removes the right-most child of an AVL Tree node and returns it 
            through the out parameter.</summary>
            <param name="node">The tree to remove the right-most child from.</param>
            <param name="leftMost">The right-most child of this AVL tree.</param>
            <returns>The updated tree with the removal.</returns>
        </member>
        <member name="M:Towel.DataStructures.AvlTreeLinked`1.SetHeight(Towel.DataStructures.AvlTreeLinked{`0}.Node)">
            <summary>Sets the height of a tree based on its children's heights.</summary>
            <param name="node">The tree to have its height adjusted.</param>
            <remarks>Runtime: O(1).</remarks>
        </member>
        <member name="T:Towel.DataStructures.IBTree`1">
            <summary>A self-sorting binary tree based on grouping nodes together at the same height.</summary>
            <typeparam name="T">The generic type of this data structure.</typeparam>
        </member>
        <member name="M:Towel.DataStructures.IBTree`1.Contains``1(``0,Towel.Compare{`0,``0})">
            <summary>Determines if the structure contains an item based on a given key.</summary>
            <typeparam name="Key">The type of the key.</typeparam>
            <param name="key">The key.</param>
            <param name="comparison">The comparison technique (must synchronize with the sorting of this data structure).</param>
            <returns>True if contained, False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.IBTree`1.Get``1(``0,Towel.Compare{`0,``0})">
            <summary>Gets an item based on a given key.</summary>
            <typeparam name="Key">The type of the key.</typeparam>
            <param name="get">The key.</param>
            <param name="compare">The comparison technique (must synchronize with the sorting of this data structure).</param>
            <returns>The found item.</returns>
        </member>
        <member name="M:Towel.DataStructures.IBTree`1.Remove``1(``0,Towel.Compare{`0,``0})">
            <summary>Removes an item based on a given key.</summary>
            <typeparam name="Key">The type of the key.</typeparam>
            <param name="removal">The key.</param>
            <param name="compare">The comparison technique (must synchronize with the sorting of this data structure).</param>
        </member>
        <member name="M:Towel.DataStructures.IBTree`1.StepperReverse(Towel.Step{`0})">
            <summary>Invokes a delegate for each entry in the data structure (right to left).</summary>
            <param name="step_delegate">The delegate to invoke on each item in the structure.</param>
        </member>
        <member name="M:Towel.DataStructures.IBTree`1.StepperReverse(Towel.StepBreak{`0})">
            <summary>Invokes a delegate for each entry in the data structure (right to left).</summary>
            <param name="step_delegate">The delegate to invoke on each item in the structure.</param>
            <returns>The resulting status of the iteration.</returns>
        </member>
        <member name="M:Towel.DataStructures.IBTree`1.Stepper(Towel.Step{`0},`0,`0)">
            <summary>Does an optimized step function (left to right) for sorted binary search trees.</summary>
            <param name="step_function">The step function.</param>
            <param name="minimum">The minimum step value.</param>
            <param name="maximum">The maximum step value.</param>
        </member>
        <member name="M:Towel.DataStructures.IBTree`1.Stepper(Towel.StepBreak{`0},`0,`0)">
            <summary>Does an optimized step function (left to right) for sorted binary search trees.</summary>
            <param name="step_function">The step function.</param>
            <param name="minimum">The minimum step value.</param>
            <param name="maximum">The maximum step value.</param>
            <returns>The result status of the stepper function.</returns>
        </member>
        <member name="M:Towel.DataStructures.IBTree`1.StepperReverse(Towel.Step{`0},`0,`0)">
            <summary>Does an optimized step function (right to left) for sorted binary search trees.</summary>
            <param name="step_function">The step function.</param>
            <param name="minimum">The minimum step value.</param>
            <param name="maximum">The maximum step value.</param>
        </member>
        <member name="M:Towel.DataStructures.IBTree`1.StepperReverse(Towel.StepBreak{`0},`0,`0)">
            <summary>Does an optimized step function (right to left) for sorted binary search trees.</summary>
            <param name="step_function">The step function.</param>
            <param name="minimum">The minimum step value.</param>
            <param name="maximum">The maximum step value.</param>
            <returns>The result status of the stepper function.</returns>
        </member>
        <member name="T:Towel.DataStructures.BTree">
            <summary>Contains extensions methods for the BTree interface.</summary>
        </member>
        <member name="M:Towel.DataStructures.BTree.TryGet``2(Towel.DataStructures.IBTree{``0},``1,Towel.Compare{``0,``1},``0@)">
            <summary>Wrapper for the get function to handle exceptions.</summary>
            <typeparam name="T">The generic type of this data structure.</typeparam>
            <typeparam name="Key">The type of the key.</typeparam>
            <param name="structure">This structure.</param>
            <param name="get">The key to get.</param>
            <param name="comparison">The sorting technique (must synchronize with this structure's sorting).</param>
            <param name="item">The item if found.</param>
            <returns>True if successful, False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.BTree.TryRemove``2(Towel.DataStructures.IBTree{``0},``1,Towel.Compare{``0,``1})">
            <summary>Wrapper for the remove function to handle exceptions.</summary>
            <typeparam name="T">The generic type of this data structure.</typeparam>
            <typeparam name="Key">The type of the key.</typeparam>
            <param name="structure">This structure.</param>
            <param name="removal">The key.</param>
            <param name="comparison">The sorting technique (must synchronize with this structure's sorting).</param>
            <returns>True if successful, False if not.</returns>
        </member>
        <member name="T:Towel.DataStructures.BTreeLinkedArray`1">
            <summary>A self-sorting binary tree based on grouping nodes together at the same height.</summary>
            <typeparam name="T">The generic type of this data structure.</typeparam>
        </member>
        <member name="T:Towel.DataStructures.BTreeLinkedArray`1.Node">
            <summary>A BTree node can contain multiple items and children.</summary>
        </member>
        <member name="P:Towel.DataStructures.BTreeLinkedArray`1.Count">
            <summary>The number of items in this structure.</summary>
        </member>
        <member name="M:Towel.DataStructures.BTreeLinkedArray`1.Contains(`0)">
            <summary>Determines if this structure contains a given item.</summary>
            <param name="item">The item to be removed.</param>
            <returns>True if found, False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.BTreeLinkedArray`1.Contains``1(``0,Towel.Compare{`0,``0})">
            <summary>Determines if this structure contains a given item based on a given key.</summary>
            <typeparam name="K">The type of the key.</typeparam>
            <param name="key">The key.</param>
            <param name="compare">The sorting technique (must synchronize with the sorting of this structure).</param>
            <returns>True if found, False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.BTreeLinkedArray`1.Get``1(``0,Towel.Compare{`0,``0})">
            <summary>Gets an item from this structure based on a given key.</summary>
            <typeparam name="K">The type of the key.</typeparam>
            <param name="key">The key.</param>
            <param name="compare">The comparison techmique (must synchronize with this structure's sorting).</param>
            <returns>Item is found.</returns>
        </member>
        <member name="M:Towel.DataStructures.BTreeLinkedArray`1.Add(`0)">
            <summary>Adds an item to the this structure.</summary>
            <param name="addition">The item to be added.</param>
        </member>
        <member name="M:Towel.DataStructures.BTreeLinkedArray`1.Remove(`0)">
            <summary>Removes an item from this structure.</summary>
            <param name="removal">The item to be removed.</param>
        </member>
        <member name="M:Towel.DataStructures.BTreeLinkedArray`1.Remove``1(``0,Towel.Compare{`0,``0})">
            <summary>Removes an item from the structure based on a key.</summary>
            <typeparam name="K">The type of the key.</typeparam>
            <param name="key">The key.</param>
            <param name="compare">The compareison technique (must synchronize with this structure's sorting).</param>
        </member>
        <member name="M:Towel.DataStructures.BTreeLinkedArray`1.StepperReverse(Towel.Step{`0})">
            <summary>Invokes a delegate for each entry in the data structure (right to left).</summary>
            <param name="step_delegate">The delegate to invoke on each item in the structure.</param>
        </member>
        <member name="M:Towel.DataStructures.BTreeLinkedArray`1.StepperReverse(Towel.StepRef{`0})">
            <summary>Invokes a delegate for each entry in the data structure (right to left).</summary>
            <param name="step_delegate">The delegate to invoke on each item in the structure.</param>
        </member>
        <member name="M:Towel.DataStructures.BTreeLinkedArray`1.StepperReverse(Towel.StepBreak{`0})">
            <summary>Invokes a delegate for each entry in the data structure (right to left).</summary>
            <param name="step_delegate">The delegate to invoke on each item in the structure.</param>
            <returns>The resulting status of the iteration.</returns>
        </member>
        <member name="M:Towel.DataStructures.BTreeLinkedArray`1.StepperReverse(Towel.StepRefBreak{`0})">
            <summary>Invokes a delegate for each entry in the data structure (right to left).</summary>
            <param name="step_delegate">The delegate to invoke on each item in the structure.</param>
            <returns>The resulting status of the iteration.</returns>
        </member>
        <member name="M:Towel.DataStructures.BTreeLinkedArray`1.Stepper(Towel.Step{`0},`0,`0)">
            <summary>Does an optimized step function (left to right) for sorted binary search trees.</summary>
            <param name="step_function">The step function.</param>
            <param name="minimum">The minimum step value.</param>
            <param name="maximum">The maximum step value.</param>
        </member>
        <member name="M:Towel.DataStructures.BTreeLinkedArray`1.Stepper(Towel.StepRef{`0},`0,`0)">
            <summary>Does an optimized step function (left to right) for sorted binary search trees.</summary>
            <param name="step_function">The step function.</param>
            <param name="minimum">The minimum step value.</param>
            <param name="maximum">The maximum step value.</param>
        </member>
        <member name="M:Towel.DataStructures.BTreeLinkedArray`1.Stepper(Towel.StepBreak{`0},`0,`0)">
            <summary>Does an optimized step function (left to right) for sorted binary search trees.</summary>
            <param name="step_function">The step function.</param>
            <param name="minimum">The minimum step value.</param>
            <param name="maximum">The maximum step value.</param>
            <returns>The result status of the stepper function.</returns>
        </member>
        <member name="M:Towel.DataStructures.BTreeLinkedArray`1.Stepper(Towel.StepRefBreak{`0},`0,`0)">
            <summary>Does an optimized step function (left to right) for sorted binary search trees.</summary>
            <param name="step_function">The step function.</param>
            <param name="minimum">The minimum step value.</param>
            <param name="maximum">The maximum step value.</param>
            <returns>The result status of the stepper function.</returns>
        </member>
        <member name="M:Towel.DataStructures.BTreeLinkedArray`1.StepperReverse(Towel.Step{`0},`0,`0)">
            <summary>Does an optimized step function (right to left) for sorted binary search trees.</summary>
            <param name="step_function">The step function.</param>
            <param name="minimum">The minimum step value.</param>
            <param name="maximum">The maximum step value.</param>
        </member>
        <member name="M:Towel.DataStructures.BTreeLinkedArray`1.StepperReverse(Towel.StepRef{`0},`0,`0)">
            <summary>Does an optimized step function (right to left) for sorted binary search trees.</summary>
            <param name="step_function">The step function.</param>
            <param name="minimum">The minimum step value.</param>
            <param name="maximum">The maximum step value.</param>
        </member>
        <member name="M:Towel.DataStructures.BTreeLinkedArray`1.StepperReverse(Towel.StepBreak{`0},`0,`0)">
            <summary>Does an optimized step function (right to left) for sorted binary search trees.</summary>
            <param name="step_function">The step function.</param>
            <param name="minimum">The minimum step value.</param>
            <param name="maximum">The maximum step value.</param>
            <returns>The result status of the stepper function.</returns>
        </member>
        <member name="M:Towel.DataStructures.BTreeLinkedArray`1.StepperReverse(Towel.StepRefBreak{`0},`0,`0)">
            <summary>Does an optimized step function (right to left) for sorted binary search trees.</summary>
            <param name="step_function">The step function.</param>
            <param name="minimum">The minimum step value.</param>
            <param name="maximum">The maximum step value.</param>
            <returns>The result status of the stepper function.</returns>
        </member>
        <member name="M:Towel.DataStructures.BTreeLinkedArray`1.Clear">
            <summary>Returns the structure to an empty state.</summary>
        </member>
        <member name="M:Towel.DataStructures.BTreeLinkedArray`1.Stepper(Towel.Step{`0})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="step_delegate">The delegate to invoke on each item in the structure.</param>
        </member>
        <member name="M:Towel.DataStructures.BTreeLinkedArray`1.Stepper(Towel.StepRef{`0})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="step_delegate">The delegate to invoke on each item in the structure.</param>
        </member>
        <member name="M:Towel.DataStructures.BTreeLinkedArray`1.Stepper(Towel.StepBreak{`0})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="step_delegate">The delegate to invoke on each item in the structure.</param>
            <returns>The resulting status of the iteration.</returns>
        </member>
        <member name="M:Towel.DataStructures.BTreeLinkedArray`1.Stepper(Towel.StepRefBreak{`0})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="step_delegate">The delegate to invoke on each item in the structure.</param>
            <returns>The resulting status of the iteration.</returns>
        </member>
        <member name="M:Towel.DataStructures.BTreeLinkedArray`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>FOR COMPATIBILITY ONLY. AVOID IF POSSIBLE.</summary>
        </member>
        <member name="M:Towel.DataStructures.BTreeLinkedArray`1.GetEnumerator">
            <summary>FOR COMPATIBILITY ONLY. AVOID IF POSSIBLE.</summary>
        </member>
        <member name="T:Towel.DataStructures.IDataStructure`1">
            <summary>Polymorphism base for all data structures in the Towel framework.</summary>
            <typeparam name="T">The type of the instances to store in this data structure.</typeparam>
        </member>
        <member name="M:Towel.DataStructures.IDataStructure`1.Stepper(Towel.Step{`0})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="step">The delegate to invoke on each item in the structure.</param>
        </member>
        <member name="M:Towel.DataStructures.IDataStructure`1.Stepper(Towel.StepBreak{`0})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="step">The delegate to invoke on each item in the structure.</param>
            <returns>The resulting status of the iteration.</returns>
        </member>
        <member name="T:Towel.DataStructures.DataStructure">
            <summary>Contains extension methods for the Structure interface.</summary>
        </member>
        <member name="T:Towel.DataStructures.DataStructure.IAuditable`1">
            <summary>Property of a data structure (does it have a contains method).</summary>
        </member>
        <member name="M:Towel.DataStructures.DataStructure.IAuditable`1.Contains(`0)">
            <summary>Checks if the data structure contains a value.</summary>
            <param name="value">The value to look for in the data structure.</param>
            <returns>True if the value exists in the data structure. False if not.</returns>
        </member>
        <member name="T:Towel.DataStructures.DataStructure.IHashing`1">
            <summary>Property of a data structure (does it have a Hash property).</summary>
        </member>
        <member name="P:Towel.DataStructures.DataStructure.IHashing`1.Hash">
            <summary>Gets the hashing function being used by the data structure.</summary>
        </member>
        <member name="T:Towel.DataStructures.DataStructure.IComparing`1">
            <summary>Property of a data structure (does it have a Compare property).</summary>
        </member>
        <member name="P:Towel.DataStructures.DataStructure.IComparing`1.Compare">
            <summary>Gets the comparing function of the data structure.</summary>
        </member>
        <member name="T:Towel.DataStructures.DataStructure.IAddable`1">
            <summary>Property of a data structure (does it have a Add method).</summary>
        </member>
        <member name="M:Towel.DataStructures.DataStructure.IAddable`1.Add(`0)">
            <summary>Adds a value to the data structure.</summary>
            <param name="value">The value to be added.</param>
        </member>
        <member name="T:Towel.DataStructures.DataStructure.IRemovable`1">
            <summary>Property of a data structure (does it have a Romove method).</summary>
        </member>
        <member name="M:Towel.DataStructures.DataStructure.IRemovable`1.Remove(`0)">
            <summary>Removes the first instance found in the data structure.</summary>
            <param name="removal">The value to be removed.</param>
        </member>
        <member name="T:Towel.DataStructures.DataStructure.ICountable">
            <summary>Property of a data structure (does it have a Count method).</summary>
        </member>
        <member name="P:Towel.DataStructures.DataStructure.ICountable.Count">
            <summary>Gets the current count of the data structure.</summary>
        </member>
        <member name="T:Towel.DataStructures.DataStructure.IClearable">
            <summary>Property of a data structure (does it have a Clear method).</summary>
        </member>
        <member name="M:Towel.DataStructures.DataStructure.IClearable.Clear">
            <summary>Returns the data structure to an empty state.</summary>
        </member>
        <member name="T:Towel.DataStructures.DataStructure.IEquating`1">
            <summary>Property of a data structure (does it have a Equate property).</summary>
        </member>
        <member name="P:Towel.DataStructures.DataStructure.IEquating`1.Equate">
            <summary>Gets the equating function of the data structure.</summary>
        </member>
        <member name="M:Towel.DataStructures.DataStructure.TryAdd``1(Towel.DataStructures.DataStructure.IAddable{``0},``0)">
            <summary>Wrapper for the "Add" method to help with exceptions.</summary>
            <typeparam name="T">The generic type of the structure.</typeparam>
            <param name="structure">The data structure.</param>
            <param name="addition">The item to be added.</param>
            <returns>True if successful, False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.DataStructure.TryRemove``1(Towel.DataStructures.DataStructure.IRemovable{``0},``0)">
            <summary>Wrapper for the "Remove" method to help with exceptions.</summary>
            <typeparam name="T">The generic type of the structure.</typeparam>
            <param name="structure">The data structure.</param>
            <param name="removal">The item to be removed.</param>
            <returns>True if successful, False if not.</returns>
        </member>
        <member name="T:Towel.DataStructures.DequeLinked`1">
            <summary>Implements First-In-First-Out queue data structure.</summary>
            <remarks>The runtimes of each public member are included in the "remarks" xml tags.</remarks>
        </member>
        <member name="T:Towel.DataStructures.DequeLinked`1.Node">
            <summary>This class just holds the data for each individual node of the list.</summary>
        </member>
        <member name="M:Towel.DataStructures.DequeLinked`1.#ctor">
            <summary>Creates an instance of a queue.</summary>
            <remarks>Runtime: O(1).</remarks>
        </member>
        <member name="P:Towel.DataStructures.DequeLinked`1.Count">
            <summary>Returns the number of items in the queue.</summary>
            <remarks>Runtime: O(1).</remarks>
        </member>
        <member name="M:Towel.DataStructures.DequeLinked`1.EnqueueBack(`0)">
            <summary>Adds an item to the back of the queue.</summary>
            <param name="enqueue">The item to add to the queue.</param>
            <runtime>O(1)</runtime>
        </member>
        <member name="M:Towel.DataStructures.DequeLinked`1.DequeueFront">
            <summary>Removes the oldest item in the queue.</summary>
            <runtime>O(1)</runtime>
        </member>
        <member name="M:Towel.DataStructures.DequeLinked`1.PeekFront">
            <summary>Looks at the front-most value.</summary>
            <returns>The front-most value.</returns>
        </member>
        <member name="M:Towel.DataStructures.DequeLinked`1.Clear">
            <summary>Resets the queue to an empty state.</summary>
            <runtime>O(1)</runtime>
        </member>
        <member name="M:Towel.DataStructures.DequeLinked`1.ToArray">
            <summary>Converts the list into a standard array.</summary>
            <returns>A standard array of all the items.</returns>
            <runtime>O(n)</runtime>
        </member>
        <member name="M:Towel.DataStructures.DequeLinked`1.Contains(`0,Towel.Compare{`0})">
            <summary>Checks to see if a given object is in this data structure.</summary>
            <param name="item">The item to check for.</param>
            <param name="compare">Delegate representing comparison technique.</param>
            <returns>true if the item is in this structure; false if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.DequeLinked`1.Contains``1(``0,Towel.Compare{`0,``0})">
            <summary>Checks to see if a given object is in this data structure.</summary>
            <typeparam name="Key">The type of the key to check for.</typeparam>
            <param name="key">The key to check for.</param>
            <param name="compare">Delegate representing comparison technique.</param>
            <returns>true if the item is in this structure; false if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.DequeLinked`1.Stepper(Towel.Step{`0})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="step">The delegate to invoke on each item in the structure.</param>
        </member>
        <member name="M:Towel.DataStructures.DequeLinked`1.Stepper(Towel.StepRef{`0})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="step">The delegate to invoke on each item in the structure.</param>
        </member>
        <member name="M:Towel.DataStructures.DequeLinked`1.Stepper(Towel.StepBreak{`0})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="step">The delegate to invoke on each item in the structure.</param>
            <returns>The resulting status of the iteration.</returns>
        </member>
        <member name="M:Towel.DataStructures.DequeLinked`1.Stepper(Towel.StepRefBreak{`0})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="step">The delegate to invoke on each item in the structure.</param>
            <returns>The resulting status of the iteration.</returns>
        </member>
        <member name="M:Towel.DataStructures.DequeLinked`1.Clone">
            <summary>Creates a shallow clone of this data structure.</summary>
            <returns>A shallow clone of this data structure.</returns>
        </member>
        <member name="T:Towel.DataStructures.IGraph`1">
            <summary>A graph data structure that stores nodes and edges.</summary>
            <typeparam name="T">The generic node type to store in the graph.</typeparam>
        </member>
        <member name="P:Towel.DataStructures.IGraph`1.EdgeCount">
            <summary>The number of edges in the graph.</summary>
        </member>
        <member name="P:Towel.DataStructures.IGraph`1.NodeCount">
            <summary>The number of nodes in the graph.</summary>
        </member>
        <member name="M:Towel.DataStructures.IGraph`1.Adjacent(`0,`0)">
            <summary>Checks if b is adjacent to a.</summary>
            <param name="a">The starting point of the edge to check.</param>
            <param name="b">The ending point of the edge to check.</param>
            <returns>True if b is adjacent to a; False if not</returns>
        </member>
        <member name="M:Towel.DataStructures.IGraph`1.Neighbors(`0,Towel.Step{`0})">
            <summary>Gets all the nodes adjacent to a and performs the provided delegate on each.</summary>
            <param name="a">The node to find all the adjacent node to.</param>
            <param name="function">The delegate to perform on each adjacent node to a.</param>
        </member>
        <member name="M:Towel.DataStructures.IGraph`1.Add(`0,`0)">
            <summary>Adds an edge to the graph starting at a and ending at b.</summary>
            <param name="start">The stating point of the edge to add.</param>
            <param name="end">The ending point of the edge to add.</param>
        </member>
        <member name="M:Towel.DataStructures.IGraph`1.Remove(`0,`0)">
            <summary>Removes an edge from the graph.</summary>
            <param name="start">The starting point of the edge to remove.</param>
            <param name="end">The ending point of the edge to remove.</param>
        </member>
        <member name="M:Towel.DataStructures.IGraph`1.Stepper(Towel.Step{`0,`0})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="step">The delegate to invoke on each item in the structure.</param>
        </member>
        <member name="M:Towel.DataStructures.IGraph`1.Stepper(Towel.StepBreak{`0,`0})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="step">The delegate to invoke on each item in the structure.</param>
            <returns>The resulting status of the iteration.</returns>
        </member>
        <member name="T:Towel.DataStructures.GraphSetOmnitree`1">
            <summary>Stores the graph as a set-hash of nodes and quadtree of edges.</summary>
            <typeparam name="T">The generic type of this data structure.</typeparam>
        </member>
        <member name="T:Towel.DataStructures.GraphSetOmnitree`1.Edge">
            <summary>Represents an edge in a graph.</summary>
        </member>
        <member name="F:Towel.DataStructures.GraphSetOmnitree`1.Edge.Start">
            <summary>The starting node of the edge.</summary>
        </member>
        <member name="F:Towel.DataStructures.GraphSetOmnitree`1.Edge.End">
            <summary>The ending node of hte edge.</summary>
        </member>
        <member name="M:Towel.DataStructures.GraphSetOmnitree`1.Edge.#ctor(`0,`0)">
            <summary>Constructs a new Edge.</summary>
            <param name="start">The starting point of the Edge.</param>
            <param name="end">The ending point of the Edge.</param>
        </member>
        <member name="M:Towel.DataStructures.GraphSetOmnitree`1.#ctor(Towel.DataStructures.GraphSetOmnitree{`0})">
            <summary>Constructs a new GraphSetOmnitree by cloning an existing instance.</summary>
            <param name="graph">The graph to construct a clone of.</param>
        </member>
        <member name="M:Towel.DataStructures.GraphSetOmnitree`1.#ctor(Towel.Equate{`0},Towel.Compare{`0},Towel.Hash{`0})">
            <summary>Constructs a new GraphSetOmnitree.</summary>
            <param name="equate">The equate delegate for the data structure to use.</param>
            <param name="compare">The compare delegate for the data structure to use.</param>
            <param name="hash">The hash delegate for the datastructure to use.</param>
        </member>
        <member name="M:Towel.DataStructures.GraphSetOmnitree`1.#ctor">
            <summary>Constructs a new GraphSetOmnitree.</summary>
        </member>
        <member name="P:Towel.DataStructures.GraphSetOmnitree`1.EdgeCount">
            <summary>Gets the number of edges in the graph.</summary>
        </member>
        <member name="P:Towel.DataStructures.GraphSetOmnitree`1.NodeCount">
            <summary>Gets the number of nodes in the graph.</summary>
        </member>
        <member name="M:Towel.DataStructures.GraphSetOmnitree`1.Add(`0)">
            <summary>Adds a node to the graph.</summary>
            <param name="node">The node to add to the graph.</param>
        </member>
        <member name="M:Towel.DataStructures.GraphSetOmnitree`1.Add(`0,`0)">
            <summary>Adds an edge to the graph.</summary>
            <param name="start">The starting point of the edge.</param>
            <param name="end">The ending point of the edge.</param>
        </member>
        <member name="M:Towel.DataStructures.GraphSetOmnitree`1.Remove(`0)">
            <summary>Removes a node from the graph and all attached edges.</summary>
            <param name="node">The edge to remove from the graph.</param>
        </member>
        <member name="M:Towel.DataStructures.GraphSetOmnitree`1.Remove(`0,`0)">
            <summary>Removes an edge from the graph.</summary>
            <param name="start">The starting point of the edge.</param>
            <param name="end">The ending point of the edge.</param>
        </member>
        <member name="M:Towel.DataStructures.GraphSetOmnitree`1.Adjacent(`0,`0)">
            <summary>Checks two nodes for adjacency (connected by an edge).</summary>
            <param name="a">The first node of the adjacency check.</param>
            <param name="b">The second node of the adjacency check.</param>
            <returns>True if adjacent. False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.GraphSetOmnitree`1.Neighbors(`0,Towel.Step{`0})">
            <summary>Gets the neighbors of a node.</summary>
            <param name="node">The node to get the neighbors of.</param>
            <param name="step">The step to perform on all the neighbors.</param>
        </member>
        <member name="M:Towel.DataStructures.GraphSetOmnitree`1.Clone">
            <summary>Clones this data structure.</summary>
            <returns>A clone of this data structure.</returns>
        </member>
        <member name="M:Towel.DataStructures.GraphSetOmnitree`1.Clear">
            <summary>Returns this data structure to an empty state.</summary>
        </member>
        <member name="M:Towel.DataStructures.GraphSetOmnitree`1.Stepper(Towel.Step{`0})">
            <summary>Steps through all the nodes in the graph.</summary>
            <param name="step">The action to perform on all the nodes in the graph.</param>
        </member>
        <member name="M:Towel.DataStructures.GraphSetOmnitree`1.Stepper(Towel.StepBreak{`0})">
            <summary>Steps through all the nodes in the graph.</summary>
            <param name="step">The action to perform on all the nodes in the graph.</param>
            <returns>The status of the stepper operation.</returns>
        </member>
        <member name="M:Towel.DataStructures.GraphSetOmnitree`1.Stepper(Towel.Step{`0,`0})">
            <summary>Steps through all the edges in the graph.</summary>
            <param name="step">The action to perform on all the edges in the graph.</param>
        </member>
        <member name="M:Towel.DataStructures.GraphSetOmnitree`1.Stepper(Towel.StepBreak{`0,`0})">
            <summary>Steps through all the edges in the graph.</summary>
            <param name="step">The action to perform on all the edges in the graph.</param>
            <returns>The status of the stepper operation.</returns>
        </member>
        <member name="T:Towel.DataStructures.GraphMap`1">
            <summary>Stores a graph as a map and nested map (adjacency matrix).</summary>
            <typeparam name="T">The generic node type of this graph.</typeparam>
        </member>
        <member name="T:Towel.DataStructures.GraphMap`1.Edge">
            <summary>Represents an edge in a graph.</summary>
        </member>
        <member name="F:Towel.DataStructures.GraphMap`1.Edge.Start">
            <summary>The starting point of the edge.</summary>
        </member>
        <member name="F:Towel.DataStructures.GraphMap`1.Edge.End">
            <summary>The ending point of the edge.</summary>
        </member>
        <member name="M:Towel.DataStructures.GraphMap`1.Edge.#ctor(`0,`0)">
            <summary>Constructs a new Edge.</summary>
            <param name="start">The starting point of the edge.</param>
            <param name="end">The ending point of the edge.</param>
        </member>
        <member name="M:Towel.DataStructures.GraphMap`1.#ctor">
            <summary>Constructs a new GraphMap.</summary>
        </member>
        <member name="M:Towel.DataStructures.GraphMap`1.#ctor(Towel.Equate{`0},Towel.Hash{`0})">
            <summary>Constructs a new GraphMap.</summary>
            <param name="equate">The equate delegate for the data structure to use.</param>
            <param name="hash">The hash function for the data structure to use.</param>
        </member>
        <member name="P:Towel.DataStructures.GraphMap`1.EdgeCount">
            <summary>Gets the number of edges in the graph.</summary>
        </member>
        <member name="P:Towel.DataStructures.GraphMap`1.NodeCount">
            <summary>Gets the number of nodes in the graph.</summary>
        </member>
        <member name="M:Towel.DataStructures.GraphMap`1.Add(`0)">
            <summary>Adds a node to the graph.</summary>
            <param name="node">The node to add to the graph.</param>
        </member>
        <member name="M:Towel.DataStructures.GraphMap`1.Add(`0,`0)">
            <summary>Adds an edge to the graph.</summary>
            <param name="start">The starting point of the edge.</param>
            <param name="end">The ending point of the edge.</param>
        </member>
        <member name="M:Towel.DataStructures.GraphMap`1.Remove(`0)">
            <summary>Removes a node from the graph.</summary>
            <param name="node">The node to remove from the graph.</param>
        </member>
        <member name="M:Towel.DataStructures.GraphMap`1.Remove(`0,`0)">
            <summary>Removes an edge from the graph.</summary>
            <param name="start">The starting point of the edge to remove.</param>
            <param name="end">The ending point of the edge to remove.</param>
        </member>
        <member name="M:Towel.DataStructures.GraphMap`1.Adjacent(`0,`0)">
            <summary>Checks for adjacency between two nodes.</summary>
            <param name="a">The first node of the adjacency check.</param>
            <param name="b">The second node fo the adjacency check.</param>
            <returns>True if ajacent. False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.GraphMap`1.Neighbors(`0,Towel.Step{`0})">
            <summary>Steps through all the neighbors of a node.</summary>
            <param name="a">The node to step through the children of.</param>
            <param name="step">The action to perform on all the neighbors of the provided node.</param>
        </member>
        <member name="T:Towel.DataStructures.IHeap`1">
            <summary>Stores items based on priorities and allows access to the highest priority item.</summary>
            <typeparam name="T">The generic type to be stored within the heap.</typeparam>
        </member>
        <member name="M:Towel.DataStructures.IHeap`1.Enqueue(`0)">
            <summary>Enqueues an item into the heap.</summary>
            <param name="addition"></param>
        </member>
        <member name="M:Towel.DataStructures.IHeap`1.Dequeue">
            <summary>Removes and returns the highest priority item.</summary>
            <returns>The highest priority item from the queue.</returns>
        </member>
        <member name="M:Towel.DataStructures.IHeap`1.Peek">
            <summary>Returns the highest priority item.</summary>
            <returns>The highest priority item in the queue.</returns>
        </member>
        <member name="T:Towel.DataStructures.HeapArray`1">
            <summary>Implements a priority heap with static priorities using an array.</summary>
            <typeparam name="T">The type of item to be stored in this priority heap.</typeparam>
            <citation>
            This heap imlpementation was originally developed by 
            Rodney Howell of Kansas State University. However, it has 
            been modified since its addition into the Towel framework.
            </citation>
        </member>
        <member name="M:Towel.DataStructures.HeapArray`1.#ctor(Towel.Compare{`0})">
            <summary>Generates a priority queue with a capacity of the parameter. Runtime O(1).</summary>
            <param name="compare">Delegate determining the comparison technique used for sorting.</param>
            <runtime>θ(1)</runtime>
        </member>
        <member name="M:Towel.DataStructures.HeapArray`1.#ctor(Towel.Compare{`0},System.Int32)">
            <summary>Generates a priority queue with a capacity of the parameter. Runtime O(1).</summary>
            <param name="compare">Delegate determining the comparison technique used for sorting.</param>
            <param name="minimumCapacity">The capacity you want this priority queue to have.</param>
            <runtime>θ(1)</runtime>
        </member>
        <member name="M:Towel.DataStructures.HeapArray`1.#ctor">
            <summary>Generates a priority queue with a capacity of the parameter. Runtime O(1).</summary>
            <runtime>θ(1)</runtime>
        </member>
        <member name="P:Towel.DataStructures.HeapArray`1.Compare">
            <summary>Delegate determining the comparison technique used for sorting.</summary>
        </member>
        <member name="P:Towel.DataStructures.HeapArray`1.CurrentCapacity">
            <summary>The maximum items the queue can hold.</summary>
            <runtime>θ(1)</runtime>
        </member>
        <member name="P:Towel.DataStructures.HeapArray`1.MinimumCapacity">
            <summary>The minumum capacity of this queue to limit low-level resizing.</summary>
            <runtime>θ(1)</runtime>
        </member>
        <member name="P:Towel.DataStructures.HeapArray`1.Count">
            <summary>The number of items in the queue.</summary>
            <remarks>Runtime: O(1).</remarks>
        </member>
        <member name="M:Towel.DataStructures.HeapArray`1.LeftChild(System.Int32)">
            <summary>Gets the index of the left child of the provided item.</summary>
            <param name="parent">The item to find the left child of.</param>
            <returns>The index of the left child of the provided item.</returns>
        </member>
        <member name="M:Towel.DataStructures.HeapArray`1.RightChild(System.Int32)">
            <summary>Gets the index of the right child of the provided item.</summary>
            <param name="parent">The item to find the right child of.</param>
            <returns>The index of the right child of the provided item.</returns>
        </member>
        <member name="M:Towel.DataStructures.HeapArray`1.Parent(System.Int32)">
            <summary>Gets the index of the parent of the provided item.</summary>
            <param name="child">The item to find the parent of.</param>
            <returns>The index of the parent of the provided item.</returns>
        </member>
        <member name="M:Towel.DataStructures.HeapArray`1.Enqueue(`0)">
            <summary>Enqueue an item into the priority queue and let it works its magic.</summary>
            <param name="addition">The item to be added.</param>
            <runtime>Runtime: O(ln(n)), θ(1), EstAvg(ln(n)).</runtime>
        </member>
        <member name="M:Towel.DataStructures.HeapArray`1.Dequeue">
            <summary>Dequeues the item with the highest priority.</summary>
            <returns>The item of the highest priority.</returns>
            <remarks>Runtime: Theta(ln(n)).</remarks>
        </member>
        <member name="M:Towel.DataStructures.HeapArray`1.Requeue(`0)">
            <summary>Requeues an item after a change has occured.</summary>
            <param name="item">The item to requeue.</param>
            <remarks>Runtime: O(n).</remarks>
        </member>
        <member name="M:Towel.DataStructures.HeapArray`1.Peek">
            <summary>This lets you peek at the top priority WITHOUT REMOVING it.</summary>
            <remarks>Runtime: O(1).</remarks>
        </member>
        <member name="M:Towel.DataStructures.HeapArray`1.ShiftUp(System.Int32)">
            <summary>Standard priority queue algorithm for up sifting.</summary>
            <param name="index">The index to be up sifted.</param>
            <remarks>Runtime: O(ln(n)), Omega(1).</remarks>
        </member>
        <member name="M:Towel.DataStructures.HeapArray`1.ShiftDown(System.Int32)">
            <summary>Standard priority queue algorithm for sifting down.</summary>
            <param name="index">The index to be down sifted.</param>
            <remarks>Runtime: O(ln(n)), Omega(1).</remarks>
        </member>
        <member name="M:Towel.DataStructures.HeapArray`1.ArraySwap(System.Int32,System.Int32)">
            <summary>Standard array swap method.</summary>
            <param name="indexOne">The first index of the swap.</param>
            <param name="indexTwo">The second index of the swap.</param>
            <remarks>Runtime: O(1).</remarks>
        </member>
        <member name="M:Towel.DataStructures.HeapArray`1.Clear">
            <summary>Returns this queue to an empty state.</summary>
            <remarks>Runtime: O(1).</remarks>
        </member>
        <member name="M:Towel.DataStructures.HeapArray`1.ToArray">
            <summary>Converts the heap into an array using pre-order traversal (WARNING: items are not ordered).</summary>
            <returns>The array of priority-sorted items.</returns>
        </member>
        <member name="M:Towel.DataStructures.HeapArray`1.GetEnumerator">
            <summary>Gets the enumerator of the heap.</summary>
            <returns>The enumerator of the heap.</returns>
        </member>
        <member name="M:Towel.DataStructures.HeapArray`1.Stepper(Towel.Step{`0})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="function">The delegate to invoke on each item in the structure.</param>
        </member>
        <member name="M:Towel.DataStructures.HeapArray`1.Stepper(Towel.StepRef{`0})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="function">The delegate to invoke on each item in the structure.</param>
        </member>
        <member name="M:Towel.DataStructures.HeapArray`1.Stepper(Towel.StepBreak{`0})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="function">The delegate to invoke on each item in the structure.</param>
            <returns>The resulting status of the iteration.</returns>
        </member>
        <member name="M:Towel.DataStructures.HeapArray`1.Stepper(Towel.StepRefBreak{`0})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="function">The delegate to invoke on each item in the structure.</param>
            <returns>The resulting status of the iteration.</returns>
        </member>
        <member name="M:Towel.DataStructures.HeapArray`1.Clone">
            <summary>Creates a shallow clone of this data structure.</summary>
            <returns>A shallow clone of this data structure.</returns>
        </member>
        <member name="T:Towel.DataStructures.KdTree">
            <summary>Contains extensions methods for the KdTree interface.</summary>
        </member>
        <member name="T:Towel.DataStructures.KdTree.Locate`2">
            <summary>Locates an item along the given dimensions.</summary>
            <typeparam name="T">The type of the item to locate.</typeparam>
            <typeparam name="M">The type of axis type of the Omnitree.</typeparam>
            <param name="item">The item to be located.</param>
            <returns>A delegate for getting the location along a given axis.</returns>
        </member>
        <member name="T:Towel.DataStructures.KdTree_Linked`2">
            <summary>A binary tree data structure for sorting items along multiple dimensions.</summary>
            <typeparam name="T">The generic items to be stored in this data structure.</typeparam>
            <typeparam name="K">The type of the axis dimensions to sort the "T" values upon.</typeparam>
        </member>
        <member name="T:Towel.DataStructures.KdTree_Linked`2.Node">
            <summary>Can be a leaf or a branch.</summary>
        </member>
        <member name="T:Towel.DataStructures.Link">
            <summary>Represents a link between objects.</summary>
        </member>
        <member name="P:Towel.DataStructures.Link.Size">
            <summary>The number of objects in the tuple.</summary>
        </member>
        <member name="T:Towel.DataStructures.Link`1">
            <summary>Represents a link between objects.</summary>
            <typeparam name="T1">The type of #1 element in the link.</typeparam>
        </member>
        <member name="M:Towel.DataStructures.Link`1.#ctor(`0)">
            <summary>Creates a link between objects.</summary>
            <param name="_1">The #1 item to be linked.</param>
            <remarks>Runtime: O(1).</remarks>
        </member>
        <member name="P:Towel.DataStructures.Link`1.Size">
            <summary>The number of objects in the tuple.</summary>
        </member>
        <member name="P:Towel.DataStructures.Link`1._1">
            <summary>The #1 item in the link.</summary>
            <remarks>Runtime: O(1).</remarks>
        </member>
        <member name="M:Towel.DataStructures.Link`1.op_Explicit(System.ValueTuple{`0})~Towel.DataStructures.Link{`0}">
            <summary>Converts a System.ValueTuple to a Towel.DataStructures.Link of the same generic types.</summary>
            <param name="tuple">The System.ValueTuple to convert into a Towel.DataStructures.Link.</param>
            <returns>The resulting Towel.DataStructures.Link.</returns>
        </member>
        <member name="M:Towel.DataStructures.Link`1.op_Explicit(Towel.DataStructures.Link{`0})~System.ValueTuple{`0}">
            <summary>Converts a Towel.DataStructures.Link to a System.Tuple of the same generic types.</summary>
            <param name="link">The Towel.DataStructures.Link to convert into a System.ValueTuple.</param>
            <returns>The resulting System.ValueTuple.</returns>
        </member>
        <member name="M:Towel.DataStructures.Link`1.op_Explicit(System.Tuple{`0})~Towel.DataStructures.Link{`0}">
            <summary>Converts a System.Tuple to a Towel.DataStructures.Link of the same generic types.</summary>
            <param name="tuple">The System.Tuple to convert into a Towel.DataStructures.Link.</param>
            <returns>The resulting Towel.DataStructures.Link.</returns>
        </member>
        <member name="M:Towel.DataStructures.Link`1.op_Explicit(Towel.DataStructures.Link{`0})~System.Tuple{`0}">
            <summary>Converts a Towel.DataStructures.Link to a System.Tuple of the same generic types.</summary>
            <param name="link">The Towel.DataStructures.Link to convert into a System.Tuple.</param>
            <returns>The resulting System.Tuple.</returns>
        </member>
        <member name="M:Towel.DataStructures.Link`1.Types">
            <summary>Gets an array with all the types contained in this link in respective order.</summary>
            <returns>An array of all the types in this link in respective order.</returns>
        </member>
        <member name="M:Towel.DataStructures.Link`1.Contains(System.Object,Towel.Compare{System.Object})">
            <summary>Checks to see if a given object is in this data structure.</summary>
            <param name="item">The item to check for.</param>
            <param name="compare">Delegate representing comparison technique.</param>
            <returns>true if the item is in this structure; false if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.Link`1.Stepper(Towel.Step{System.Object})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="function">The delegate to invoke on each item in the structure.</param>
        </member>
        <member name="M:Towel.DataStructures.Link`1.Stepper(Towel.StepBreak{System.Object})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="function">The delegate to invoke on each item in the structure.</param>
            <returns>The resulting status of the iteration.</returns>
        </member>
        <member name="M:Towel.DataStructures.Link`1.Clone">
            <summary>Creates a shallow clone of this data structure.</summary>
            <returns>A shallow clone of this data structure.</returns>
        </member>
        <member name="M:Towel.DataStructures.Link`1.ToArray">
            <summary>Converts the structure into an array.</summary>
            <returns>An array containing all the item in the structure.</returns>
        </member>
        <member name="M:Towel.DataStructures.Link`1.GetHashCode">
            <summary>Default hashing function for the Towel.DataStructures.Link.</summary>
            <returns>The computed hash code.</returns>
        </member>
        <member name="M:Towel.DataStructures.Link`1.Equals(System.Object)">
            <summary>Default equals method for Towel.DataStructures.Link.</summary>
            <returns>Whether this object and the provided obj are value equal.</returns>
        </member>
        <member name="T:Towel.DataStructures.LinkStruct`1">
            <summary>Represents a link between objects.</summary>
            <typeparam name="T1">The type of #1 element in the link.</typeparam>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`1.#ctor(`0)">
            <summary>Creates a link between objects.</summary>
            <param name="_1">The #1 item to be linked.</param>
            <remarks>Runtime: O(1).</remarks>
        </member>
        <member name="P:Towel.DataStructures.LinkStruct`1.Size">
            <summary>The number of objects in the tuple.</summary>
        </member>
        <member name="P:Towel.DataStructures.LinkStruct`1._1">
            <summary>The #1 item in the link.</summary>
            <remarks>Runtime: O(1).</remarks>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`1.op_Explicit(System.ValueTuple{`0})~Towel.DataStructures.LinkStruct{`0}">
            <summary>Converts a System.ValueTuple to a Towel.DataStructures.LinkStruct of the same generic types.</summary>
            <param name="tuple">The System.ValueTuple to convert into a Towel.DataStructures.LinkStruct.</param>
            <returns>The resulting Towel.DataStructures.LinkStruct.</returns>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`1.op_Explicit(Towel.DataStructures.LinkStruct{`0})~System.ValueTuple{`0}">
            <summary>Converts a Towel.DataStructures.LinkStruct to a System.ValueTuple of the same generic types.</summary>
            <param name="link">The Towel.DataStructures.LinkStruct to convert into a System.ValueTuple.</param>
            <returns>The resulting System.ValueTuple.</returns>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`1.op_Explicit(System.Tuple{`0})~Towel.DataStructures.LinkStruct{`0}">
            <summary>Converts a System.Tuple to a Towel.DataStructures.LinkStruct of the same generic types.</summary>
            <param name="tuple">The System.Tuple to convert into a Towel.DataStructures.LinkStruct.</param>
            <returns>The resulting Towel.DataStructures.LinkStruct.</returns>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`1.op_Explicit(Towel.DataStructures.LinkStruct{`0})~System.Tuple{`0}">
            <summary>Converts a Towel.DataStructures.LinkStruct to a System.Tuple of the same generic types.</summary>
            <param name="link">The Towel.DataStructures.LinkStruct to convert into a System.Tuple.</param>
            <returns>The resulting System.Tuple.</returns>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>FOR COMPATIBILITY ONLY. AVOID IF POSSIBLE.</summary>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`1.System#Collections#Generic#IEnumerable{System#Object}#GetEnumerator">
            <summary>FOR COMPATIBILITY ONLY. AVOID IF POSSIBLE.</summary>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`1.Types">
            <summary>Gets an array with all the types contained in this link in respective order.</summary>
            <returns>An array of all the types in this link in respective order.</returns>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`1.Contains(System.Object,Towel.Compare{System.Object})">
            <summary>Checks to see if a given object is in this data structure.</summary>
            <param name="item">The item to check for.</param>
            <param name="compare">Delegate representing comparison technique.</param>
            <returns>true if the item is in this structure; false if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`1.Stepper(Towel.Step{System.Object})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="function">The delegate to invoke on each item in the structure.</param>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`1.Stepper(Towel.StepBreak{System.Object})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="function">The delegate to invoke on each item in the structure.</param>
            <returns>The resulting status of the iteration.</returns>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`1.Clone">
            <summary>Creates a shallow clone of this data structure.</summary>
            <returns>A shallow clone of this data structure.</returns>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`1.ToArray">
            <summary>Converts the structure into an array.</summary>
            <returns>An array containing all the item in the structure.</returns>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`1.GetHashCode">
            <summary>Default hashing function for the Towel.DataStructures.LinkStruct.</summary>
            <returns>The computed hash code.</returns>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`1.Equals(System.Object)">
            <summary>Default equals method for Towel.DataStructures.LinkStruct.</summary>
            <returns>Whether this object and the provided obj are value equal.</returns>
        </member>
        <member name="T:Towel.DataStructures.Link`2">
            <summary>Represents a link between objects.</summary>
            <typeparam name="T1">The type of #1 element in the link.</typeparam>
            <typeparam name="T2">The type of #2 element in the link.</typeparam>
        </member>
        <member name="M:Towel.DataStructures.Link`2.#ctor(`0,`1)">
            <summary>Creates a link between objects.</summary>
            <param name="_1">The #1 item to be linked.</param>
            <param name="_2">The #2 item to be linked.</param>
            <remarks>Runtime: O(1).</remarks>
        </member>
        <member name="P:Towel.DataStructures.Link`2.Size">
            <summary>The number of objects in the tuple.</summary>
        </member>
        <member name="P:Towel.DataStructures.Link`2._1">
            <summary>The #1 item in the link.</summary>
            <remarks>Runtime: O(1).</remarks>
        </member>
        <member name="P:Towel.DataStructures.Link`2._2">
            <summary>The #2 item in the link.</summary>
            <remarks>Runtime: O(1).</remarks>
        </member>
        <member name="M:Towel.DataStructures.Link`2.op_Explicit(System.ValueTuple{`0,`1})~Towel.DataStructures.Link{`0,`1}">
            <summary>Converts a System.ValueTuple to a Towel.DataStructures.Link of the same generic types.</summary>
            <param name="tuple">The System.ValueTuple to convert into a Towel.DataStructures.Link.</param>
            <returns>The resulting Towel.DataStructures.Link.</returns>
        </member>
        <member name="M:Towel.DataStructures.Link`2.op_Explicit(Towel.DataStructures.Link{`0,`1})~System.ValueTuple{`0,`1}">
            <summary>Converts a Towel.DataStructures.Link to a System.Tuple of the same generic types.</summary>
            <param name="link">The Towel.DataStructures.Link to convert into a System.ValueTuple.</param>
            <returns>The resulting System.ValueTuple.</returns>
        </member>
        <member name="M:Towel.DataStructures.Link`2.op_Explicit(System.Tuple{`0,`1})~Towel.DataStructures.Link{`0,`1}">
            <summary>Converts a System.Tuple to a Towel.DataStructures.Link of the same generic types.</summary>
            <param name="tuple">The System.Tuple to convert into a Towel.DataStructures.Link.</param>
            <returns>The resulting Towel.DataStructures.Link.</returns>
        </member>
        <member name="M:Towel.DataStructures.Link`2.op_Explicit(Towel.DataStructures.Link{`0,`1})~System.Tuple{`0,`1}">
            <summary>Converts a Towel.DataStructures.Link to a System.Tuple of the same generic types.</summary>
            <param name="link">The Towel.DataStructures.Link to convert into a System.Tuple.</param>
            <returns>The resulting System.Tuple.</returns>
        </member>
        <member name="M:Towel.DataStructures.Link`2.Types">
            <summary>Gets an array with all the types contained in this link in respective order.</summary>
            <returns>An array of all the types in this link in respective order.</returns>
        </member>
        <member name="M:Towel.DataStructures.Link`2.Contains(System.Object,Towel.Compare{System.Object})">
            <summary>Checks to see if a given object is in this data structure.</summary>
            <param name="item">The item to check for.</param>
            <param name="compare">Delegate representing comparison technique.</param>
            <returns>true if the item is in this structure; false if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.Link`2.Stepper(Towel.Step{System.Object})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="function">The delegate to invoke on each item in the structure.</param>
        </member>
        <member name="M:Towel.DataStructures.Link`2.Stepper(Towel.StepBreak{System.Object})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="function">The delegate to invoke on each item in the structure.</param>
            <returns>The resulting status of the iteration.</returns>
        </member>
        <member name="M:Towel.DataStructures.Link`2.Clone">
            <summary>Creates a shallow clone of this data structure.</summary>
            <returns>A shallow clone of this data structure.</returns>
        </member>
        <member name="M:Towel.DataStructures.Link`2.ToArray">
            <summary>Converts the structure into an array.</summary>
            <returns>An array containing all the item in the structure.</returns>
        </member>
        <member name="M:Towel.DataStructures.Link`2.GetHashCode">
            <summary>Default hashing function for the Towel.DataStructures.Link.</summary>
            <returns>The computed hash code.</returns>
        </member>
        <member name="M:Towel.DataStructures.Link`2.Equals(System.Object)">
            <summary>Default equals method for Towel.DataStructures.Link.</summary>
            <returns>Whether this object and the provided obj are value equal.</returns>
        </member>
        <member name="T:Towel.DataStructures.LinkStruct`2">
            <summary>Represents a link between objects.</summary>
            <typeparam name="T1">The type of #1 element in the link.</typeparam>
            <typeparam name="T2">The type of #2 element in the link.</typeparam>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`2.#ctor(`0,`1)">
            <summary>Creates a link between objects.</summary>
            <param name="_1">The #1 item to be linked.</param>
            <param name="_2">The #2 item to be linked.</param>
            <remarks>Runtime: O(1).</remarks>
        </member>
        <member name="P:Towel.DataStructures.LinkStruct`2.Size">
            <summary>The number of objects in the tuple.</summary>
        </member>
        <member name="P:Towel.DataStructures.LinkStruct`2._1">
            <summary>The #1 item in the link.</summary>
            <remarks>Runtime: O(1).</remarks>
        </member>
        <member name="P:Towel.DataStructures.LinkStruct`2._2">
            <summary>The #2 item in the link.</summary>
            <remarks>Runtime: O(1).</remarks>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`2.op_Explicit(System.ValueTuple{`0,`1})~Towel.DataStructures.LinkStruct{`0,`1}">
            <summary>Converts a System.ValueTuple to a Towel.DataStructures.LinkStruct of the same generic types.</summary>
            <param name="tuple">The System.ValueTuple to convert into a Towel.DataStructures.LinkStruct.</param>
            <returns>The resulting Towel.DataStructures.LinkStruct.</returns>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`2.op_Explicit(Towel.DataStructures.LinkStruct{`0,`1})~System.ValueTuple{`0,`1}">
            <summary>Converts a Towel.DataStructures.LinkStruct to a System.ValueTuple of the same generic types.</summary>
            <param name="link">The Towel.DataStructures.LinkStruct to convert into a System.ValueTuple.</param>
            <returns>The resulting System.ValueTuple.</returns>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`2.op_Explicit(System.Tuple{`0,`1})~Towel.DataStructures.LinkStruct{`0,`1}">
            <summary>Converts a System.Tuple to a Towel.DataStructures.LinkStruct of the same generic types.</summary>
            <param name="tuple">The System.Tuple to convert into a Towel.DataStructures.LinkStruct.</param>
            <returns>The resulting Towel.DataStructures.LinkStruct.</returns>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`2.op_Explicit(Towel.DataStructures.LinkStruct{`0,`1})~System.Tuple{`0,`1}">
            <summary>Converts a Towel.DataStructures.LinkStruct to a System.Tuple of the same generic types.</summary>
            <param name="link">The Towel.DataStructures.LinkStruct to convert into a System.Tuple.</param>
            <returns>The resulting System.Tuple.</returns>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>FOR COMPATIBILITY ONLY. AVOID IF POSSIBLE.</summary>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`2.System#Collections#Generic#IEnumerable{System#Object}#GetEnumerator">
            <summary>FOR COMPATIBILITY ONLY. AVOID IF POSSIBLE.</summary>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`2.Types">
            <summary>Gets an array with all the types contained in this link in respective order.</summary>
            <returns>An array of all the types in this link in respective order.</returns>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`2.Contains(System.Object,Towel.Compare{System.Object})">
            <summary>Checks to see if a given object is in this data structure.</summary>
            <param name="item">The item to check for.</param>
            <param name="compare">Delegate representing comparison technique.</param>
            <returns>true if the item is in this structure; false if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`2.Stepper(Towel.Step{System.Object})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="function">The delegate to invoke on each item in the structure.</param>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`2.Stepper(Towel.StepBreak{System.Object})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="function">The delegate to invoke on each item in the structure.</param>
            <returns>The resulting status of the iteration.</returns>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`2.Clone">
            <summary>Creates a shallow clone of this data structure.</summary>
            <returns>A shallow clone of this data structure.</returns>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`2.ToArray">
            <summary>Converts the structure into an array.</summary>
            <returns>An array containing all the item in the structure.</returns>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`2.GetHashCode">
            <summary>Default hashing function for the Towel.DataStructures.LinkStruct.</summary>
            <returns>The computed hash code.</returns>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`2.Equals(System.Object)">
            <summary>Default equals method for Towel.DataStructures.LinkStruct.</summary>
            <returns>Whether this object and the provided obj are value equal.</returns>
        </member>
        <member name="T:Towel.DataStructures.Link`3">
            <summary>Represents a link between objects.</summary>
            <typeparam name="T1">The type of #1 element in the link.</typeparam>
            <typeparam name="T2">The type of #2 element in the link.</typeparam>
            <typeparam name="T3">The type of #3 element in the link.</typeparam>
        </member>
        <member name="M:Towel.DataStructures.Link`3.#ctor(`0,`1,`2)">
            <summary>Creates a link between objects.</summary>
            <param name="_1">The #1 item to be linked.</param>
            <param name="_2">The #2 item to be linked.</param>
            <param name="_3">The #3 item to be linked.</param>
            <remarks>Runtime: O(1).</remarks>
        </member>
        <member name="P:Towel.DataStructures.Link`3.Size">
            <summary>The number of objects in the tuple.</summary>
        </member>
        <member name="P:Towel.DataStructures.Link`3._1">
            <summary>The #1 item in the link.</summary>
            <remarks>Runtime: O(1).</remarks>
        </member>
        <member name="P:Towel.DataStructures.Link`3._2">
            <summary>The #2 item in the link.</summary>
            <remarks>Runtime: O(1).</remarks>
        </member>
        <member name="P:Towel.DataStructures.Link`3._3">
            <summary>The #3 item in the link.</summary>
            <remarks>Runtime: O(1).</remarks>
        </member>
        <member name="M:Towel.DataStructures.Link`3.op_Explicit(System.ValueTuple{`0,`1,`2})~Towel.DataStructures.Link{`0,`1,`2}">
            <summary>Converts a System.ValueTuple to a Towel.DataStructures.Link of the same generic types.</summary>
            <param name="tuple">The System.ValueTuple to convert into a Towel.DataStructures.Link.</param>
            <returns>The resulting Towel.DataStructures.Link.</returns>
        </member>
        <member name="M:Towel.DataStructures.Link`3.op_Explicit(Towel.DataStructures.Link{`0,`1,`2})~System.ValueTuple{`0,`1,`2}">
            <summary>Converts a Towel.DataStructures.Link to a System.Tuple of the same generic types.</summary>
            <param name="link">The Towel.DataStructures.Link to convert into a System.ValueTuple.</param>
            <returns>The resulting System.ValueTuple.</returns>
        </member>
        <member name="M:Towel.DataStructures.Link`3.op_Explicit(System.Tuple{`0,`1,`2})~Towel.DataStructures.Link{`0,`1,`2}">
            <summary>Converts a System.Tuple to a Towel.DataStructures.Link of the same generic types.</summary>
            <param name="tuple">The System.Tuple to convert into a Towel.DataStructures.Link.</param>
            <returns>The resulting Towel.DataStructures.Link.</returns>
        </member>
        <member name="M:Towel.DataStructures.Link`3.op_Explicit(Towel.DataStructures.Link{`0,`1,`2})~System.Tuple{`0,`1,`2}">
            <summary>Converts a Towel.DataStructures.Link to a System.Tuple of the same generic types.</summary>
            <param name="link">The Towel.DataStructures.Link to convert into a System.Tuple.</param>
            <returns>The resulting System.Tuple.</returns>
        </member>
        <member name="M:Towel.DataStructures.Link`3.Types">
            <summary>Gets an array with all the types contained in this link in respective order.</summary>
            <returns>An array of all the types in this link in respective order.</returns>
        </member>
        <member name="M:Towel.DataStructures.Link`3.Contains(System.Object,Towel.Compare{System.Object})">
            <summary>Checks to see if a given object is in this data structure.</summary>
            <param name="item">The item to check for.</param>
            <param name="compare">Delegate representing comparison technique.</param>
            <returns>true if the item is in this structure; false if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.Link`3.Stepper(Towel.Step{System.Object})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="function">The delegate to invoke on each item in the structure.</param>
        </member>
        <member name="M:Towel.DataStructures.Link`3.Stepper(Towel.StepBreak{System.Object})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="function">The delegate to invoke on each item in the structure.</param>
            <returns>The resulting status of the iteration.</returns>
        </member>
        <member name="M:Towel.DataStructures.Link`3.Clone">
            <summary>Creates a shallow clone of this data structure.</summary>
            <returns>A shallow clone of this data structure.</returns>
        </member>
        <member name="M:Towel.DataStructures.Link`3.ToArray">
            <summary>Converts the structure into an array.</summary>
            <returns>An array containing all the item in the structure.</returns>
        </member>
        <member name="M:Towel.DataStructures.Link`3.GetHashCode">
            <summary>Default hashing function for the Towel.DataStructures.Link.</summary>
            <returns>The computed hash code.</returns>
        </member>
        <member name="M:Towel.DataStructures.Link`3.Equals(System.Object)">
            <summary>Default equals method for Towel.DataStructures.Link.</summary>
            <returns>Whether this object and the provided obj are value equal.</returns>
        </member>
        <member name="T:Towel.DataStructures.LinkStruct`3">
            <summary>Represents a link between objects.</summary>
            <typeparam name="T1">The type of #1 element in the link.</typeparam>
            <typeparam name="T2">The type of #2 element in the link.</typeparam>
            <typeparam name="T3">The type of #3 element in the link.</typeparam>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`3.#ctor(`0,`1,`2)">
            <summary>Creates a link between objects.</summary>
            <param name="_1">The #1 item to be linked.</param>
            <param name="_2">The #2 item to be linked.</param>
            <param name="_3">The #3 item to be linked.</param>
            <remarks>Runtime: O(1).</remarks>
        </member>
        <member name="P:Towel.DataStructures.LinkStruct`3.Size">
            <summary>The number of objects in the tuple.</summary>
        </member>
        <member name="P:Towel.DataStructures.LinkStruct`3._1">
            <summary>The #1 item in the link.</summary>
            <remarks>Runtime: O(1).</remarks>
        </member>
        <member name="P:Towel.DataStructures.LinkStruct`3._2">
            <summary>The #2 item in the link.</summary>
            <remarks>Runtime: O(1).</remarks>
        </member>
        <member name="P:Towel.DataStructures.LinkStruct`3._3">
            <summary>The #3 item in the link.</summary>
            <remarks>Runtime: O(1).</remarks>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`3.op_Explicit(System.ValueTuple{`0,`1,`2})~Towel.DataStructures.LinkStruct{`0,`1,`2}">
            <summary>Converts a System.ValueTuple to a Towel.DataStructures.LinkStruct of the same generic types.</summary>
            <param name="tuple">The System.ValueTuple to convert into a Towel.DataStructures.LinkStruct.</param>
            <returns>The resulting Towel.DataStructures.LinkStruct.</returns>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`3.op_Explicit(Towel.DataStructures.LinkStruct{`0,`1,`2})~System.ValueTuple{`0,`1,`2}">
            <summary>Converts a Towel.DataStructures.LinkStruct to a System.ValueTuple of the same generic types.</summary>
            <param name="link">The Towel.DataStructures.LinkStruct to convert into a System.ValueTuple.</param>
            <returns>The resulting System.ValueTuple.</returns>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`3.op_Explicit(System.Tuple{`0,`1,`2})~Towel.DataStructures.LinkStruct{`0,`1,`2}">
            <summary>Converts a System.Tuple to a Towel.DataStructures.LinkStruct of the same generic types.</summary>
            <param name="tuple">The System.Tuple to convert into a Towel.DataStructures.LinkStruct.</param>
            <returns>The resulting Towel.DataStructures.LinkStruct.</returns>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`3.op_Explicit(Towel.DataStructures.LinkStruct{`0,`1,`2})~System.Tuple{`0,`1,`2}">
            <summary>Converts a Towel.DataStructures.LinkStruct to a System.Tuple of the same generic types.</summary>
            <param name="link">The Towel.DataStructures.LinkStruct to convert into a System.Tuple.</param>
            <returns>The resulting System.Tuple.</returns>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`3.System#Collections#IEnumerable#GetEnumerator">
            <summary>FOR COMPATIBILITY ONLY. AVOID IF POSSIBLE.</summary>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`3.System#Collections#Generic#IEnumerable{System#Object}#GetEnumerator">
            <summary>FOR COMPATIBILITY ONLY. AVOID IF POSSIBLE.</summary>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`3.Types">
            <summary>Gets an array with all the types contained in this link in respective order.</summary>
            <returns>An array of all the types in this link in respective order.</returns>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`3.Contains(System.Object,Towel.Compare{System.Object})">
            <summary>Checks to see if a given object is in this data structure.</summary>
            <param name="item">The item to check for.</param>
            <param name="compare">Delegate representing comparison technique.</param>
            <returns>true if the item is in this structure; false if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`3.Stepper(Towel.Step{System.Object})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="function">The delegate to invoke on each item in the structure.</param>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`3.Stepper(Towel.StepBreak{System.Object})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="function">The delegate to invoke on each item in the structure.</param>
            <returns>The resulting status of the iteration.</returns>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`3.Clone">
            <summary>Creates a shallow clone of this data structure.</summary>
            <returns>A shallow clone of this data structure.</returns>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`3.ToArray">
            <summary>Converts the structure into an array.</summary>
            <returns>An array containing all the item in the structure.</returns>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`3.GetHashCode">
            <summary>Default hashing function for the Towel.DataStructures.LinkStruct.</summary>
            <returns>The computed hash code.</returns>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`3.Equals(System.Object)">
            <summary>Default equals method for Towel.DataStructures.LinkStruct.</summary>
            <returns>Whether this object and the provided obj are value equal.</returns>
        </member>
        <member name="T:Towel.DataStructures.Link`4">
            <summary>Represents a link between objects.</summary>
            <typeparam name="T1">The type of #1 element in the link.</typeparam>
            <typeparam name="T2">The type of #2 element in the link.</typeparam>
            <typeparam name="T3">The type of #3 element in the link.</typeparam>
            <typeparam name="T4">The type of #4 element in the link.</typeparam>
        </member>
        <member name="M:Towel.DataStructures.Link`4.#ctor(`0,`1,`2,`3)">
            <summary>Creates a link between objects.</summary>
            <param name="_1">The #1 item to be linked.</param>
            <param name="_2">The #2 item to be linked.</param>
            <param name="_3">The #3 item to be linked.</param>
            <param name="_4">The #4 item to be linked.</param>
            <remarks>Runtime: O(1).</remarks>
        </member>
        <member name="P:Towel.DataStructures.Link`4.Size">
            <summary>The number of objects in the tuple.</summary>
        </member>
        <member name="P:Towel.DataStructures.Link`4._1">
            <summary>The #1 item in the link.</summary>
            <remarks>Runtime: O(1).</remarks>
        </member>
        <member name="P:Towel.DataStructures.Link`4._2">
            <summary>The #2 item in the link.</summary>
            <remarks>Runtime: O(1).</remarks>
        </member>
        <member name="P:Towel.DataStructures.Link`4._3">
            <summary>The #3 item in the link.</summary>
            <remarks>Runtime: O(1).</remarks>
        </member>
        <member name="P:Towel.DataStructures.Link`4._4">
            <summary>The #4 item in the link.</summary>
            <remarks>Runtime: O(1).</remarks>
        </member>
        <member name="M:Towel.DataStructures.Link`4.op_Explicit(System.ValueTuple{`0,`1,`2,`3})~Towel.DataStructures.Link{`0,`1,`2,`3}">
            <summary>Converts a System.ValueTuple to a Towel.DataStructures.Link of the same generic types.</summary>
            <param name="tuple">The System.ValueTuple to convert into a Towel.DataStructures.Link.</param>
            <returns>The resulting Towel.DataStructures.Link.</returns>
        </member>
        <member name="M:Towel.DataStructures.Link`4.op_Explicit(Towel.DataStructures.Link{`0,`1,`2,`3})~System.ValueTuple{`0,`1,`2,`3}">
            <summary>Converts a Towel.DataStructures.Link to a System.Tuple of the same generic types.</summary>
            <param name="link">The Towel.DataStructures.Link to convert into a System.ValueTuple.</param>
            <returns>The resulting System.ValueTuple.</returns>
        </member>
        <member name="M:Towel.DataStructures.Link`4.op_Explicit(System.Tuple{`0,`1,`2,`3})~Towel.DataStructures.Link{`0,`1,`2,`3}">
            <summary>Converts a System.Tuple to a Towel.DataStructures.Link of the same generic types.</summary>
            <param name="tuple">The System.Tuple to convert into a Towel.DataStructures.Link.</param>
            <returns>The resulting Towel.DataStructures.Link.</returns>
        </member>
        <member name="M:Towel.DataStructures.Link`4.op_Explicit(Towel.DataStructures.Link{`0,`1,`2,`3})~System.Tuple{`0,`1,`2,`3}">
            <summary>Converts a Towel.DataStructures.Link to a System.Tuple of the same generic types.</summary>
            <param name="link">The Towel.DataStructures.Link to convert into a System.Tuple.</param>
            <returns>The resulting System.Tuple.</returns>
        </member>
        <member name="M:Towel.DataStructures.Link`4.Types">
            <summary>Gets an array with all the types contained in this link in respective order.</summary>
            <returns>An array of all the types in this link in respective order.</returns>
        </member>
        <member name="M:Towel.DataStructures.Link`4.Contains(System.Object,Towel.Compare{System.Object})">
            <summary>Checks to see if a given object is in this data structure.</summary>
            <param name="item">The item to check for.</param>
            <param name="compare">Delegate representing comparison technique.</param>
            <returns>true if the item is in this structure; false if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.Link`4.Stepper(Towel.Step{System.Object})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="function">The delegate to invoke on each item in the structure.</param>
        </member>
        <member name="M:Towel.DataStructures.Link`4.Stepper(Towel.StepBreak{System.Object})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="function">The delegate to invoke on each item in the structure.</param>
            <returns>The resulting status of the iteration.</returns>
        </member>
        <member name="M:Towel.DataStructures.Link`4.Clone">
            <summary>Creates a shallow clone of this data structure.</summary>
            <returns>A shallow clone of this data structure.</returns>
        </member>
        <member name="M:Towel.DataStructures.Link`4.ToArray">
            <summary>Converts the structure into an array.</summary>
            <returns>An array containing all the item in the structure.</returns>
        </member>
        <member name="M:Towel.DataStructures.Link`4.GetHashCode">
            <summary>Default hashing function for the Towel.DataStructures.Link.</summary>
            <returns>The computed hash code.</returns>
        </member>
        <member name="M:Towel.DataStructures.Link`4.Equals(System.Object)">
            <summary>Default equals method for Towel.DataStructures.Link.</summary>
            <returns>Whether this object and the provided obj are value equal.</returns>
        </member>
        <member name="T:Towel.DataStructures.LinkStruct`4">
            <summary>Represents a link between objects.</summary>
            <typeparam name="T1">The type of #1 element in the link.</typeparam>
            <typeparam name="T2">The type of #2 element in the link.</typeparam>
            <typeparam name="T3">The type of #3 element in the link.</typeparam>
            <typeparam name="T4">The type of #4 element in the link.</typeparam>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`4.#ctor(`0,`1,`2,`3)">
            <summary>Creates a link between objects.</summary>
            <param name="_1">The #1 item to be linked.</param>
            <param name="_2">The #2 item to be linked.</param>
            <param name="_3">The #3 item to be linked.</param>
            <param name="_4">The #4 item to be linked.</param>
            <remarks>Runtime: O(1).</remarks>
        </member>
        <member name="P:Towel.DataStructures.LinkStruct`4.Size">
            <summary>The number of objects in the tuple.</summary>
        </member>
        <member name="P:Towel.DataStructures.LinkStruct`4._1">
            <summary>The #1 item in the link.</summary>
            <remarks>Runtime: O(1).</remarks>
        </member>
        <member name="P:Towel.DataStructures.LinkStruct`4._2">
            <summary>The #2 item in the link.</summary>
            <remarks>Runtime: O(1).</remarks>
        </member>
        <member name="P:Towel.DataStructures.LinkStruct`4._3">
            <summary>The #3 item in the link.</summary>
            <remarks>Runtime: O(1).</remarks>
        </member>
        <member name="P:Towel.DataStructures.LinkStruct`4._4">
            <summary>The #4 item in the link.</summary>
            <remarks>Runtime: O(1).</remarks>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`4.op_Explicit(System.ValueTuple{`0,`1,`2,`3})~Towel.DataStructures.LinkStruct{`0,`1,`2,`3}">
            <summary>Converts a System.ValueTuple to a Towel.DataStructures.LinkStruct of the same generic types.</summary>
            <param name="tuple">The System.ValueTuple to convert into a Towel.DataStructures.LinkStruct.</param>
            <returns>The resulting Towel.DataStructures.LinkStruct.</returns>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`4.op_Explicit(Towel.DataStructures.LinkStruct{`0,`1,`2,`3})~System.ValueTuple{`0,`1,`2,`3}">
            <summary>Converts a Towel.DataStructures.LinkStruct to a System.ValueTuple of the same generic types.</summary>
            <param name="link">The Towel.DataStructures.LinkStruct to convert into a System.ValueTuple.</param>
            <returns>The resulting System.ValueTuple.</returns>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`4.op_Explicit(System.Tuple{`0,`1,`2,`3})~Towel.DataStructures.LinkStruct{`0,`1,`2,`3}">
            <summary>Converts a System.Tuple to a Towel.DataStructures.LinkStruct of the same generic types.</summary>
            <param name="tuple">The System.Tuple to convert into a Towel.DataStructures.LinkStruct.</param>
            <returns>The resulting Towel.DataStructures.LinkStruct.</returns>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`4.op_Explicit(Towel.DataStructures.LinkStruct{`0,`1,`2,`3})~System.Tuple{`0,`1,`2,`3}">
            <summary>Converts a Towel.DataStructures.LinkStruct to a System.Tuple of the same generic types.</summary>
            <param name="link">The Towel.DataStructures.LinkStruct to convert into a System.Tuple.</param>
            <returns>The resulting System.Tuple.</returns>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`4.System#Collections#IEnumerable#GetEnumerator">
            <summary>FOR COMPATIBILITY ONLY. AVOID IF POSSIBLE.</summary>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`4.System#Collections#Generic#IEnumerable{System#Object}#GetEnumerator">
            <summary>FOR COMPATIBILITY ONLY. AVOID IF POSSIBLE.</summary>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`4.Types">
            <summary>Gets an array with all the types contained in this link in respective order.</summary>
            <returns>An array of all the types in this link in respective order.</returns>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`4.Contains(System.Object,Towel.Compare{System.Object})">
            <summary>Checks to see if a given object is in this data structure.</summary>
            <param name="item">The item to check for.</param>
            <param name="compare">Delegate representing comparison technique.</param>
            <returns>true if the item is in this structure; false if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`4.Stepper(Towel.Step{System.Object})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="function">The delegate to invoke on each item in the structure.</param>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`4.Stepper(Towel.StepBreak{System.Object})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="function">The delegate to invoke on each item in the structure.</param>
            <returns>The resulting status of the iteration.</returns>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`4.Clone">
            <summary>Creates a shallow clone of this data structure.</summary>
            <returns>A shallow clone of this data structure.</returns>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`4.ToArray">
            <summary>Converts the structure into an array.</summary>
            <returns>An array containing all the item in the structure.</returns>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`4.GetHashCode">
            <summary>Default hashing function for the Towel.DataStructures.LinkStruct.</summary>
            <returns>The computed hash code.</returns>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`4.Equals(System.Object)">
            <summary>Default equals method for Towel.DataStructures.LinkStruct.</summary>
            <returns>Whether this object and the provided obj are value equal.</returns>
        </member>
        <member name="T:Towel.DataStructures.Link`5">
            <summary>Represents a link between objects.</summary>
            <typeparam name="T1">The type of #1 element in the link.</typeparam>
            <typeparam name="T2">The type of #2 element in the link.</typeparam>
            <typeparam name="T3">The type of #3 element in the link.</typeparam>
            <typeparam name="T4">The type of #4 element in the link.</typeparam>
            <typeparam name="T5">The type of #5 element in the link.</typeparam>
        </member>
        <member name="M:Towel.DataStructures.Link`5.#ctor(`0,`1,`2,`3,`4)">
            <summary>Creates a link between objects.</summary>
            <param name="_1">The #1 item to be linked.</param>
            <param name="_2">The #2 item to be linked.</param>
            <param name="_3">The #3 item to be linked.</param>
            <param name="_4">The #4 item to be linked.</param>
            <param name="_5">The #5 item to be linked.</param>
            <remarks>Runtime: O(1).</remarks>
        </member>
        <member name="P:Towel.DataStructures.Link`5.Size">
            <summary>The number of objects in the tuple.</summary>
        </member>
        <member name="P:Towel.DataStructures.Link`5._1">
            <summary>The #1 item in the link.</summary>
            <remarks>Runtime: O(1).</remarks>
        </member>
        <member name="P:Towel.DataStructures.Link`5._2">
            <summary>The #2 item in the link.</summary>
            <remarks>Runtime: O(1).</remarks>
        </member>
        <member name="P:Towel.DataStructures.Link`5._3">
            <summary>The #3 item in the link.</summary>
            <remarks>Runtime: O(1).</remarks>
        </member>
        <member name="P:Towel.DataStructures.Link`5._4">
            <summary>The #4 item in the link.</summary>
            <remarks>Runtime: O(1).</remarks>
        </member>
        <member name="P:Towel.DataStructures.Link`5._5">
            <summary>The #5 item in the link.</summary>
            <remarks>Runtime: O(1).</remarks>
        </member>
        <member name="M:Towel.DataStructures.Link`5.op_Explicit(System.ValueTuple{`0,`1,`2,`3,`4})~Towel.DataStructures.Link{`0,`1,`2,`3,`4}">
            <summary>Converts a System.ValueTuple to a Towel.DataStructures.Link of the same generic types.</summary>
            <param name="tuple">The System.ValueTuple to convert into a Towel.DataStructures.Link.</param>
            <returns>The resulting Towel.DataStructures.Link.</returns>
        </member>
        <member name="M:Towel.DataStructures.Link`5.op_Explicit(Towel.DataStructures.Link{`0,`1,`2,`3,`4})~System.ValueTuple{`0,`1,`2,`3,`4}">
            <summary>Converts a Towel.DataStructures.Link to a System.Tuple of the same generic types.</summary>
            <param name="link">The Towel.DataStructures.Link to convert into a System.ValueTuple.</param>
            <returns>The resulting System.ValueTuple.</returns>
        </member>
        <member name="M:Towel.DataStructures.Link`5.op_Explicit(System.Tuple{`0,`1,`2,`3,`4})~Towel.DataStructures.Link{`0,`1,`2,`3,`4}">
            <summary>Converts a System.Tuple to a Towel.DataStructures.Link of the same generic types.</summary>
            <param name="tuple">The System.Tuple to convert into a Towel.DataStructures.Link.</param>
            <returns>The resulting Towel.DataStructures.Link.</returns>
        </member>
        <member name="M:Towel.DataStructures.Link`5.op_Explicit(Towel.DataStructures.Link{`0,`1,`2,`3,`4})~System.Tuple{`0,`1,`2,`3,`4}">
            <summary>Converts a Towel.DataStructures.Link to a System.Tuple of the same generic types.</summary>
            <param name="link">The Towel.DataStructures.Link to convert into a System.Tuple.</param>
            <returns>The resulting System.Tuple.</returns>
        </member>
        <member name="M:Towel.DataStructures.Link`5.Types">
            <summary>Gets an array with all the types contained in this link in respective order.</summary>
            <returns>An array of all the types in this link in respective order.</returns>
        </member>
        <member name="M:Towel.DataStructures.Link`5.Contains(System.Object,Towel.Compare{System.Object})">
            <summary>Checks to see if a given object is in this data structure.</summary>
            <param name="item">The item to check for.</param>
            <param name="compare">Delegate representing comparison technique.</param>
            <returns>true if the item is in this structure; false if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.Link`5.Stepper(Towel.Step{System.Object})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="function">The delegate to invoke on each item in the structure.</param>
        </member>
        <member name="M:Towel.DataStructures.Link`5.Stepper(Towel.StepBreak{System.Object})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="function">The delegate to invoke on each item in the structure.</param>
            <returns>The resulting status of the iteration.</returns>
        </member>
        <member name="M:Towel.DataStructures.Link`5.Clone">
            <summary>Creates a shallow clone of this data structure.</summary>
            <returns>A shallow clone of this data structure.</returns>
        </member>
        <member name="M:Towel.DataStructures.Link`5.ToArray">
            <summary>Converts the structure into an array.</summary>
            <returns>An array containing all the item in the structure.</returns>
        </member>
        <member name="M:Towel.DataStructures.Link`5.GetHashCode">
            <summary>Default hashing function for the Towel.DataStructures.Link.</summary>
            <returns>The computed hash code.</returns>
        </member>
        <member name="M:Towel.DataStructures.Link`5.Equals(System.Object)">
            <summary>Default equals method for Towel.DataStructures.Link.</summary>
            <returns>Whether this object and the provided obj are value equal.</returns>
        </member>
        <member name="T:Towel.DataStructures.LinkStruct`5">
            <summary>Represents a link between objects.</summary>
            <typeparam name="T1">The type of #1 element in the link.</typeparam>
            <typeparam name="T2">The type of #2 element in the link.</typeparam>
            <typeparam name="T3">The type of #3 element in the link.</typeparam>
            <typeparam name="T4">The type of #4 element in the link.</typeparam>
            <typeparam name="T5">The type of #5 element in the link.</typeparam>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`5.#ctor(`0,`1,`2,`3,`4)">
            <summary>Creates a link between objects.</summary>
            <param name="_1">The #1 item to be linked.</param>
            <param name="_2">The #2 item to be linked.</param>
            <param name="_3">The #3 item to be linked.</param>
            <param name="_4">The #4 item to be linked.</param>
            <param name="_5">The #5 item to be linked.</param>
            <remarks>Runtime: O(1).</remarks>
        </member>
        <member name="P:Towel.DataStructures.LinkStruct`5.Size">
            <summary>The number of objects in the tuple.</summary>
        </member>
        <member name="P:Towel.DataStructures.LinkStruct`5._1">
            <summary>The #1 item in the link.</summary>
            <remarks>Runtime: O(1).</remarks>
        </member>
        <member name="P:Towel.DataStructures.LinkStruct`5._2">
            <summary>The #2 item in the link.</summary>
            <remarks>Runtime: O(1).</remarks>
        </member>
        <member name="P:Towel.DataStructures.LinkStruct`5._3">
            <summary>The #3 item in the link.</summary>
            <remarks>Runtime: O(1).</remarks>
        </member>
        <member name="P:Towel.DataStructures.LinkStruct`5._4">
            <summary>The #4 item in the link.</summary>
            <remarks>Runtime: O(1).</remarks>
        </member>
        <member name="P:Towel.DataStructures.LinkStruct`5._5">
            <summary>The #5 item in the link.</summary>
            <remarks>Runtime: O(1).</remarks>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`5.op_Explicit(System.ValueTuple{`0,`1,`2,`3,`4})~Towel.DataStructures.LinkStruct{`0,`1,`2,`3,`4}">
            <summary>Converts a System.ValueTuple to a Towel.DataStructures.LinkStruct of the same generic types.</summary>
            <param name="tuple">The System.ValueTuple to convert into a Towel.DataStructures.LinkStruct.</param>
            <returns>The resulting Towel.DataStructures.LinkStruct.</returns>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`5.op_Explicit(Towel.DataStructures.LinkStruct{`0,`1,`2,`3,`4})~System.ValueTuple{`0,`1,`2,`3,`4}">
            <summary>Converts a Towel.DataStructures.LinkStruct to a System.ValueTuple of the same generic types.</summary>
            <param name="link">The Towel.DataStructures.LinkStruct to convert into a System.ValueTuple.</param>
            <returns>The resulting System.ValueTuple.</returns>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`5.op_Explicit(System.Tuple{`0,`1,`2,`3,`4})~Towel.DataStructures.LinkStruct{`0,`1,`2,`3,`4}">
            <summary>Converts a System.Tuple to a Towel.DataStructures.LinkStruct of the same generic types.</summary>
            <param name="tuple">The System.Tuple to convert into a Towel.DataStructures.LinkStruct.</param>
            <returns>The resulting Towel.DataStructures.LinkStruct.</returns>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`5.op_Explicit(Towel.DataStructures.LinkStruct{`0,`1,`2,`3,`4})~System.Tuple{`0,`1,`2,`3,`4}">
            <summary>Converts a Towel.DataStructures.LinkStruct to a System.Tuple of the same generic types.</summary>
            <param name="link">The Towel.DataStructures.LinkStruct to convert into a System.Tuple.</param>
            <returns>The resulting System.Tuple.</returns>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`5.System#Collections#IEnumerable#GetEnumerator">
            <summary>FOR COMPATIBILITY ONLY. AVOID IF POSSIBLE.</summary>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`5.System#Collections#Generic#IEnumerable{System#Object}#GetEnumerator">
            <summary>FOR COMPATIBILITY ONLY. AVOID IF POSSIBLE.</summary>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`5.Types">
            <summary>Gets an array with all the types contained in this link in respective order.</summary>
            <returns>An array of all the types in this link in respective order.</returns>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`5.Contains(System.Object,Towel.Compare{System.Object})">
            <summary>Checks to see if a given object is in this data structure.</summary>
            <param name="item">The item to check for.</param>
            <param name="compare">Delegate representing comparison technique.</param>
            <returns>true if the item is in this structure; false if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`5.Stepper(Towel.Step{System.Object})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="function">The delegate to invoke on each item in the structure.</param>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`5.Stepper(Towel.StepBreak{System.Object})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="function">The delegate to invoke on each item in the structure.</param>
            <returns>The resulting status of the iteration.</returns>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`5.Clone">
            <summary>Creates a shallow clone of this data structure.</summary>
            <returns>A shallow clone of this data structure.</returns>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`5.ToArray">
            <summary>Converts the structure into an array.</summary>
            <returns>An array containing all the item in the structure.</returns>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`5.GetHashCode">
            <summary>Default hashing function for the Towel.DataStructures.LinkStruct.</summary>
            <returns>The computed hash code.</returns>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`5.Equals(System.Object)">
            <summary>Default equals method for Towel.DataStructures.LinkStruct.</summary>
            <returns>Whether this object and the provided obj are value equal.</returns>
        </member>
        <member name="T:Towel.DataStructures.Link`6">
            <summary>Represents a link between objects.</summary>
            <typeparam name="T1">The type of #1 element in the link.</typeparam>
            <typeparam name="T2">The type of #2 element in the link.</typeparam>
            <typeparam name="T3">The type of #3 element in the link.</typeparam>
            <typeparam name="T4">The type of #4 element in the link.</typeparam>
            <typeparam name="T5">The type of #5 element in the link.</typeparam>
            <typeparam name="T6">The type of #6 element in the link.</typeparam>
        </member>
        <member name="M:Towel.DataStructures.Link`6.#ctor(`0,`1,`2,`3,`4,`5)">
            <summary>Creates a link between objects.</summary>
            <param name="_1">The #1 item to be linked.</param>
            <param name="_2">The #2 item to be linked.</param>
            <param name="_3">The #3 item to be linked.</param>
            <param name="_4">The #4 item to be linked.</param>
            <param name="_5">The #5 item to be linked.</param>
            <param name="_6">The #6 item to be linked.</param>
            <remarks>Runtime: O(1).</remarks>
        </member>
        <member name="P:Towel.DataStructures.Link`6.Size">
            <summary>The number of objects in the tuple.</summary>
        </member>
        <member name="P:Towel.DataStructures.Link`6._1">
            <summary>The #1 item in the link.</summary>
            <remarks>Runtime: O(1).</remarks>
        </member>
        <member name="P:Towel.DataStructures.Link`6._2">
            <summary>The #2 item in the link.</summary>
            <remarks>Runtime: O(1).</remarks>
        </member>
        <member name="P:Towel.DataStructures.Link`6._3">
            <summary>The #3 item in the link.</summary>
            <remarks>Runtime: O(1).</remarks>
        </member>
        <member name="P:Towel.DataStructures.Link`6._4">
            <summary>The #4 item in the link.</summary>
            <remarks>Runtime: O(1).</remarks>
        </member>
        <member name="P:Towel.DataStructures.Link`6._5">
            <summary>The #5 item in the link.</summary>
            <remarks>Runtime: O(1).</remarks>
        </member>
        <member name="P:Towel.DataStructures.Link`6._6">
            <summary>The #6 item in the link.</summary>
            <remarks>Runtime: O(1).</remarks>
        </member>
        <member name="M:Towel.DataStructures.Link`6.op_Explicit(System.ValueTuple{`0,`1,`2,`3,`4,`5})~Towel.DataStructures.Link{`0,`1,`2,`3,`4,`5}">
            <summary>Converts a System.ValueTuple to a Towel.DataStructures.Link of the same generic types.</summary>
            <param name="tuple">The System.ValueTuple to convert into a Towel.DataStructures.Link.</param>
            <returns>The resulting Towel.DataStructures.Link.</returns>
        </member>
        <member name="M:Towel.DataStructures.Link`6.op_Explicit(Towel.DataStructures.Link{`0,`1,`2,`3,`4,`5})~System.ValueTuple{`0,`1,`2,`3,`4,`5}">
            <summary>Converts a Towel.DataStructures.Link to a System.Tuple of the same generic types.</summary>
            <param name="link">The Towel.DataStructures.Link to convert into a System.ValueTuple.</param>
            <returns>The resulting System.ValueTuple.</returns>
        </member>
        <member name="M:Towel.DataStructures.Link`6.op_Explicit(System.Tuple{`0,`1,`2,`3,`4,`5})~Towel.DataStructures.Link{`0,`1,`2,`3,`4,`5}">
            <summary>Converts a System.Tuple to a Towel.DataStructures.Link of the same generic types.</summary>
            <param name="tuple">The System.Tuple to convert into a Towel.DataStructures.Link.</param>
            <returns>The resulting Towel.DataStructures.Link.</returns>
        </member>
        <member name="M:Towel.DataStructures.Link`6.op_Explicit(Towel.DataStructures.Link{`0,`1,`2,`3,`4,`5})~System.Tuple{`0,`1,`2,`3,`4,`5}">
            <summary>Converts a Towel.DataStructures.Link to a System.Tuple of the same generic types.</summary>
            <param name="link">The Towel.DataStructures.Link to convert into a System.Tuple.</param>
            <returns>The resulting System.Tuple.</returns>
        </member>
        <member name="M:Towel.DataStructures.Link`6.Types">
            <summary>Gets an array with all the types contained in this link in respective order.</summary>
            <returns>An array of all the types in this link in respective order.</returns>
        </member>
        <member name="M:Towel.DataStructures.Link`6.Contains(System.Object,Towel.Compare{System.Object})">
            <summary>Checks to see if a given object is in this data structure.</summary>
            <param name="item">The item to check for.</param>
            <param name="compare">Delegate representing comparison technique.</param>
            <returns>true if the item is in this structure; false if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.Link`6.Stepper(Towel.Step{System.Object})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="function">The delegate to invoke on each item in the structure.</param>
        </member>
        <member name="M:Towel.DataStructures.Link`6.Stepper(Towel.StepBreak{System.Object})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="function">The delegate to invoke on each item in the structure.</param>
            <returns>The resulting status of the iteration.</returns>
        </member>
        <member name="M:Towel.DataStructures.Link`6.Clone">
            <summary>Creates a shallow clone of this data structure.</summary>
            <returns>A shallow clone of this data structure.</returns>
        </member>
        <member name="M:Towel.DataStructures.Link`6.ToArray">
            <summary>Converts the structure into an array.</summary>
            <returns>An array containing all the item in the structure.</returns>
        </member>
        <member name="M:Towel.DataStructures.Link`6.GetHashCode">
            <summary>Default hashing function for the Towel.DataStructures.Link.</summary>
            <returns>The computed hash code.</returns>
        </member>
        <member name="M:Towel.DataStructures.Link`6.Equals(System.Object)">
            <summary>Default equals method for Towel.DataStructures.Link.</summary>
            <returns>Whether this object and the provided obj are value equal.</returns>
        </member>
        <member name="T:Towel.DataStructures.LinkStruct`6">
            <summary>Represents a link between objects.</summary>
            <typeparam name="T1">The type of #1 element in the link.</typeparam>
            <typeparam name="T2">The type of #2 element in the link.</typeparam>
            <typeparam name="T3">The type of #3 element in the link.</typeparam>
            <typeparam name="T4">The type of #4 element in the link.</typeparam>
            <typeparam name="T5">The type of #5 element in the link.</typeparam>
            <typeparam name="T6">The type of #6 element in the link.</typeparam>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`6.#ctor(`0,`1,`2,`3,`4,`5)">
            <summary>Creates a link between objects.</summary>
            <param name="_1">The #1 item to be linked.</param>
            <param name="_2">The #2 item to be linked.</param>
            <param name="_3">The #3 item to be linked.</param>
            <param name="_4">The #4 item to be linked.</param>
            <param name="_5">The #5 item to be linked.</param>
            <param name="_6">The #6 item to be linked.</param>
            <remarks>Runtime: O(1).</remarks>
        </member>
        <member name="P:Towel.DataStructures.LinkStruct`6.Size">
            <summary>The number of objects in the tuple.</summary>
        </member>
        <member name="P:Towel.DataStructures.LinkStruct`6._1">
            <summary>The #1 item in the link.</summary>
            <remarks>Runtime: O(1).</remarks>
        </member>
        <member name="P:Towel.DataStructures.LinkStruct`6._2">
            <summary>The #2 item in the link.</summary>
            <remarks>Runtime: O(1).</remarks>
        </member>
        <member name="P:Towel.DataStructures.LinkStruct`6._3">
            <summary>The #3 item in the link.</summary>
            <remarks>Runtime: O(1).</remarks>
        </member>
        <member name="P:Towel.DataStructures.LinkStruct`6._4">
            <summary>The #4 item in the link.</summary>
            <remarks>Runtime: O(1).</remarks>
        </member>
        <member name="P:Towel.DataStructures.LinkStruct`6._5">
            <summary>The #5 item in the link.</summary>
            <remarks>Runtime: O(1).</remarks>
        </member>
        <member name="P:Towel.DataStructures.LinkStruct`6._6">
            <summary>The #6 item in the link.</summary>
            <remarks>Runtime: O(1).</remarks>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`6.op_Explicit(System.ValueTuple{`0,`1,`2,`3,`4,`5})~Towel.DataStructures.LinkStruct{`0,`1,`2,`3,`4,`5}">
            <summary>Converts a System.ValueTuple to a Towel.DataStructures.LinkStruct of the same generic types.</summary>
            <param name="tuple">The System.ValueTuple to convert into a Towel.DataStructures.LinkStruct.</param>
            <returns>The resulting Towel.DataStructures.LinkStruct.</returns>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`6.op_Explicit(Towel.DataStructures.LinkStruct{`0,`1,`2,`3,`4,`5})~System.ValueTuple{`0,`1,`2,`3,`4,`5}">
            <summary>Converts a Towel.DataStructures.LinkStruct to a System.ValueTuple of the same generic types.</summary>
            <param name="link">The Towel.DataStructures.LinkStruct to convert into a System.ValueTuple.</param>
            <returns>The resulting System.ValueTuple.</returns>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`6.op_Explicit(System.Tuple{`0,`1,`2,`3,`4,`5})~Towel.DataStructures.LinkStruct{`0,`1,`2,`3,`4,`5}">
            <summary>Converts a System.Tuple to a Towel.DataStructures.LinkStruct of the same generic types.</summary>
            <param name="tuple">The System.Tuple to convert into a Towel.DataStructures.LinkStruct.</param>
            <returns>The resulting Towel.DataStructures.LinkStruct.</returns>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`6.op_Explicit(Towel.DataStructures.LinkStruct{`0,`1,`2,`3,`4,`5})~System.Tuple{`0,`1,`2,`3,`4,`5}">
            <summary>Converts a Towel.DataStructures.LinkStruct to a System.Tuple of the same generic types.</summary>
            <param name="link">The Towel.DataStructures.LinkStruct to convert into a System.Tuple.</param>
            <returns>The resulting System.Tuple.</returns>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`6.System#Collections#IEnumerable#GetEnumerator">
            <summary>FOR COMPATIBILITY ONLY. AVOID IF POSSIBLE.</summary>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`6.System#Collections#Generic#IEnumerable{System#Object}#GetEnumerator">
            <summary>FOR COMPATIBILITY ONLY. AVOID IF POSSIBLE.</summary>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`6.Types">
            <summary>Gets an array with all the types contained in this link in respective order.</summary>
            <returns>An array of all the types in this link in respective order.</returns>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`6.Contains(System.Object,Towel.Compare{System.Object})">
            <summary>Checks to see if a given object is in this data structure.</summary>
            <param name="item">The item to check for.</param>
            <param name="compare">Delegate representing comparison technique.</param>
            <returns>true if the item is in this structure; false if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`6.Stepper(Towel.Step{System.Object})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="function">The delegate to invoke on each item in the structure.</param>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`6.Stepper(Towel.StepBreak{System.Object})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="function">The delegate to invoke on each item in the structure.</param>
            <returns>The resulting status of the iteration.</returns>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`6.Clone">
            <summary>Creates a shallow clone of this data structure.</summary>
            <returns>A shallow clone of this data structure.</returns>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`6.ToArray">
            <summary>Converts the structure into an array.</summary>
            <returns>An array containing all the item in the structure.</returns>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`6.GetHashCode">
            <summary>Default hashing function for the Towel.DataStructures.LinkStruct.</summary>
            <returns>The computed hash code.</returns>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`6.Equals(System.Object)">
            <summary>Default equals method for Towel.DataStructures.LinkStruct.</summary>
            <returns>Whether this object and the provided obj are value equal.</returns>
        </member>
        <member name="T:Towel.DataStructures.Link`7">
            <summary>Represents a link between objects.</summary>
            <typeparam name="T1">The type of #1 element in the link.</typeparam>
            <typeparam name="T2">The type of #2 element in the link.</typeparam>
            <typeparam name="T3">The type of #3 element in the link.</typeparam>
            <typeparam name="T4">The type of #4 element in the link.</typeparam>
            <typeparam name="T5">The type of #5 element in the link.</typeparam>
            <typeparam name="T6">The type of #6 element in the link.</typeparam>
            <typeparam name="T7">The type of #7 element in the link.</typeparam>
        </member>
        <member name="M:Towel.DataStructures.Link`7.#ctor(`0,`1,`2,`3,`4,`5,`6)">
            <summary>Creates a link between objects.</summary>
            <param name="_1">The #1 item to be linked.</param>
            <param name="_2">The #2 item to be linked.</param>
            <param name="_3">The #3 item to be linked.</param>
            <param name="_4">The #4 item to be linked.</param>
            <param name="_5">The #5 item to be linked.</param>
            <param name="_6">The #6 item to be linked.</param>
            <param name="_7">The #7 item to be linked.</param>
            <remarks>Runtime: O(1).</remarks>
        </member>
        <member name="P:Towel.DataStructures.Link`7.Size">
            <summary>The number of objects in the tuple.</summary>
        </member>
        <member name="P:Towel.DataStructures.Link`7._1">
            <summary>The #1 item in the link.</summary>
            <remarks>Runtime: O(1).</remarks>
        </member>
        <member name="P:Towel.DataStructures.Link`7._2">
            <summary>The #2 item in the link.</summary>
            <remarks>Runtime: O(1).</remarks>
        </member>
        <member name="P:Towel.DataStructures.Link`7._3">
            <summary>The #3 item in the link.</summary>
            <remarks>Runtime: O(1).</remarks>
        </member>
        <member name="P:Towel.DataStructures.Link`7._4">
            <summary>The #4 item in the link.</summary>
            <remarks>Runtime: O(1).</remarks>
        </member>
        <member name="P:Towel.DataStructures.Link`7._5">
            <summary>The #5 item in the link.</summary>
            <remarks>Runtime: O(1).</remarks>
        </member>
        <member name="P:Towel.DataStructures.Link`7._6">
            <summary>The #6 item in the link.</summary>
            <remarks>Runtime: O(1).</remarks>
        </member>
        <member name="P:Towel.DataStructures.Link`7._7">
            <summary>The #7 item in the link.</summary>
            <remarks>Runtime: O(1).</remarks>
        </member>
        <member name="M:Towel.DataStructures.Link`7.op_Explicit(System.ValueTuple{`0,`1,`2,`3,`4,`5,`6})~Towel.DataStructures.Link{`0,`1,`2,`3,`4,`5,`6}">
            <summary>Converts a System.ValueTuple to a Towel.DataStructures.Link of the same generic types.</summary>
            <param name="tuple">The System.ValueTuple to convert into a Towel.DataStructures.Link.</param>
            <returns>The resulting Towel.DataStructures.Link.</returns>
        </member>
        <member name="M:Towel.DataStructures.Link`7.op_Explicit(Towel.DataStructures.Link{`0,`1,`2,`3,`4,`5,`6})~System.ValueTuple{`0,`1,`2,`3,`4,`5,`6}">
            <summary>Converts a Towel.DataStructures.Link to a System.Tuple of the same generic types.</summary>
            <param name="link">The Towel.DataStructures.Link to convert into a System.ValueTuple.</param>
            <returns>The resulting System.ValueTuple.</returns>
        </member>
        <member name="M:Towel.DataStructures.Link`7.op_Explicit(System.Tuple{`0,`1,`2,`3,`4,`5,`6})~Towel.DataStructures.Link{`0,`1,`2,`3,`4,`5,`6}">
            <summary>Converts a System.Tuple to a Towel.DataStructures.Link of the same generic types.</summary>
            <param name="tuple">The System.Tuple to convert into a Towel.DataStructures.Link.</param>
            <returns>The resulting Towel.DataStructures.Link.</returns>
        </member>
        <member name="M:Towel.DataStructures.Link`7.op_Explicit(Towel.DataStructures.Link{`0,`1,`2,`3,`4,`5,`6})~System.Tuple{`0,`1,`2,`3,`4,`5,`6}">
            <summary>Converts a Towel.DataStructures.Link to a System.Tuple of the same generic types.</summary>
            <param name="link">The Towel.DataStructures.Link to convert into a System.Tuple.</param>
            <returns>The resulting System.Tuple.</returns>
        </member>
        <member name="M:Towel.DataStructures.Link`7.Types">
            <summary>Gets an array with all the types contained in this link in respective order.</summary>
            <returns>An array of all the types in this link in respective order.</returns>
        </member>
        <member name="M:Towel.DataStructures.Link`7.Contains(System.Object,Towel.Compare{System.Object})">
            <summary>Checks to see if a given object is in this data structure.</summary>
            <param name="item">The item to check for.</param>
            <param name="compare">Delegate representing comparison technique.</param>
            <returns>true if the item is in this structure; false if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.Link`7.Stepper(Towel.Step{System.Object})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="function">The delegate to invoke on each item in the structure.</param>
        </member>
        <member name="M:Towel.DataStructures.Link`7.Stepper(Towel.StepBreak{System.Object})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="function">The delegate to invoke on each item in the structure.</param>
            <returns>The resulting status of the iteration.</returns>
        </member>
        <member name="M:Towel.DataStructures.Link`7.Clone">
            <summary>Creates a shallow clone of this data structure.</summary>
            <returns>A shallow clone of this data structure.</returns>
        </member>
        <member name="M:Towel.DataStructures.Link`7.ToArray">
            <summary>Converts the structure into an array.</summary>
            <returns>An array containing all the item in the structure.</returns>
        </member>
        <member name="M:Towel.DataStructures.Link`7.GetHashCode">
            <summary>Default hashing function for the Towel.DataStructures.Link.</summary>
            <returns>The computed hash code.</returns>
        </member>
        <member name="M:Towel.DataStructures.Link`7.Equals(System.Object)">
            <summary>Default equals method for Towel.DataStructures.Link.</summary>
            <returns>Whether this object and the provided obj are value equal.</returns>
        </member>
        <member name="T:Towel.DataStructures.LinkStruct`7">
            <summary>Represents a link between objects.</summary>
            <typeparam name="T1">The type of #1 element in the link.</typeparam>
            <typeparam name="T2">The type of #2 element in the link.</typeparam>
            <typeparam name="T3">The type of #3 element in the link.</typeparam>
            <typeparam name="T4">The type of #4 element in the link.</typeparam>
            <typeparam name="T5">The type of #5 element in the link.</typeparam>
            <typeparam name="T6">The type of #6 element in the link.</typeparam>
            <typeparam name="T7">The type of #7 element in the link.</typeparam>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`7.#ctor(`0,`1,`2,`3,`4,`5,`6)">
            <summary>Creates a link between objects.</summary>
            <param name="_1">The #1 item to be linked.</param>
            <param name="_2">The #2 item to be linked.</param>
            <param name="_3">The #3 item to be linked.</param>
            <param name="_4">The #4 item to be linked.</param>
            <param name="_5">The #5 item to be linked.</param>
            <param name="_6">The #6 item to be linked.</param>
            <param name="_7">The #7 item to be linked.</param>
            <remarks>Runtime: O(1).</remarks>
        </member>
        <member name="P:Towel.DataStructures.LinkStruct`7.Size">
            <summary>The number of objects in the tuple.</summary>
        </member>
        <member name="P:Towel.DataStructures.LinkStruct`7._1">
            <summary>The #1 item in the link.</summary>
            <remarks>Runtime: O(1).</remarks>
        </member>
        <member name="P:Towel.DataStructures.LinkStruct`7._2">
            <summary>The #2 item in the link.</summary>
            <remarks>Runtime: O(1).</remarks>
        </member>
        <member name="P:Towel.DataStructures.LinkStruct`7._3">
            <summary>The #3 item in the link.</summary>
            <remarks>Runtime: O(1).</remarks>
        </member>
        <member name="P:Towel.DataStructures.LinkStruct`7._4">
            <summary>The #4 item in the link.</summary>
            <remarks>Runtime: O(1).</remarks>
        </member>
        <member name="P:Towel.DataStructures.LinkStruct`7._5">
            <summary>The #5 item in the link.</summary>
            <remarks>Runtime: O(1).</remarks>
        </member>
        <member name="P:Towel.DataStructures.LinkStruct`7._6">
            <summary>The #6 item in the link.</summary>
            <remarks>Runtime: O(1).</remarks>
        </member>
        <member name="P:Towel.DataStructures.LinkStruct`7._7">
            <summary>The #7 item in the link.</summary>
            <remarks>Runtime: O(1).</remarks>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`7.op_Explicit(System.ValueTuple{`0,`1,`2,`3,`4,`5,`6})~Towel.DataStructures.LinkStruct{`0,`1,`2,`3,`4,`5,`6}">
            <summary>Converts a System.ValueTuple to a Towel.DataStructures.LinkStruct of the same generic types.</summary>
            <param name="tuple">The System.ValueTuple to convert into a Towel.DataStructures.LinkStruct.</param>
            <returns>The resulting Towel.DataStructures.LinkStruct.</returns>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`7.op_Explicit(Towel.DataStructures.LinkStruct{`0,`1,`2,`3,`4,`5,`6})~System.ValueTuple{`0,`1,`2,`3,`4,`5,`6}">
            <summary>Converts a Towel.DataStructures.LinkStruct to a System.ValueTuple of the same generic types.</summary>
            <param name="link">The Towel.DataStructures.LinkStruct to convert into a System.ValueTuple.</param>
            <returns>The resulting System.ValueTuple.</returns>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`7.op_Explicit(System.Tuple{`0,`1,`2,`3,`4,`5,`6})~Towel.DataStructures.LinkStruct{`0,`1,`2,`3,`4,`5,`6}">
            <summary>Converts a System.Tuple to a Towel.DataStructures.LinkStruct of the same generic types.</summary>
            <param name="tuple">The System.Tuple to convert into a Towel.DataStructures.LinkStruct.</param>
            <returns>The resulting Towel.DataStructures.LinkStruct.</returns>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`7.op_Explicit(Towel.DataStructures.LinkStruct{`0,`1,`2,`3,`4,`5,`6})~System.Tuple{`0,`1,`2,`3,`4,`5,`6}">
            <summary>Converts a Towel.DataStructures.LinkStruct to a System.Tuple of the same generic types.</summary>
            <param name="link">The Towel.DataStructures.LinkStruct to convert into a System.Tuple.</param>
            <returns>The resulting System.Tuple.</returns>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`7.System#Collections#IEnumerable#GetEnumerator">
            <summary>FOR COMPATIBILITY ONLY. AVOID IF POSSIBLE.</summary>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`7.System#Collections#Generic#IEnumerable{System#Object}#GetEnumerator">
            <summary>FOR COMPATIBILITY ONLY. AVOID IF POSSIBLE.</summary>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`7.Types">
            <summary>Gets an array with all the types contained in this link in respective order.</summary>
            <returns>An array of all the types in this link in respective order.</returns>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`7.Contains(System.Object,Towel.Compare{System.Object})">
            <summary>Checks to see if a given object is in this data structure.</summary>
            <param name="item">The item to check for.</param>
            <param name="compare">Delegate representing comparison technique.</param>
            <returns>true if the item is in this structure; false if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`7.Stepper(Towel.Step{System.Object})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="function">The delegate to invoke on each item in the structure.</param>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`7.Stepper(Towel.StepBreak{System.Object})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="function">The delegate to invoke on each item in the structure.</param>
            <returns>The resulting status of the iteration.</returns>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`7.Clone">
            <summary>Creates a shallow clone of this data structure.</summary>
            <returns>A shallow clone of this data structure.</returns>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`7.ToArray">
            <summary>Converts the structure into an array.</summary>
            <returns>An array containing all the item in the structure.</returns>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`7.GetHashCode">
            <summary>Default hashing function for the Towel.DataStructures.LinkStruct.</summary>
            <returns>The computed hash code.</returns>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`7.Equals(System.Object)">
            <summary>Default equals method for Towel.DataStructures.LinkStruct.</summary>
            <returns>Whether this object and the provided obj are value equal.</returns>
        </member>
        <member name="T:Towel.DataStructures.IList`1">
            <summary>A primitive dynamic sized data structure.</summary>
            <typeparam name="T">The type of items to store in the list.</typeparam>
        </member>
        <member name="M:Towel.DataStructures.IList`1.Remove(System.Predicate{`0})">
            <summary>Removes the first occurence of an item in the list.</summary>
            <param name="predicate">The function to determine equality.</param>
        </member>
        <member name="M:Towel.DataStructures.IList`1.TryRemove(System.Predicate{`0})">
            <summary>Removes the first occurence of an item in the list or returns false.</summary>
            <param name="predicate">The function to determine equality.</param>
            <returns>True if the item was found and removed; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.IList`1.RemoveAll(System.Predicate{`0})">
            <summary>Removes all occurences of an item in the list.</summary>
            <param name="predicate">The function to determine equality.</param>
        </member>
        <member name="M:Towel.DataStructures.IList`1.RemoveAll(`0)">
            <summary>Removes all occurences of an item in the list.</summary>
            <param name="value">The value to remove all occurences of.</param>
        </member>
        <member name="T:Towel.DataStructures.ListLinked`1">
            <summary>Implements a growing, singularly-linked list data structure that inherits InterfaceTraversable.</summary>
            <typeparam name="T">The type of objects to be placed in the list.</typeparam>
            <remarks>The runtimes of each public member are included in the "remarks" xml tags.</remarks>
        </member>
        <member name="T:Towel.DataStructures.ListLinked`1.Node">
            <summary>This class just holds the data for each individual node of the list.</summary>
        </member>
        <member name="M:Towel.DataStructures.ListLinked`1.#ctor(Towel.Equate{`0})">
            <summary>Creates an instance of a AddableLinked.</summary>
            <param name="equate">The equate delegate to be used by the structure.</param>
            <runtime>θ(1)</runtime>
        </member>
        <member name="M:Towel.DataStructures.ListLinked`1.#ctor">
            <summary>Creates an instance of a AddableLinked.</summary>
            <runtime>θ(1)</runtime>
        </member>
        <member name="P:Towel.DataStructures.ListLinked`1.Count">
            <summary>Returns the number of items in the list.</summary>
            <runtime>θ(1)</runtime>
        </member>
        <member name="P:Towel.DataStructures.ListLinked`1.Equate">
            <summary>Returns the equate delegate being used by the structure.</summary>
            <runtime>θ(1)</runtime>
        </member>
        <member name="M:Towel.DataStructures.ListLinked`1.Add(`0)">
            <summary>Adds an item to the list.</summary>
            <param name="addition">The item to add to the list.</param>
            <remarks>Runtime: O(1).</remarks>
        </member>
        <member name="M:Towel.DataStructures.ListLinked`1.Clear">
            <summary>Resets the list to an empty state. WARNING could cause excessive garbage collection.</summary>
        </member>
        <member name="M:Towel.DataStructures.ListLinked`1.Clone">
            <summary>Creates a shallow clone of this data structure.</summary>
            <returns>A shallow clone of this data structure.</returns>
        </member>
        <member name="M:Towel.DataStructures.ListLinked`1.Remove(`0)">
            <summary>Removes the first equality by object reference.</summary>
            <param name="removal">The reference to the item to remove.</param>
        </member>
        <member name="M:Towel.DataStructures.ListLinked`1.Remove(System.Predicate{`0})">
            <summary>Removes the first equality by object reference.</summary>
            <param name="removal">The reference to the item to remove.</param>
        </member>
        <member name="M:Towel.DataStructures.ListLinked`1.RemoveAll(System.Predicate{`0})">
            <summary>Removes the first equality by object reference.</summary>
            <param name="removal">The reference to the item to remove.</param>
        </member>
        <member name="M:Towel.DataStructures.ListLinked`1.RemoveAll(`0)">
            <summary>Removes the first equality by object reference.</summary>
            <param name="value">The item to remove.</param>
        </member>
        <member name="M:Towel.DataStructures.ListLinked`1.TryRemove(System.Predicate{`0})">
            <summary>Removes the first equality by object reference.</summary>
            <param name="removal">The reference to the item to remove.</param>
            <returns>True if the item was removed; false if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.ListLinked`1.Stepper(Towel.Step{`0})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="function">The delegate to invoke on each item in the structure.</param>
        </member>
        <member name="M:Towel.DataStructures.ListLinked`1.Stepper(Towel.StepRef{`0})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="function">The delegate to invoke on each item in the structure.</param>
        </member>
        <member name="M:Towel.DataStructures.ListLinked`1.Stepper(Towel.StepBreak{`0})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="function">The delegate to invoke on each item in the structure.</param>
            <returns>The resulting status of the iteration.</returns>
        </member>
        <member name="M:Towel.DataStructures.ListLinked`1.Stepper(Towel.StepRefBreak{`0})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="function">The delegate to invoke on each item in the structure.</param>
            <returns>The resulting status of the iteration.</returns>
        </member>
        <member name="M:Towel.DataStructures.ListLinked`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>FOR COMPATIBILITY ONLY. AVOID IF POSSIBLE.</summary>
        </member>
        <member name="M:Towel.DataStructures.ListLinked`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>FOR COMPATIBILITY ONLY. AVOID IF POSSIBLE.</summary>
        </member>
        <member name="M:Towel.DataStructures.ListLinked`1.ToArray">
            <summary>Converts the list into a standard array.</summary>
            <returns>A standard array of all the items.</returns>
            <remarks>Runtime: Towel(n).</remarks>
        </member>
        <member name="T:Towel.DataStructures.ListArray`1">
            <summary>A list implemented as a growing array.</summary>
            <typeparam name="T">The type of objects to be placed in the list.</typeparam>
            <remarks>The runtimes of each public member are included in the "remarks" xml tags.</remarks>
        </member>
        <member name="M:Towel.DataStructures.ListArray`1.#ctor">
            <summary>Creates an instance of a ListArray, and sets it's minimum capacity.</summary>
            <remarks>Runtime: O(1).</remarks>
        </member>
        <member name="M:Towel.DataStructures.ListArray`1.#ctor(System.Int32)">
            <summary>Creates an instance of a ListArray, and sets it's minimum capacity.</summary>
            <param name="minimumCapacity">The initial and smallest array size allowed by this list.</param>
            <remarks>Runtime: O(1).</remarks>
        </member>
        <member name="M:Towel.DataStructures.ListArray`1.#ctor(System.Int32,Towel.Equate{`0})">
            <summary>Creates an instance of a ListArray, and sets it's minimum capacity.</summary>
            <param name="expectedCount">The initial and smallest array size allowed by this list.</param>
            <remarks>Runtime: O(1).</remarks>
        </member>
        <member name="P:Towel.DataStructures.ListArray`1.Item(System.Int32)">
            <summary>Look-up and set an indexed item in the list.</summary>
            <param name="index">The index of the item to get or set.</param>
            <returns>The value at the given index.</returns>
        </member>
        <member name="P:Towel.DataStructures.ListArray`1.Count">
            <summary>Gets the number of items in the list.</summary>
            <remarks>Runtime: O(1).</remarks>
        </member>
        <member name="P:Towel.DataStructures.ListArray`1.CurrentCapacity">
            <summary>Gets the current capacity of the list.</summary>
            <remarks>Runtime: O(1).</remarks>
        </member>
        <member name="M:Towel.DataStructures.ListArray`1.Add(`0)">
            <summary>Adds an item to the end of the list.</summary>
            <param name="addition">The item to be added.</param>
            <runtime>O(n) Ω(1) ε(1)</runtime>
        </member>
        <member name="M:Towel.DataStructures.ListArray`1.Add(`0,System.Int32)">
            <summary>Adds an item at a given index.</summary>
            <param name="addition">The item to be added.</param>
            <param name="index">The index to add the item at.</param>
        </member>
        <member name="M:Towel.DataStructures.ListArray`1.Clear">
            <summary>Empties the list back and reduces it back to its original capacity.</summary>
            <remarks>Runtime: O(1).</remarks>
        </member>
        <member name="M:Towel.DataStructures.ListArray`1.Clone">
            <summary>Creates a shallow clone of this data structure.</summary>
            <returns>A shallow clone of this data structure.</returns>
        </member>
        <member name="M:Towel.DataStructures.ListArray`1.Remove(System.Int32)">
            <summary>Removes the item at a specific index.</summary>
            <param name="index">The index of the item to be removed.</param>
            <remarks>Runtime: Towel(n - index).</remarks>
        </member>
        <member name="M:Towel.DataStructures.ListArray`1.RemoveWithoutShrink(System.Int32)">
            <summary>Removes the item at a specific index.</summary>
            <param name="index">The index of the item to be removed.</param>
            <remarks>Runtime: Towel(n - index).</remarks>
        </member>
        <member name="M:Towel.DataStructures.ListArray`1.RemoveAll(System.Predicate{`0})">
            <summary>Removes all occurences of a given item.</summary>
            <param name="item">The itme to genocide.</param>
            <remarks>Runtime: Towel(n).</remarks>
        </member>
        <member name="M:Towel.DataStructures.ListArray`1.RemoveAll(`0)">
            <summary>Removes all occurences of a given item.</summary>
            <param name="item">The itme to genocide.</param>
            <remarks>Runtime: Towel(n).</remarks>
        </member>
        <member name="M:Towel.DataStructures.ListArray`1.RemoveAllWithoutShrink(System.Predicate{`0})">
            <summary>Removes all occurences of a given item.</summary>
            <param name="item">The itme to genocide.</param>
            <remarks>Runtime: Towel(n).</remarks>
        </member>
        <member name="M:Towel.DataStructures.ListArray`1.Remove(`0)">
            <summary>Removes the item at a specific index.</summary>
            <param name="compare">The technique of determining equality.</param>
            <remarks>Runtime: Towel(n).</remarks>
        </member>
        <member name="M:Towel.DataStructures.ListArray`1.RemoveWithoutShrink(`0)">
            <summary>Removes the item at a specific index.</summary>
            <param name="compare">The technique of determining equality.</param>
            <remarks>Runtime: Towel(n).</remarks>
        </member>
        <member name="M:Towel.DataStructures.ListArray`1.Remove(System.Predicate{`0})">
            <summary>Removes the item at a specific index.</summary>
            <param name="compare">The technique of determining equality.</param>
            <remarks>Runtime: Towel(n).</remarks>
        </member>
        <member name="M:Towel.DataStructures.ListArray`1.RemoveWithoutShrink(System.Predicate{`0})">
            <summary>Removes the item at a specific index.</summary>
            <param name="compare">The technique of determining equality.</param>
            <remarks>Runtime: Towel(n).</remarks>
        </member>
        <member name="M:Towel.DataStructures.ListArray`1.TryRemove(System.Predicate{`0})">
            <summary>Removes the item at a specific index.</summary>
            <param name="compare">The technique of determining equality.</param>
            <returns>True if the item was found and removed; false if not.</returns>
            <remarks>Runtime: Towel(n).</remarks>
        </member>
        <member name="M:Towel.DataStructures.ListArray`1.Remove_private(System.Int32)">
            <summary>Removes the item at a specific index.</summary>
            <param name="index">The index of the item to be removed.</param>
            <remarks>Runtime: Towel(n - index).</remarks>
        </member>
        <member name="M:Towel.DataStructures.ListArray`1.Stepper(Towel.Step{`0})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="step_function">The delegate to invoke on each item in the structure.</param>
        </member>
        <member name="M:Towel.DataStructures.ListArray`1.Stepper(Towel.StepRef{`0})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="step_function">The delegate to invoke on each item in the structure.</param>
        </member>
        <member name="M:Towel.DataStructures.ListArray`1.Stepper(Towel.StepBreak{`0})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="step_function">The delegate to invoke on each item in the structure.</param>
            <returns>The resulting status of the iteration.</returns>
        </member>
        <member name="M:Towel.DataStructures.ListArray`1.Stepper(Towel.StepRefBreak{`0})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="step_function">The delegate to invoke on each item in the structure.</param>
            <returns>The resulting status of the iteration.</returns>
        </member>
        <member name="M:Towel.DataStructures.ListArray`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>FOR COMPATIBILITY ONLY. AVOID IF POSSIBLE.</summary>
        </member>
        <member name="M:Towel.DataStructures.ListArray`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>FOR COMPATIBILITY ONLY. AVOID IF POSSIBLE.</summary>
        </member>
        <member name="M:Towel.DataStructures.ListArray`1.ToArray">
            <summary>Converts the list array into a standard array.</summary>
            <returns>A standard array of all the elements.</returns>
        </member>
        <member name="M:Towel.DataStructures.ListArray`1.Trim">
            <summary>Resizes this allocation to the current count.</summary>
        </member>
        <member name="T:Towel.DataStructures.IMap`2">
            <summary>A map between instances of two types. The polymorphism base for Map implementations in Towel.</summary>
            <typeparam name="T">The generic type to be stored in this data structure.</typeparam>
            <typeparam name="K">The type of keys used to look up items in this structure.</typeparam>
        </member>
        <member name="P:Towel.DataStructures.IMap`2.Item(`1)">
            <summary>Allows indexed look-up of the structure. (Set does not replace the Add() method)</summary>
            <param name="key">The "index" to access of the structure.</param>
            <returns>The value at the index of the requested key.</returns>
        </member>
        <member name="M:Towel.DataStructures.IMap`2.Get(`1)">
            <summary>Gets an item by key.</summary>
            <param name="key">The key of the pair to get.</param>
            <returns>The by the provided key.</returns>
        </member>
        <member name="M:Towel.DataStructures.IMap`2.Set(`1,`0)">
            <summary>Gets an item by key.</summary>
            <param name="key">The key of the pair to set.</param>
            <param name="value">The value of the pair to set.</param>
            <returns>The by the provided key.</returns>
        </member>
        <member name="M:Towel.DataStructures.IMap`2.Add(`1,`0)">
            <summary>Adds a value to the hash table.</summary>
            <param name="key">The key to use as the look-up reference in the hash table.</param>
            <param name="value">The value to store in the hash table.</param>
        </member>
        <member name="M:Towel.DataStructures.IMap`2.Keys(Towel.Step{`1})">
            <summary>Steps through all the keys.</summary>
            <param name="step_function">The step function.</param>
        </member>
        <member name="M:Towel.DataStructures.IMap`2.Keys(Towel.StepBreak{`1})">
            <summary>Steps through all the keys.</summary>
            <param name="step_function">The step function.</param>
        </member>
        <member name="M:Towel.DataStructures.IMap`2.Pairs(Towel.Step{Towel.DataStructures.Link{`0,`1}})">
            <summary>Steps through all the pairs.</summary>
            <param name="step_function">The step function.</param>
        </member>
        <member name="M:Towel.DataStructures.IMap`2.Pairs(Towel.StepBreak{Towel.DataStructures.Link{`0,`1}})">
            <summary>Steps through all the pairs.</summary>
            <param name="step_function">The step function.</param>
        </member>
        <member name="T:Towel.DataStructures.Map">
            <summary>Static Extension class for Map interface implementers.</summary>
        </member>
        <member name="M:Towel.DataStructures.Map.TryGet``2(Towel.DataStructures.IMap{``0,``1},``1,``0@)">
            <summary>Wrapper for the "Get" method to help with exceptions.</summary>
            <typeparam name="T">The generic value type of the structure.</typeparam>
            <typeparam name="K">The generic key type of the structure.</typeparam>
            <param name="map">The map data structure.</param>
            <param name="key">The key to get the value of.</param>
            <param name="item">The value relative to the key if exists.</param>
            <returns>True if the value was found. False if not.</returns>
        </member>
        <member name="T:Towel.DataStructures.MapHashLinked`2">
            <summary>An unsorted structure of unique items.</summary>
            <typeparam name="T">The generic type of the structure.</typeparam>
            <typeparam name="K">The generic key type of this map.</typeparam>
        </member>
        <member name="M:Towel.DataStructures.MapHashLinked`2.#ctor">
            <summary>Constructs a new hash table instance.</summary>
            <remarks>Runtime: O(1).</remarks>
        </member>
        <member name="M:Towel.DataStructures.MapHashLinked`2.#ctor(System.Int32)">
            <summary>Constructs a new hash table instance.</summary>
            <remarks>Runtime: O(1).</remarks>
        </member>
        <member name="M:Towel.DataStructures.MapHashLinked`2.#ctor(Towel.Equate{`1},Towel.Hash{`1})">
            <summary>Constructs a new hash table instance.</summary>
            <remarks>Runtime: O(1).</remarks>
        </member>
        <member name="M:Towel.DataStructures.MapHashLinked`2.#ctor(Towel.Equate{`1},Towel.Hash{`1},System.Int32)">
            <summary>Constructs a new hash table instance.</summary>
            <remarks>Runtime: O(stepper).</remarks>
        </member>
        <member name="P:Towel.DataStructures.MapHashLinked`2.Item(`1)">
            <summary>Gets the value of the specified key.</summary>
            <param name="key">The key to get the value of.</param>
            <returns>The value relative to the provided key.</returns>
        </member>
        <member name="P:Towel.DataStructures.MapHashLinked`2.TableSize">
            <summary>Returns the current size of the actual table. You will want this if you 
            wish to multithread structure traversals.</summary>
            <remarks>Runtime: O(1).</remarks>
        </member>
        <member name="P:Towel.DataStructures.MapHashLinked`2.Count">
            <summary>Returns the current number of items in the structure.</summary>
            <remarks>Runetime: O(1).</remarks>
        </member>
        <member name="P:Towel.DataStructures.MapHashLinked`2.Hash">
            <summary>The function for calculating hash codes for this table.</summary>
        </member>
        <member name="P:Towel.DataStructures.MapHashLinked`2.Equate">
            <summary>The function for equating keys in this table.</summary>
        </member>
        <member name="M:Towel.DataStructures.MapHashLinked`2.Add(`1,`0)">
            <summary>Adds a value to the hash table.</summary>
            <param name="key">The key value to use as the look-up reference in the hash table.</param>
            <param name="value">The value to store relative to the key.</param>
            <remarks>Runtime: O(n), Omega(1).</remarks>
        </member>
        <member name="M:Towel.DataStructures.MapHashLinked`2.Clear">
            <summary>Returns the data structure to an empty state.</summary>
        </member>
        <member name="M:Towel.DataStructures.MapHashLinked`2.Clone">
            <summary>Creates a shallow clone of this data structure.</summary>
            <returns>A shallow clone of this data structure.</returns>
        </member>
        <member name="M:Towel.DataStructures.MapHashLinked`2.Contains(`1)">
            <summary>Determines if this structure contains a given key.</summary>
            <param name="key">The key to see if theis structure contains.</param>
            <returns>True if the key is in the structure. False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.MapHashLinked`2.Get(`1)">
            <summary>Gets an item by key.</summary>
            <param name="key">The key of the item to get.</param>
            <returns>The by the provided key.</returns>
        </member>
        <member name="M:Towel.DataStructures.MapHashLinked`2.Set(`1,`0)">
            <summary>Sets an item by key.</summary>
            <param name="key">The key of the item to set.</param>
            <param name="value">The value to set relative to the key.</param>
        </member>
        <member name="M:Towel.DataStructures.MapHashLinked`2.Remove(`1)">
            <summary>Removes a value from the hash table.</summary>
            <param name="key">The key of the value to remove.</param>
            <remarks>Runtime: N/A. (I'm still editing this structure)</remarks>
        </member>
        <member name="M:Towel.DataStructures.MapHashLinked`2.RemoveWithoutTrim(`1)">
            <summary>Removes a value from the hash table.</summary>
            <param name="key">The key of the value to remove.</param>
            <remarks>Runtime: N/A. (I'm still editing this structure)</remarks>
        </member>
        <member name="M:Towel.DataStructures.MapHashLinked`2.Remove_private(`1)">
            <summary>Removes a value from the hash table.</summary>
            <param name="key">The key of the value to remove.</param>
            <remarks>Runtime: N/A. (I'm still editing this structure)</remarks>
        </member>
        <member name="M:Towel.DataStructures.MapHashLinked`2.Keys(Towel.Step{`1})">
            <summary>Steps through all the keys.</summary>
            <param name="function">The step function.</param>
        </member>
        <member name="M:Towel.DataStructures.MapHashLinked`2.Keys(Towel.StepBreak{`1})">
            <summary>Steps through all the keys.</summary>
            <param name="function">The step function.</param>
        </member>
        <member name="M:Towel.DataStructures.MapHashLinked`2.Stepper(Towel.Step{`0})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="function">The delegate to invoke on each item in the structure.</param>
        </member>
        <member name="M:Towel.DataStructures.MapHashLinked`2.Stepper(Towel.StepBreak{`0})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="function">The delegate to invoke on each item in the structure.</param>
            <returns>The resulting status of the iteration.</returns>
        </member>
        <member name="M:Towel.DataStructures.MapHashLinked`2.Pairs(Towel.Step{Towel.DataStructures.Link{`0,`1}})">
            <summary>Steps through all the pairs.</summary>
            <param name="function">The step function.</param>
        </member>
        <member name="M:Towel.DataStructures.MapHashLinked`2.Pairs(Towel.StepBreak{Towel.DataStructures.Link{`0,`1}})">
            <summary>Steps through all the pairs.</summary>
            <param name="function">The step function.</param>
        </member>
        <member name="M:Towel.DataStructures.MapHashLinked`2.GetEnumerator">
            <summary>Gets the enumerator for the data structure.</summary>
            <returns>The enumerator for the data structure.</returns>
        </member>
        <member name="M:Towel.DataStructures.MapHashLinked`2.ToArray">
            <summary>Places all the values of the data structure into an array.</summary>
            <returns>An array with all the values in the data structure.</returns>
        </member>
        <member name="M:Towel.DataStructures.MapHashLinked`2.Trim">
            <summary>Trims the map table size to the first prime number following the current count.</summary>
        </member>
        <member name="T:Towel.DataStructures.MapHashArray`2">
            <summary>An unsorted structure of unique items.</summary>
            <typeparam name="T">The generic type of the structure.</typeparam>
            <typeparam name="K">The generic key type of this map.</typeparam>
        </member>
        <member name="M:Towel.DataStructures.MapHashArray`2.#ctor">
            <summary>Constructs a new MapHashArray using the default Equate and Hash functions.</summary>
        </member>
        <member name="M:Towel.DataStructures.MapHashArray`2.#ctor(Towel.Equate{`1},Towel.Hash{`1})">
            <summary>Constructs a new hash table instance.</summary>
            <runtime>O(1)</runtime>
        </member>
        <member name="P:Towel.DataStructures.MapHashArray`2.Item(`1)">
            <summary>Gets/Sets the value relative to a key.</summary>
            <param name="key">The key to get/set teh value of.</param>
            <returns>The value relative to the provided key.</returns>
        </member>
        <member name="P:Towel.DataStructures.MapHashArray`2.TableSize">
            <summary>Returns the current size of the actual table. You will want this if you 
            wish to multithread structure traversals.</summary>
            <remarks>Runtime: O(1).</remarks>
        </member>
        <member name="P:Towel.DataStructures.MapHashArray`2.Count">
            <summary>Returns the current number of items in the structure.</summary>
            <remarks>Runetime: O(1).</remarks>
        </member>
        <member name="P:Towel.DataStructures.MapHashArray`2.Hash">
            <summary>The function for calculating hash codes for this table.</summary>
        </member>
        <member name="P:Towel.DataStructures.MapHashArray`2.Equate">
            <summary>The function for equating keys in this table.</summary>
        </member>
        <member name="M:Towel.DataStructures.MapHashArray`2.Add(`1,`0)">
            <summary>Adds a key value pair to the map.</summary>
            <param name="key">The key of the pair to add.</param>
            <param name="value">The value of the pair to add.</param>
        </member>
        <member name="M:Towel.DataStructures.MapHashArray`2.Clear">
            <summary>Returns the data structure to an empty state.</summary>
        </member>
        <member name="M:Towel.DataStructures.MapHashArray`2.ClearWithoutShrink">
            <summary>Returns the data structure to an empty state.</summary>
        </member>
        <member name="M:Towel.DataStructures.MapHashArray`2.Contains(`1)">
            <summary>Checks if a key exists in the map.</summary>
            <param name="key">The key to look for.</param>
            <returns>True if the key exists in the map. False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.MapHashArray`2.Get(`1)">
            <summary>Gets an item by key.</summary>
            <param name="key">The key of the item to get.</param>
            <returns>The by the provided key.</returns>
        </member>
        <member name="M:Towel.DataStructures.MapHashArray`2.Set(`1,`0)">
            <summary>Sets the value of a given key in the map.</summary>
            <param name="key">The key to set the value of in the map.</param>
            <param name="value">The value to set relative to the key in the map.</param>
        </member>
        <member name="M:Towel.DataStructures.MapHashArray`2.Remove(`1)">
            <summary>Removes a pair from the map.</summary>
            <param name="removal">The key of the pair to remove from the map.</param>
        </member>
        <member name="M:Towel.DataStructures.MapHashArray`2.RemoveWithoutShrink(`1)">
            <summary>Removes a pair from the map without triggering a shrink in the data structure.</summary>
            <param name="removal">The key of the pair to remove from the map.</param>
        </member>
        <member name="M:Towel.DataStructures.MapHashArray`2.ToArray">
            <summary>Puts all the values of this structure into an array.</summary>
            <returns>An array with all the values of this structure.</returns>
        </member>
        <member name="M:Towel.DataStructures.MapHashArray`2.Trim">
            <summary>Trims the data structure to only the necessary size.</summary>
        </member>
        <member name="M:Towel.DataStructures.MapHashArray`2.Keys(Towel.Step{`1})">
            <summary>Steps through all the keys.</summary>
            <param name="function">The step function.</param>
        </member>
        <member name="M:Towel.DataStructures.MapHashArray`2.Keys(Towel.StepBreak{`1})">
            <summary>Steps through all the keys.</summary>
            <param name="step">The step function.</param>
        </member>
        <member name="M:Towel.DataStructures.MapHashArray`2.Stepper(Towel.Step{`0})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="function">The delegate to invoke on each item in the structure.</param>
        </member>
        <member name="M:Towel.DataStructures.MapHashArray`2.Stepper(Towel.StepBreak{`0})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="function">The delegate to invoke on each item in the structure.</param>
            <returns>The resulting status of the iteration.</returns>
        </member>
        <member name="M:Towel.DataStructures.MapHashArray`2.Pairs(Towel.Step{Towel.DataStructures.Link{`0,`1}})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="step">The delegate to invoke on each item in the structure.</param>
        </member>
        <member name="M:Towel.DataStructures.MapHashArray`2.Pairs(Towel.StepBreak{Towel.DataStructures.Link{`0,`1}})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="step">The delegate to invoke on each item in the structure.</param>
            <returns>The resulting status of the iteration.</returns>
        </member>
        <member name="M:Towel.DataStructures.MapHashArray`2.GetEnumerator">
            <summary>Gets the enumerator for the data structure.</summary>
            <returns>The enumerator for the data structure.</returns>
        </member>
        <member name="T:Towel.DataStructures.Omnitree">
            <summary>Contains the necessary type definitions for the various omnitree types.</summary>
            <summary>Contains the necessary type definitions for the various omnitree types.</summary>
        </member>
        <member name="F:Towel.DataStructures.Omnitree.Vector`1.Axis1">
            <summary>The value along axis 1.</summary>
        </member>
        <member name="P:Towel.DataStructures.Omnitree.Vector`1.Default">
            <summary>Returns a vector with defaulted values.</summary>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.Vector`1.#ctor(`0)">
            <summary>A location along each axis.</summary>
            <param name="axis1">The location along axis 1.</param>
        </member>
        <member name="P:Towel.DataStructures.Omnitree.Bounds`1.None">
            <summary>Extends infinitely along each axis.</summary>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.Bounds`1.#ctor(Towel.DataStructures.Omnitree.Bound{`0},Towel.DataStructures.Omnitree.Bound{`0})">
            <summary>A set of values denoting a range (or lack of range) along each axis.</summary>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.InclusionCheck``1(Towel.DataStructures.Omnitree.Bounds{``0},Towel.DataStructures.Omnitree.Bounds{``0},Towel.Compare{``0})">
            <summary>Checks a node for inclusion (overlap) between two bounds.</summary>
            <returns>True if the spaces overlap; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.EncapsulationCheck``1(Towel.DataStructures.Omnitree.Bounds{``0},Towel.DataStructures.Omnitree.Vector{``0},Towel.Compare{``0})">
            <summary>Checks if a space encapsulates a point.</summary>
            <returns>True if the space encapsulates the point; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.EncapsulationCheck``1(Towel.DataStructures.Omnitree.Bounds{``0},Towel.DataStructures.Omnitree.Bounds{``0},Towel.Compare{``0})">
            <summary>Checks if a space (left) encapsulates another space (right).</summary>
            <returns>True if the left space encapsulates the right; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.EqualsCheck``1(Towel.DataStructures.Omnitree.Vector{``0},Towel.DataStructures.Omnitree.Vector{``0},Towel.Equate{``0})">
            <summary>Checks for equality between two locations.</summary>
            <returns>True if equal; False if not;</returns>
        </member>
        <member name="F:Towel.DataStructures.Omnitree.Vector`2.Axis1">
            <summary>The value along axis 1.</summary>
        </member>
        <member name="F:Towel.DataStructures.Omnitree.Vector`2.Axis2">
            <summary>The value along axis 2.</summary>
        </member>
        <member name="P:Towel.DataStructures.Omnitree.Vector`2.Default">
            <summary>Returns a vector with defaulted values.</summary>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.Vector`2.#ctor(`0,`1)">
            <summary>A location along each axis.</summary>
            <param name="axis1">The location along axis 1.</param>
            <param name="axis2">The location along axis 2.</param>
        </member>
        <member name="P:Towel.DataStructures.Omnitree.Bounds`2.None">
            <summary>Extends infinitely along each axis.</summary>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.Bounds`2.#ctor(Towel.DataStructures.Omnitree.Bound{`0},Towel.DataStructures.Omnitree.Bound{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1})">
            <summary>A set of values denoting a range (or lack of range) along each axis.</summary>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.InclusionCheck``2(Towel.DataStructures.Omnitree.Bounds{``0,``1},Towel.DataStructures.Omnitree.Bounds{``0,``1},Towel.Compare{``0},Towel.Compare{``1})">
            <summary>Checks a node for inclusion (overlap) between two bounds.</summary>
            <returns>True if the spaces overlap; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.EncapsulationCheck``2(Towel.DataStructures.Omnitree.Bounds{``0,``1},Towel.DataStructures.Omnitree.Vector{``0,``1},Towel.Compare{``0},Towel.Compare{``1})">
            <summary>Checks if a space encapsulates a point.</summary>
            <returns>True if the space encapsulates the point; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.EncapsulationCheck``2(Towel.DataStructures.Omnitree.Bounds{``0,``1},Towel.DataStructures.Omnitree.Bounds{``0,``1},Towel.Compare{``0},Towel.Compare{``1})">
            <summary>Checks if a space (left) encapsulates another space (right).</summary>
            <returns>True if the left space encapsulates the right; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.EqualsCheck``2(Towel.DataStructures.Omnitree.Vector{``0,``1},Towel.DataStructures.Omnitree.Vector{``0,``1},Towel.Equate{``0},Towel.Equate{``1})">
            <summary>Checks for equality between two locations.</summary>
            <returns>True if equal; False if not;</returns>
        </member>
        <member name="F:Towel.DataStructures.Omnitree.Vector`3.Axis1">
            <summary>The value along axis 1.</summary>
        </member>
        <member name="F:Towel.DataStructures.Omnitree.Vector`3.Axis2">
            <summary>The value along axis 2.</summary>
        </member>
        <member name="F:Towel.DataStructures.Omnitree.Vector`3.Axis3">
            <summary>The value along axis 3.</summary>
        </member>
        <member name="P:Towel.DataStructures.Omnitree.Vector`3.Default">
            <summary>Returns a vector with defaulted values.</summary>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.Vector`3.#ctor(`0,`1,`2)">
            <summary>A location along each axis.</summary>
            <param name="axis1">The location along axis 1.</param>
            <param name="axis2">The location along axis 2.</param>
            <param name="axis3">The location along axis 3.</param>
        </member>
        <member name="P:Towel.DataStructures.Omnitree.Bounds`3.None">
            <summary>Extends infinitely along each axis.</summary>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.Bounds`3.#ctor(Towel.DataStructures.Omnitree.Bound{`0},Towel.DataStructures.Omnitree.Bound{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2})">
            <summary>A set of values denoting a range (or lack of range) along each axis.</summary>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.InclusionCheck``3(Towel.DataStructures.Omnitree.Bounds{``0,``1,``2},Towel.DataStructures.Omnitree.Bounds{``0,``1,``2},Towel.Compare{``0},Towel.Compare{``1},Towel.Compare{``2})">
            <summary>Checks a node for inclusion (overlap) between two bounds.</summary>
            <returns>True if the spaces overlap; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.EncapsulationCheck``3(Towel.DataStructures.Omnitree.Bounds{``0,``1,``2},Towel.DataStructures.Omnitree.Vector{``0,``1,``2},Towel.Compare{``0},Towel.Compare{``1},Towel.Compare{``2})">
            <summary>Checks if a space encapsulates a point.</summary>
            <returns>True if the space encapsulates the point; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.EncapsulationCheck``3(Towel.DataStructures.Omnitree.Bounds{``0,``1,``2},Towel.DataStructures.Omnitree.Bounds{``0,``1,``2},Towel.Compare{``0},Towel.Compare{``1},Towel.Compare{``2})">
            <summary>Checks if a space (left) encapsulates another space (right).</summary>
            <returns>True if the left space encapsulates the right; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.EqualsCheck``3(Towel.DataStructures.Omnitree.Vector{``0,``1,``2},Towel.DataStructures.Omnitree.Vector{``0,``1,``2},Towel.Equate{``0},Towel.Equate{``1},Towel.Equate{``2})">
            <summary>Checks for equality between two locations.</summary>
            <returns>True if equal; False if not;</returns>
        </member>
        <member name="F:Towel.DataStructures.Omnitree.Vector`4.Axis1">
            <summary>The value along axis 1.</summary>
        </member>
        <member name="F:Towel.DataStructures.Omnitree.Vector`4.Axis2">
            <summary>The value along axis 2.</summary>
        </member>
        <member name="F:Towel.DataStructures.Omnitree.Vector`4.Axis3">
            <summary>The value along axis 3.</summary>
        </member>
        <member name="F:Towel.DataStructures.Omnitree.Vector`4.Axis4">
            <summary>The value along axis 4.</summary>
        </member>
        <member name="P:Towel.DataStructures.Omnitree.Vector`4.Default">
            <summary>Returns a vector with defaulted values.</summary>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.Vector`4.#ctor(`0,`1,`2,`3)">
            <summary>A location along each axis.</summary>
            <param name="axis1">The location along axis 1.</param>
            <param name="axis2">The location along axis 2.</param>
            <param name="axis3">The location along axis 3.</param>
            <param name="axis4">The location along axis 4.</param>
        </member>
        <member name="P:Towel.DataStructures.Omnitree.Bounds`4.None">
            <summary>Extends infinitely along each axis.</summary>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.Bounds`4.#ctor(Towel.DataStructures.Omnitree.Bound{`0},Towel.DataStructures.Omnitree.Bound{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3})">
            <summary>A set of values denoting a range (or lack of range) along each axis.</summary>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.InclusionCheck``4(Towel.DataStructures.Omnitree.Bounds{``0,``1,``2,``3},Towel.DataStructures.Omnitree.Bounds{``0,``1,``2,``3},Towel.Compare{``0},Towel.Compare{``1},Towel.Compare{``2},Towel.Compare{``3})">
            <summary>Checks a node for inclusion (overlap) between two bounds.</summary>
            <returns>True if the spaces overlap; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.EncapsulationCheck``4(Towel.DataStructures.Omnitree.Bounds{``0,``1,``2,``3},Towel.DataStructures.Omnitree.Vector{``0,``1,``2,``3},Towel.Compare{``0},Towel.Compare{``1},Towel.Compare{``2},Towel.Compare{``3})">
            <summary>Checks if a space encapsulates a point.</summary>
            <returns>True if the space encapsulates the point; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.EncapsulationCheck``4(Towel.DataStructures.Omnitree.Bounds{``0,``1,``2,``3},Towel.DataStructures.Omnitree.Bounds{``0,``1,``2,``3},Towel.Compare{``0},Towel.Compare{``1},Towel.Compare{``2},Towel.Compare{``3})">
            <summary>Checks if a space (left) encapsulates another space (right).</summary>
            <returns>True if the left space encapsulates the right; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.EqualsCheck``4(Towel.DataStructures.Omnitree.Vector{``0,``1,``2,``3},Towel.DataStructures.Omnitree.Vector{``0,``1,``2,``3},Towel.Equate{``0},Towel.Equate{``1},Towel.Equate{``2},Towel.Equate{``3})">
            <summary>Checks for equality between two locations.</summary>
            <returns>True if equal; False if not;</returns>
        </member>
        <member name="F:Towel.DataStructures.Omnitree.Vector`5.Axis1">
            <summary>The value along axis 1.</summary>
        </member>
        <member name="F:Towel.DataStructures.Omnitree.Vector`5.Axis2">
            <summary>The value along axis 2.</summary>
        </member>
        <member name="F:Towel.DataStructures.Omnitree.Vector`5.Axis3">
            <summary>The value along axis 3.</summary>
        </member>
        <member name="F:Towel.DataStructures.Omnitree.Vector`5.Axis4">
            <summary>The value along axis 4.</summary>
        </member>
        <member name="F:Towel.DataStructures.Omnitree.Vector`5.Axis5">
            <summary>The value along axis 5.</summary>
        </member>
        <member name="P:Towel.DataStructures.Omnitree.Vector`5.Default">
            <summary>Returns a vector with defaulted values.</summary>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.Vector`5.#ctor(`0,`1,`2,`3,`4)">
            <summary>A location along each axis.</summary>
            <param name="axis1">The location along axis 1.</param>
            <param name="axis2">The location along axis 2.</param>
            <param name="axis3">The location along axis 3.</param>
            <param name="axis4">The location along axis 4.</param>
            <param name="axis5">The location along axis 5.</param>
        </member>
        <member name="P:Towel.DataStructures.Omnitree.Bounds`5.None">
            <summary>Extends infinitely along each axis.</summary>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.Bounds`5.#ctor(Towel.DataStructures.Omnitree.Bound{`0},Towel.DataStructures.Omnitree.Bound{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4})">
            <summary>A set of values denoting a range (or lack of range) along each axis.</summary>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.InclusionCheck``5(Towel.DataStructures.Omnitree.Bounds{``0,``1,``2,``3,``4},Towel.DataStructures.Omnitree.Bounds{``0,``1,``2,``3,``4},Towel.Compare{``0},Towel.Compare{``1},Towel.Compare{``2},Towel.Compare{``3},Towel.Compare{``4})">
            <summary>Checks a node for inclusion (overlap) between two bounds.</summary>
            <returns>True if the spaces overlap; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.EncapsulationCheck``5(Towel.DataStructures.Omnitree.Bounds{``0,``1,``2,``3,``4},Towel.DataStructures.Omnitree.Vector{``0,``1,``2,``3,``4},Towel.Compare{``0},Towel.Compare{``1},Towel.Compare{``2},Towel.Compare{``3},Towel.Compare{``4})">
            <summary>Checks if a space encapsulates a point.</summary>
            <returns>True if the space encapsulates the point; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.EncapsulationCheck``5(Towel.DataStructures.Omnitree.Bounds{``0,``1,``2,``3,``4},Towel.DataStructures.Omnitree.Bounds{``0,``1,``2,``3,``4},Towel.Compare{``0},Towel.Compare{``1},Towel.Compare{``2},Towel.Compare{``3},Towel.Compare{``4})">
            <summary>Checks if a space (left) encapsulates another space (right).</summary>
            <returns>True if the left space encapsulates the right; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.EqualsCheck``5(Towel.DataStructures.Omnitree.Vector{``0,``1,``2,``3,``4},Towel.DataStructures.Omnitree.Vector{``0,``1,``2,``3,``4},Towel.Equate{``0},Towel.Equate{``1},Towel.Equate{``2},Towel.Equate{``3},Towel.Equate{``4})">
            <summary>Checks for equality between two locations.</summary>
            <returns>True if equal; False if not;</returns>
        </member>
        <member name="F:Towel.DataStructures.Omnitree.Vector`6.Axis1">
            <summary>The value along axis 1.</summary>
        </member>
        <member name="F:Towel.DataStructures.Omnitree.Vector`6.Axis2">
            <summary>The value along axis 2.</summary>
        </member>
        <member name="F:Towel.DataStructures.Omnitree.Vector`6.Axis3">
            <summary>The value along axis 3.</summary>
        </member>
        <member name="F:Towel.DataStructures.Omnitree.Vector`6.Axis4">
            <summary>The value along axis 4.</summary>
        </member>
        <member name="F:Towel.DataStructures.Omnitree.Vector`6.Axis5">
            <summary>The value along axis 5.</summary>
        </member>
        <member name="F:Towel.DataStructures.Omnitree.Vector`6.Axis6">
            <summary>The value along axis 6.</summary>
        </member>
        <member name="P:Towel.DataStructures.Omnitree.Vector`6.Default">
            <summary>Returns a vector with defaulted values.</summary>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.Vector`6.#ctor(`0,`1,`2,`3,`4,`5)">
            <summary>A location along each axis.</summary>
            <param name="axis1">The location along axis 1.</param>
            <param name="axis2">The location along axis 2.</param>
            <param name="axis3">The location along axis 3.</param>
            <param name="axis4">The location along axis 4.</param>
            <param name="axis5">The location along axis 5.</param>
            <param name="axis6">The location along axis 6.</param>
        </member>
        <member name="P:Towel.DataStructures.Omnitree.Bounds`6.None">
            <summary>Extends infinitely along each axis.</summary>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.Bounds`6.#ctor(Towel.DataStructures.Omnitree.Bound{`0},Towel.DataStructures.Omnitree.Bound{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5})">
            <summary>A set of values denoting a range (or lack of range) along each axis.</summary>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.InclusionCheck``6(Towel.DataStructures.Omnitree.Bounds{``0,``1,``2,``3,``4,``5},Towel.DataStructures.Omnitree.Bounds{``0,``1,``2,``3,``4,``5},Towel.Compare{``0},Towel.Compare{``1},Towel.Compare{``2},Towel.Compare{``3},Towel.Compare{``4},Towel.Compare{``5})">
            <summary>Checks a node for inclusion (overlap) between two bounds.</summary>
            <returns>True if the spaces overlap; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.EncapsulationCheck``6(Towel.DataStructures.Omnitree.Bounds{``0,``1,``2,``3,``4,``5},Towel.DataStructures.Omnitree.Vector{``0,``1,``2,``3,``4,``5},Towel.Compare{``0},Towel.Compare{``1},Towel.Compare{``2},Towel.Compare{``3},Towel.Compare{``4},Towel.Compare{``5})">
            <summary>Checks if a space encapsulates a point.</summary>
            <returns>True if the space encapsulates the point; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.EncapsulationCheck``6(Towel.DataStructures.Omnitree.Bounds{``0,``1,``2,``3,``4,``5},Towel.DataStructures.Omnitree.Bounds{``0,``1,``2,``3,``4,``5},Towel.Compare{``0},Towel.Compare{``1},Towel.Compare{``2},Towel.Compare{``3},Towel.Compare{``4},Towel.Compare{``5})">
            <summary>Checks if a space (left) encapsulates another space (right).</summary>
            <returns>True if the left space encapsulates the right; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.EqualsCheck``6(Towel.DataStructures.Omnitree.Vector{``0,``1,``2,``3,``4,``5},Towel.DataStructures.Omnitree.Vector{``0,``1,``2,``3,``4,``5},Towel.Equate{``0},Towel.Equate{``1},Towel.Equate{``2},Towel.Equate{``3},Towel.Equate{``4},Towel.Equate{``5})">
            <summary>Checks for equality between two locations.</summary>
            <returns>True if equal; False if not;</returns>
        </member>
        <member name="F:Towel.DataStructures.Omnitree.Vector`7.Axis1">
            <summary>The value along axis 1.</summary>
        </member>
        <member name="F:Towel.DataStructures.Omnitree.Vector`7.Axis2">
            <summary>The value along axis 2.</summary>
        </member>
        <member name="F:Towel.DataStructures.Omnitree.Vector`7.Axis3">
            <summary>The value along axis 3.</summary>
        </member>
        <member name="F:Towel.DataStructures.Omnitree.Vector`7.Axis4">
            <summary>The value along axis 4.</summary>
        </member>
        <member name="F:Towel.DataStructures.Omnitree.Vector`7.Axis5">
            <summary>The value along axis 5.</summary>
        </member>
        <member name="F:Towel.DataStructures.Omnitree.Vector`7.Axis6">
            <summary>The value along axis 6.</summary>
        </member>
        <member name="F:Towel.DataStructures.Omnitree.Vector`7.Axis7">
            <summary>The value along axis 7.</summary>
        </member>
        <member name="P:Towel.DataStructures.Omnitree.Vector`7.Default">
            <summary>Returns a vector with defaulted values.</summary>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.Vector`7.#ctor(`0,`1,`2,`3,`4,`5,`6)">
            <summary>A location along each axis.</summary>
            <param name="axis1">The location along axis 1.</param>
            <param name="axis2">The location along axis 2.</param>
            <param name="axis3">The location along axis 3.</param>
            <param name="axis4">The location along axis 4.</param>
            <param name="axis5">The location along axis 5.</param>
            <param name="axis6">The location along axis 6.</param>
            <param name="axis7">The location along axis 7.</param>
        </member>
        <member name="P:Towel.DataStructures.Omnitree.Bounds`7.None">
            <summary>Extends infinitely along each axis.</summary>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.Bounds`7.#ctor(Towel.DataStructures.Omnitree.Bound{`0},Towel.DataStructures.Omnitree.Bound{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`6})">
            <summary>A set of values denoting a range (or lack of range) along each axis.</summary>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.InclusionCheck``7(Towel.DataStructures.Omnitree.Bounds{``0,``1,``2,``3,``4,``5,``6},Towel.DataStructures.Omnitree.Bounds{``0,``1,``2,``3,``4,``5,``6},Towel.Compare{``0},Towel.Compare{``1},Towel.Compare{``2},Towel.Compare{``3},Towel.Compare{``4},Towel.Compare{``5},Towel.Compare{``6})">
            <summary>Checks a node for inclusion (overlap) between two bounds.</summary>
            <returns>True if the spaces overlap; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.EncapsulationCheck``7(Towel.DataStructures.Omnitree.Bounds{``0,``1,``2,``3,``4,``5,``6},Towel.DataStructures.Omnitree.Vector{``0,``1,``2,``3,``4,``5,``6},Towel.Compare{``0},Towel.Compare{``1},Towel.Compare{``2},Towel.Compare{``3},Towel.Compare{``4},Towel.Compare{``5},Towel.Compare{``6})">
            <summary>Checks if a space encapsulates a point.</summary>
            <returns>True if the space encapsulates the point; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.EncapsulationCheck``7(Towel.DataStructures.Omnitree.Bounds{``0,``1,``2,``3,``4,``5,``6},Towel.DataStructures.Omnitree.Bounds{``0,``1,``2,``3,``4,``5,``6},Towel.Compare{``0},Towel.Compare{``1},Towel.Compare{``2},Towel.Compare{``3},Towel.Compare{``4},Towel.Compare{``5},Towel.Compare{``6})">
            <summary>Checks if a space (left) encapsulates another space (right).</summary>
            <returns>True if the left space encapsulates the right; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.EqualsCheck``7(Towel.DataStructures.Omnitree.Vector{``0,``1,``2,``3,``4,``5,``6},Towel.DataStructures.Omnitree.Vector{``0,``1,``2,``3,``4,``5,``6},Towel.Equate{``0},Towel.Equate{``1},Towel.Equate{``2},Towel.Equate{``3},Towel.Equate{``4},Towel.Equate{``5},Towel.Equate{``6})">
            <summary>Checks for equality between two locations.</summary>
            <returns>True if equal; False if not;</returns>
        </member>
        <member name="P:Towel.DataStructures.Omnitree.Vector.Location">
            <summary>The locations along each axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.Omnitree.Vector.Default">
            <summary>Returns a vector with defaulted values.</summary>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.Bounds.None(System.Int32)">
            <summary>Extends infinitely along each axis.</summary>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.Bounds.#ctor(Towel.DataStructures.Omnitree.Bound{System.Object}[],Towel.DataStructures.Omnitree.Bound{System.Object}[])">
            <summary>A set of values denoting a range (or lack of range) along each axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.IOmnitreePoints`2.Item(`1)">
            <summary>Steps through the values at a given location.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <returns>A Stepper of the items at the given coordinates.</returns>
        </member>
        <member name="P:Towel.DataStructures.IOmnitreePoints`2.Dimensions">
            <summary>The number of dimensions in this tree.</summary>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`2.CountSubSpace(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1})">
            <summary>Counts the number of items in a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`2.Update">
            <summary>Iterates through the entire tree and ensures each item is in the proper leaf.</summary>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`2.Update(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1})">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`2.Remove(`1)">
            <summary>Removes all the items in a given space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`2.Remove(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1})">
            <summary>Removes all the items in a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`2.Remove(`1,System.Predicate{`0})">
            <summary>Removes all the items in a given space where equality is met.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`2.Remove(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},System.Predicate{`0})">
            <summary>Removes all the items in a given space where predicate is met.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="where">The predicate constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`2.Stepper(Towel.Step{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`2.Stepper(Towel.StepBreak{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`2.Stepper(Towel.Step{`0},`1)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="axis1">The coordinate along the 1D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`2.Stepper(Towel.StepBreak{`0},`1)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="axis1">The coordinate along the 1D axis.</param>
        </member>
        <member name="T:Towel.DataStructures.OmnitreePointsLinked`2.Node">
            <summary>Can be a leaf or a branch.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`2.Node.Depth">
            <summary>The depth this node is located in the Omnitree.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`2.Node.#ctor(Towel.DataStructures.Omnitree.Bounds{`1},Towel.DataStructures.OmnitreePointsLinked{`0,`1}.Branch,System.Int32)">
            <summary>Constructs a node.</summary>
            <param name="bounds">The bounds of this node.</param>
            <param name="parent">The parent of this node.</param>
            <param name="index">The number of elements stored in this node and its children.</param>
        </member>
        <member name="T:Towel.DataStructures.OmnitreePointsLinked`2.Branch">
            <summary>A branch in the tree. Only contains nodes.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`2.Branch.Item(System.Int32)">
            <summary>Gets child by index.</summary>
            <param name="child_index">The index of the child to get.</param>
            <returns>The child of the given index or null if non-existent.</returns>
        </member>
        <member name="T:Towel.DataStructures.OmnitreePointsLinked`2.Leaf">
            <summary>A branch in the tree. Only contains items.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`2.#ctor(Towel.DataStructures.OmnitreePointsLinked{`0,`1})">
            <summary>This constructor is for cloning purposes</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`2.Item(`1)">
            <summary>Steps through all the items at a given coordinate.</summary>
            <param name="axis1">The coordinate along axis 1.</param>
            <returns>The stepper for the items at the given coordinate.</returns>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`2.Dimensions">
            <summary>The number of dimensions in this tree.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`2.Equate">
            <summary>The function for equating keys in this table.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`2.Locate">
            <summary>The location function the Omnitree is using.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`2.Compare1">
            <summary>The comparison function the Omnitree is using along the 1D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`2.EquateAxis1">
            <summary>The function for equating values along the 1D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`2.Count">
            <summary>The current number of items in the tree.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`2.MaxDepth">
            <summary>Finds the current maximum depth of the tree. NOT AN O(1) OPERATION. Intended for educational purposes only.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`2.NodeCount">
            <summary>Counts the current number of nodes in the tree. NOT AN O(1) OPERATION. Intended for educational purposes only.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`2.BranchCount">
            <summary>Counts the current number of branches in the tree. NOT AN O(1) OPERATION. Intended for educational purposes only.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`2.LeafCount">
            <summary>Counts the current number of leaves in the tree. NOT AN O(1) OPERATION. Intended for educational purposes only.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`2.GetMedianIndexes(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>Gets the indeces of the median values at the given position during bulk additions.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`2.Add(`0)">
            <summary>Adds an item to the tree.</summary>
            <param name="addition">The item to be added.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`2.Add(`0,Towel.DataStructures.OmnitreePointsLinked{`0,`1}.Node,Towel.DataStructures.Omnitree.Vector{`1},System.Int32)">
            <summary>Recursive version of the add function.</summary>
            <param name="addition">The item to be added.</param>
            <param name="node">The current node for tree trversal.</param>
            <param name="ms">The location of the addition.</param>
            <param name="depth">The current depth of iteration.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`2.DetermineMedians(Towel.DataStructures.OmnitreePointsLinked{`0,`1}.Leaf)">
            <summary>Determins the dimensions of the child at the given index.</summary>
            <param name="leaf">The parent of the node to compute dimensions for.</param>
            <param name="child">The index of the child to compute dimensions for.</param>
            <param name="median1">The computed minimum dimensions of the child node along the 1D axis.</param>
            <param name="median2">The computed minimum dimensions of the child node along the 2D axis.</param>
            <param name="median3">The computed minimum dimensions of the child node along the 3D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`2.Clear">
            <summary>Returns the tree to an empty state.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`2.Clone">
            <summary>Creates a shallow clone of this data structure.</summary>
            <returns>A shallow clone of this data structure.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`2.CountSubSpace(`1,`1)">
            <summary>Counts the number of items in a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`2.CountSubSpace(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1})">
            <summary>Counts the number of items in a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`2.CountSubSpace(`1)">
            <summary>Counts the number of items in a sub space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`2.CountSubSpace(Towel.DataStructures.Omnitree.Bound{`1})">
            <summary>Counts the number of items in a sub space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`2.CountSubSpace(Towel.DataStructures.OmnitreePointsLinked{`0,`1}.Node,Towel.DataStructures.Omnitree.Bounds{`1})">
            <summary>Counts the number of items in a sub space.</summary>
            <param name="node">The current traversal node.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`2.Update">
            <summary>Iterates through the entire tree and ensures each item is in the proper leaf.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`2.Update(Towel.DataStructures.OmnitreePointsLinked{`0,`1}.Node,System.Int32)">
            <summary>Recursive version of the Update method.</summary>
            <param name="node">The current node of iteration.</param>
            <param name="depth">The current depth of iteration.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`2.Update(`1,`1)">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`2.Update(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1})">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`2.Update(`1)">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`2.Update(Towel.DataStructures.Omnitree.Bound{`1})">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`2.Remove(System.Predicate{`0})">
            <summary>Removes all the items qualified by the delegate.</summary>
            <param name="where">The predicate to qualify removals.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`2.Remove(Towel.DataStructures.OmnitreePointsLinked{`0,`1}.Node,System.Predicate{`0})">
            <summary>Recursive version of the remove method.</summary>
            <param name="node">The current node of traversal.</param>
            <param name="where">The predicate to qualify removals.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`2.Remove(`1,`1)">
            <summary>Removes all the items in a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <returns>The number of items that were removed.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`2.Remove(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1})">
            <summary>Removes all the items in a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <returns>The number of items that were removed.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`2.Remove(`1,`1,System.Predicate{`0})">
            <summary>Removes all the items in a given space validated by a predicate.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`2.Remove(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},System.Predicate{`0})">
            <summary>Removes all the items in a given space validated by a predicate.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`2.Remove(`0)">
            <summary>Removes all instances of a given value.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`2.Remove(`1)">
            <summary>Removes all the items in a given space.</summary>
            <param name="axis1">The axis of the removal along the  1D axis.</param>
            <returns>The number of items that were removed.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`2.Remove(`1,System.Predicate{`0})">
            <summary>Removes all the items in a given space validated by a predicate.</summary>
            <param name="axis1">The axis of the removal along the  1D axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`2.Stepper(Towel.Step{`0})">
            <summary>Traverses every item in the tree and performs the delegate in them.</summary>
            <param name="function">The delegate to perform on every item in the tree.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`2.Stepper(Towel.StepBreak{`0})">
            <summary>Traverses every item in the tree and performs the delegate in them.</summary>
            <param name="function">The delegate to perform on every item in the tree.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`2.Stepper(Towel.Step{`0},`1,`1)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="function">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`2.Stepper(Towel.Step{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="function">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`2.Stepper(Towel.StepBreak{`0},`1,`1)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`2.Stepper(Towel.StepBreak{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`2.Stepper(Towel.Step{`0},`1)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="axis1">The axis of the removal along the  1D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`2.Stepper(Towel.StepBreak{`0},`1)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="function">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="axis1">The axis of the removal along the  1D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>FOR COMPATIBILITY ONLY. AVOID IF POSSIBLE.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`2.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>FOR COMPATIBILITY ONLY. AVOID IF POSSIBLE.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`2.DetermineChildIndex(Towel.DataStructures.Omnitree.Vector{`1},Towel.DataStructures.Omnitree.Vector{`1})">
            <summary>Computes the child index that contains the desired dimensions.</summary>
            <param name="node">The branch .</param>
            <param name="vector">The dimensions to determine the child index.</param>
            <returns>The computed child index based on the coordinates relative to the center of the node.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`2.ShrinkChild(Towel.DataStructures.OmnitreePointsLinked{`0,`1}.Branch,System.Int32)">
            <summary>Converts a branch back into a leaf when the count is reduced.</summary>
            <param name="parent">The parent to shrink a child of.</param>
            <param name="child">The index of the child to shrink.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`2.ReduceParentCounts(Towel.DataStructures.OmnitreePointsLinked{`0,`1}.Node,System.Int32)">
            <summary>Reduces the counts of all the parents of a given node by a given amount.</summary>
            <param name="parent">The starting parent of the reduction.</param>
            <param name="reduction">The amount to reduce the parent counts by.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`2.IncreaseParentCounts(Towel.DataStructures.OmnitreePointsLinked{`0,`1}.Node,System.Int32)">
            <summary>Increases the counts of all the parents of a given node by a given amount.</summary>
            <param name="parent">The starting parent of the increase.</param>
            <param name="increase">The amount to increase the parent counts by.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`2.InclusionCheck(Towel.DataStructures.Omnitree.Bounds{`1},Towel.DataStructures.Omnitree.Bounds{`1})">
            <summary>Checks a node for inclusion (overlap) between two bounds.</summary>
            <returns>True if the spaces overlap; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`2.EncapsulationCheck(Towel.DataStructures.Omnitree.Bounds{`1},Towel.DataStructures.Omnitree.Vector{`1})">
            <summary>Checks if a space encapsulates a point.</summary>
            <returns>True if the space encapsulates the point; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`2.EncapsulationCheck(Towel.DataStructures.Omnitree.Bounds{`1},Towel.DataStructures.Omnitree.Bounds{`1})">
            <summary>Checks if a space (left) encapsulates another space (right).</summary>
            <returns>True if the left space encapsulates the right; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`2.EqualsCheck(Towel.DataStructures.Omnitree.Vector{`1},Towel.DataStructures.Omnitree.Vector{`1})">
            <summary>Checks for equality between two locations.</summary>
            <returns>True if equal; False if not;</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`2.GetEncapsulationParent(Towel.DataStructures.OmnitreePointsLinked{`0,`1}.Node,Towel.DataStructures.Omnitree.Vector{`1})">
            <summary>Gets the nearest parent that encapsulates a location.</summary>
            <param name="node">The starting node to find the encapsulating parent of the location.</param>
            <param name="coordinate1">The coordinate along the 1D axis.</param>
            <param name="coordinate2">The coordinate along the 2D axis.</param>
            <param name="coordinate3">The coordinate along the 3D axis.</param>
            <returns>The nearest node that encapsulates the given location.</returns>
        </member>
        <member name="P:Towel.DataStructures.IOmnitreePoints`3.Item(`1,`2)">
            <summary>Steps through the values at a given location.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <returns>A Stepper of the items at the given coordinates.</returns>
        </member>
        <member name="P:Towel.DataStructures.IOmnitreePoints`3.Dimensions">
            <summary>The number of dimensions in this tree.</summary>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`3.CountSubSpace(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2})">
            <summary>Counts the number of items in a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`3.Update">
            <summary>Iterates through the entire tree and ensures each item is in the proper leaf.</summary>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`3.Update(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2})">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`3.Remove(`1,`2)">
            <summary>Removes all the items in a given space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`3.Remove(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2})">
            <summary>Removes all the items in a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`3.Remove(`1,`2,System.Predicate{`0})">
            <summary>Removes all the items in a given space where equality is met.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`3.Remove(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},System.Predicate{`0})">
            <summary>Removes all the items in a given space where predicate is met.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="where">The predicate constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`3.Stepper(Towel.Step{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`3.Stepper(Towel.StepBreak{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`3.Stepper(Towel.Step{`0},`1,`2)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`3.Stepper(Towel.StepBreak{`0},`1,`2)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
        </member>
        <member name="T:Towel.DataStructures.OmnitreePointsLinked`3.Node">
            <summary>Can be a leaf or a branch.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`3.Node.Depth">
            <summary>The depth this node is located in the Omnitree.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`3.Node.#ctor(Towel.DataStructures.Omnitree.Bounds{`1,`2},Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2}.Branch,System.Int32)">
            <summary>Constructs a node.</summary>
            <param name="bounds">The bounds of this node.</param>
            <param name="parent">The parent of this node.</param>
            <param name="index">The number of elements stored in this node and its children.</param>
        </member>
        <member name="T:Towel.DataStructures.OmnitreePointsLinked`3.Branch">
            <summary>A branch in the tree. Only contains nodes.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`3.Branch.Item(System.Int32)">
            <summary>Gets child by index.</summary>
            <param name="child_index">The index of the child to get.</param>
            <returns>The child of the given index or null if non-existent.</returns>
        </member>
        <member name="T:Towel.DataStructures.OmnitreePointsLinked`3.Leaf">
            <summary>A branch in the tree. Only contains items.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`3.#ctor(Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2})">
            <summary>This constructor is for cloning purposes</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`3.Item(`1,`2)">
            <summary>Steps through all the items at a given coordinate.</summary>
            <param name="axis1">The coordinate along axis 1.</param>
            <param name="axis2">The coordinate along axis 2.</param>
            <returns>The stepper for the items at the given coordinate.</returns>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`3.Dimensions">
            <summary>The number of dimensions in this tree.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`3.Equate">
            <summary>The function for equating keys in this table.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`3.Locate">
            <summary>The location function the Omnitree is using.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`3.Compare1">
            <summary>The comparison function the Omnitree is using along the 1D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`3.Compare2">
            <summary>The comparison function the Omnitree is using along the 2D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`3.EquateAxis1">
            <summary>The function for equating values along the 1D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`3.EquateAxis2">
            <summary>The function for equating values along the 2D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`3.Count">
            <summary>The current number of items in the tree.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`3.MaxDepth">
            <summary>Finds the current maximum depth of the tree. NOT AN O(1) OPERATION. Intended for educational purposes only.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`3.NodeCount">
            <summary>Counts the current number of nodes in the tree. NOT AN O(1) OPERATION. Intended for educational purposes only.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`3.BranchCount">
            <summary>Counts the current number of branches in the tree. NOT AN O(1) OPERATION. Intended for educational purposes only.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`3.LeafCount">
            <summary>Counts the current number of leaves in the tree. NOT AN O(1) OPERATION. Intended for educational purposes only.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`3.GetMedianIndexes(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <summary>Gets the indeces of the median values at the given position during bulk additions.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`3.Add(`0)">
            <summary>Adds an item to the tree.</summary>
            <param name="addition">The item to be added.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`3.Add(`0,Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2}.Node,Towel.DataStructures.Omnitree.Vector{`1,`2},System.Int32)">
            <summary>Recursive version of the add function.</summary>
            <param name="addition">The item to be added.</param>
            <param name="node">The current node for tree trversal.</param>
            <param name="ms">The location of the addition.</param>
            <param name="depth">The current depth of iteration.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`3.DetermineMedians(Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2}.Leaf)">
            <summary>Determins the dimensions of the child at the given index.</summary>
            <param name="leaf">The parent of the node to compute dimensions for.</param>
            <param name="child">The index of the child to compute dimensions for.</param>
            <param name="median1">The computed minimum dimensions of the child node along the 1D axis.</param>
            <param name="median2">The computed minimum dimensions of the child node along the 2D axis.</param>
            <param name="median3">The computed minimum dimensions of the child node along the 3D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`3.Clear">
            <summary>Returns the tree to an empty state.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`3.Clone">
            <summary>Creates a shallow clone of this data structure.</summary>
            <returns>A shallow clone of this data structure.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`3.CountSubSpace(`1,`1,`2,`2)">
            <summary>Counts the number of items in a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`3.CountSubSpace(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2})">
            <summary>Counts the number of items in a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`3.CountSubSpace(`1,`2)">
            <summary>Counts the number of items in a sub space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`3.CountSubSpace(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2})">
            <summary>Counts the number of items in a sub space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`3.CountSubSpace(Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2}.Node,Towel.DataStructures.Omnitree.Bounds{`1,`2})">
            <summary>Counts the number of items in a sub space.</summary>
            <param name="node">The current traversal node.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`3.Update">
            <summary>Iterates through the entire tree and ensures each item is in the proper leaf.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`3.Update(Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2}.Node,System.Int32)">
            <summary>Recursive version of the Update method.</summary>
            <param name="node">The current node of iteration.</param>
            <param name="depth">The current depth of iteration.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`3.Update(`1,`1,`2,`2)">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`3.Update(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2})">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`3.Update(`1,`2)">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`3.Update(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2})">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`3.Remove(System.Predicate{`0})">
            <summary>Removes all the items qualified by the delegate.</summary>
            <param name="where">The predicate to qualify removals.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`3.Remove(Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2}.Node,System.Predicate{`0})">
            <summary>Recursive version of the remove method.</summary>
            <param name="node">The current node of traversal.</param>
            <param name="where">The predicate to qualify removals.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`3.Remove(`1,`1,`2,`2)">
            <summary>Removes all the items in a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <returns>The number of items that were removed.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`3.Remove(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2})">
            <summary>Removes all the items in a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <returns>The number of items that were removed.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`3.Remove(`1,`1,`2,`2,System.Predicate{`0})">
            <summary>Removes all the items in a given space validated by a predicate.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`3.Remove(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},System.Predicate{`0})">
            <summary>Removes all the items in a given space validated by a predicate.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`3.Remove(`0)">
            <summary>Removes all instances of a given value.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`3.Remove(`1,`2)">
            <summary>Removes all the items in a given space.</summary>
            <param name="axis1">The axis of the removal along the  1D axis.</param>
            <param name="axis2">The axis of the removal along the  2D axis.</param>
            <returns>The number of items that were removed.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`3.Remove(`1,`2,System.Predicate{`0})">
            <summary>Removes all the items in a given space validated by a predicate.</summary>
            <param name="axis1">The axis of the removal along the  1D axis.</param>
            <param name="axis2">The axis of the removal along the  2D axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`3.Stepper(Towel.Step{`0})">
            <summary>Traverses every item in the tree and performs the delegate in them.</summary>
            <param name="function">The delegate to perform on every item in the tree.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`3.Stepper(Towel.StepBreak{`0})">
            <summary>Traverses every item in the tree and performs the delegate in them.</summary>
            <param name="function">The delegate to perform on every item in the tree.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`3.Stepper(Towel.Step{`0},`1,`1,`2,`2)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="function">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`3.Stepper(Towel.Step{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="function">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`3.Stepper(Towel.StepBreak{`0},`1,`1,`2,`2)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`3.Stepper(Towel.StepBreak{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`3.Stepper(Towel.Step{`0},`1,`2)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="axis1">The axis of the removal along the  1D axis.</param>
            <param name="axis2">The axis of the removal along the  2D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`3.Stepper(Towel.StepBreak{`0},`1,`2)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="function">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="axis1">The axis of the removal along the  1D axis.</param>
            <param name="axis2">The axis of the removal along the  2D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`3.System#Collections#IEnumerable#GetEnumerator">
            <summary>FOR COMPATIBILITY ONLY. AVOID IF POSSIBLE.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`3.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>FOR COMPATIBILITY ONLY. AVOID IF POSSIBLE.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`3.DetermineChildIndex(Towel.DataStructures.Omnitree.Vector{`1,`2},Towel.DataStructures.Omnitree.Vector{`1,`2})">
            <summary>Computes the child index that contains the desired dimensions.</summary>
            <param name="node">The branch .</param>
            <param name="vector">The dimensions to determine the child index.</param>
            <returns>The computed child index based on the coordinates relative to the center of the node.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`3.ShrinkChild(Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2}.Branch,System.Int32)">
            <summary>Converts a branch back into a leaf when the count is reduced.</summary>
            <param name="parent">The parent to shrink a child of.</param>
            <param name="child">The index of the child to shrink.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`3.ReduceParentCounts(Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2}.Node,System.Int32)">
            <summary>Reduces the counts of all the parents of a given node by a given amount.</summary>
            <param name="parent">The starting parent of the reduction.</param>
            <param name="reduction">The amount to reduce the parent counts by.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`3.IncreaseParentCounts(Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2}.Node,System.Int32)">
            <summary>Increases the counts of all the parents of a given node by a given amount.</summary>
            <param name="parent">The starting parent of the increase.</param>
            <param name="increase">The amount to increase the parent counts by.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`3.InclusionCheck(Towel.DataStructures.Omnitree.Bounds{`1,`2},Towel.DataStructures.Omnitree.Bounds{`1,`2})">
            <summary>Checks a node for inclusion (overlap) between two bounds.</summary>
            <returns>True if the spaces overlap; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`3.EncapsulationCheck(Towel.DataStructures.Omnitree.Bounds{`1,`2},Towel.DataStructures.Omnitree.Vector{`1,`2})">
            <summary>Checks if a space encapsulates a point.</summary>
            <returns>True if the space encapsulates the point; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`3.EncapsulationCheck(Towel.DataStructures.Omnitree.Bounds{`1,`2},Towel.DataStructures.Omnitree.Bounds{`1,`2})">
            <summary>Checks if a space (left) encapsulates another space (right).</summary>
            <returns>True if the left space encapsulates the right; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`3.EqualsCheck(Towel.DataStructures.Omnitree.Vector{`1,`2},Towel.DataStructures.Omnitree.Vector{`1,`2})">
            <summary>Checks for equality between two locations.</summary>
            <returns>True if equal; False if not;</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`3.GetEncapsulationParent(Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2}.Node,Towel.DataStructures.Omnitree.Vector{`1,`2})">
            <summary>Gets the nearest parent that encapsulates a location.</summary>
            <param name="node">The starting node to find the encapsulating parent of the location.</param>
            <param name="coordinate1">The coordinate along the 1D axis.</param>
            <param name="coordinate2">The coordinate along the 2D axis.</param>
            <param name="coordinate3">The coordinate along the 3D axis.</param>
            <returns>The nearest node that encapsulates the given location.</returns>
        </member>
        <member name="P:Towel.DataStructures.IOmnitreePoints`4.Item(`1,`2,`3)">
            <summary>Steps through the values at a given location.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <returns>A Stepper of the items at the given coordinates.</returns>
        </member>
        <member name="P:Towel.DataStructures.IOmnitreePoints`4.Dimensions">
            <summary>The number of dimensions in this tree.</summary>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`4.CountSubSpace(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3})">
            <summary>Counts the number of items in a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`4.Update">
            <summary>Iterates through the entire tree and ensures each item is in the proper leaf.</summary>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`4.Update(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3})">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`4.Remove(`1,`2,`3)">
            <summary>Removes all the items in a given space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`4.Remove(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3})">
            <summary>Removes all the items in a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`4.Remove(`1,`2,`3,System.Predicate{`0})">
            <summary>Removes all the items in a given space where equality is met.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`4.Remove(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},System.Predicate{`0})">
            <summary>Removes all the items in a given space where predicate is met.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="where">The predicate constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`4.Stepper(Towel.Step{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`4.Stepper(Towel.StepBreak{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`4.Stepper(Towel.Step{`0},`1,`2,`3)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`4.Stepper(Towel.StepBreak{`0},`1,`2,`3)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
        </member>
        <member name="T:Towel.DataStructures.OmnitreePointsLinked`4.Node">
            <summary>Can be a leaf or a branch.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`4.Node.Depth">
            <summary>The depth this node is located in the Omnitree.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`4.Node.#ctor(Towel.DataStructures.Omnitree.Bounds{`1,`2,`3},Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2,`3}.Branch,System.Int32)">
            <summary>Constructs a node.</summary>
            <param name="bounds">The bounds of this node.</param>
            <param name="parent">The parent of this node.</param>
            <param name="index">The number of elements stored in this node and its children.</param>
        </member>
        <member name="T:Towel.DataStructures.OmnitreePointsLinked`4.Branch">
            <summary>A branch in the tree. Only contains nodes.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`4.Branch.Item(System.Int32)">
            <summary>Gets child by index.</summary>
            <param name="child_index">The index of the child to get.</param>
            <returns>The child of the given index or null if non-existent.</returns>
        </member>
        <member name="T:Towel.DataStructures.OmnitreePointsLinked`4.Leaf">
            <summary>A branch in the tree. Only contains items.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`4.#ctor(Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2,`3})">
            <summary>This constructor is for cloning purposes</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`4.Item(`1,`2,`3)">
            <summary>Steps through all the items at a given coordinate.</summary>
            <param name="axis1">The coordinate along axis 1.</param>
            <param name="axis2">The coordinate along axis 2.</param>
            <param name="axis3">The coordinate along axis 3.</param>
            <returns>The stepper for the items at the given coordinate.</returns>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`4.Dimensions">
            <summary>The number of dimensions in this tree.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`4.Equate">
            <summary>The function for equating keys in this table.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`4.Locate">
            <summary>The location function the Omnitree is using.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`4.Compare1">
            <summary>The comparison function the Omnitree is using along the 1D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`4.Compare2">
            <summary>The comparison function the Omnitree is using along the 2D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`4.Compare3">
            <summary>The comparison function the Omnitree is using along the 3D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`4.EquateAxis1">
            <summary>The function for equating values along the 1D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`4.EquateAxis2">
            <summary>The function for equating values along the 2D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`4.EquateAxis3">
            <summary>The function for equating values along the 3D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`4.Count">
            <summary>The current number of items in the tree.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`4.MaxDepth">
            <summary>Finds the current maximum depth of the tree. NOT AN O(1) OPERATION. Intended for educational purposes only.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`4.NodeCount">
            <summary>Counts the current number of nodes in the tree. NOT AN O(1) OPERATION. Intended for educational purposes only.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`4.BranchCount">
            <summary>Counts the current number of branches in the tree. NOT AN O(1) OPERATION. Intended for educational purposes only.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`4.LeafCount">
            <summary>Counts the current number of leaves in the tree. NOT AN O(1) OPERATION. Intended for educational purposes only.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`4.GetMedianIndexes(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@)">
            <summary>Gets the indeces of the median values at the given position during bulk additions.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`4.Add(`0)">
            <summary>Adds an item to the tree.</summary>
            <param name="addition">The item to be added.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`4.Add(`0,Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2,`3}.Node,Towel.DataStructures.Omnitree.Vector{`1,`2,`3},System.Int32)">
            <summary>Recursive version of the add function.</summary>
            <param name="addition">The item to be added.</param>
            <param name="node">The current node for tree trversal.</param>
            <param name="ms">The location of the addition.</param>
            <param name="depth">The current depth of iteration.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`4.DetermineMedians(Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2,`3}.Leaf)">
            <summary>Determins the dimensions of the child at the given index.</summary>
            <param name="leaf">The parent of the node to compute dimensions for.</param>
            <param name="child">The index of the child to compute dimensions for.</param>
            <param name="median1">The computed minimum dimensions of the child node along the 1D axis.</param>
            <param name="median2">The computed minimum dimensions of the child node along the 2D axis.</param>
            <param name="median3">The computed minimum dimensions of the child node along the 3D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`4.Clear">
            <summary>Returns the tree to an empty state.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`4.Clone">
            <summary>Creates a shallow clone of this data structure.</summary>
            <returns>A shallow clone of this data structure.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`4.CountSubSpace(`1,`1,`2,`2,`3,`3)">
            <summary>Counts the number of items in a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`4.CountSubSpace(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3})">
            <summary>Counts the number of items in a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`4.CountSubSpace(`1,`2,`3)">
            <summary>Counts the number of items in a sub space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`4.CountSubSpace(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3})">
            <summary>Counts the number of items in a sub space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`4.CountSubSpace(Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2,`3}.Node,Towel.DataStructures.Omnitree.Bounds{`1,`2,`3})">
            <summary>Counts the number of items in a sub space.</summary>
            <param name="node">The current traversal node.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`4.Update">
            <summary>Iterates through the entire tree and ensures each item is in the proper leaf.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`4.Update(Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2,`3}.Node,System.Int32)">
            <summary>Recursive version of the Update method.</summary>
            <param name="node">The current node of iteration.</param>
            <param name="depth">The current depth of iteration.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`4.Update(`1,`1,`2,`2,`3,`3)">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`4.Update(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3})">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`4.Update(`1,`2,`3)">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`4.Update(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3})">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`4.Remove(System.Predicate{`0})">
            <summary>Removes all the items qualified by the delegate.</summary>
            <param name="where">The predicate to qualify removals.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`4.Remove(Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2,`3}.Node,System.Predicate{`0})">
            <summary>Recursive version of the remove method.</summary>
            <param name="node">The current node of traversal.</param>
            <param name="where">The predicate to qualify removals.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`4.Remove(`1,`1,`2,`2,`3,`3)">
            <summary>Removes all the items in a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <returns>The number of items that were removed.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`4.Remove(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3})">
            <summary>Removes all the items in a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <returns>The number of items that were removed.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`4.Remove(`1,`1,`2,`2,`3,`3,System.Predicate{`0})">
            <summary>Removes all the items in a given space validated by a predicate.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`4.Remove(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},System.Predicate{`0})">
            <summary>Removes all the items in a given space validated by a predicate.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`4.Remove(`0)">
            <summary>Removes all instances of a given value.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`4.Remove(`1,`2,`3)">
            <summary>Removes all the items in a given space.</summary>
            <param name="axis1">The axis of the removal along the  1D axis.</param>
            <param name="axis2">The axis of the removal along the  2D axis.</param>
            <param name="axis3">The axis of the removal along the  3D axis.</param>
            <returns>The number of items that were removed.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`4.Remove(`1,`2,`3,System.Predicate{`0})">
            <summary>Removes all the items in a given space validated by a predicate.</summary>
            <param name="axis1">The axis of the removal along the  1D axis.</param>
            <param name="axis2">The axis of the removal along the  2D axis.</param>
            <param name="axis3">The axis of the removal along the  3D axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`4.Stepper(Towel.Step{`0})">
            <summary>Traverses every item in the tree and performs the delegate in them.</summary>
            <param name="function">The delegate to perform on every item in the tree.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`4.Stepper(Towel.StepBreak{`0})">
            <summary>Traverses every item in the tree and performs the delegate in them.</summary>
            <param name="function">The delegate to perform on every item in the tree.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`4.Stepper(Towel.Step{`0},`1,`1,`2,`2,`3,`3)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="function">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`4.Stepper(Towel.Step{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="function">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`4.Stepper(Towel.StepBreak{`0},`1,`1,`2,`2,`3,`3)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`4.Stepper(Towel.StepBreak{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`4.Stepper(Towel.Step{`0},`1,`2,`3)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="axis1">The axis of the removal along the  1D axis.</param>
            <param name="axis2">The axis of the removal along the  2D axis.</param>
            <param name="axis3">The axis of the removal along the  3D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`4.Stepper(Towel.StepBreak{`0},`1,`2,`3)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="function">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="axis1">The axis of the removal along the  1D axis.</param>
            <param name="axis2">The axis of the removal along the  2D axis.</param>
            <param name="axis3">The axis of the removal along the  3D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`4.System#Collections#IEnumerable#GetEnumerator">
            <summary>FOR COMPATIBILITY ONLY. AVOID IF POSSIBLE.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`4.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>FOR COMPATIBILITY ONLY. AVOID IF POSSIBLE.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`4.DetermineChildIndex(Towel.DataStructures.Omnitree.Vector{`1,`2,`3},Towel.DataStructures.Omnitree.Vector{`1,`2,`3})">
            <summary>Computes the child index that contains the desired dimensions.</summary>
            <param name="node">The branch .</param>
            <param name="vector">The dimensions to determine the child index.</param>
            <returns>The computed child index based on the coordinates relative to the center of the node.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`4.ShrinkChild(Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2,`3}.Branch,System.Int32)">
            <summary>Converts a branch back into a leaf when the count is reduced.</summary>
            <param name="parent">The parent to shrink a child of.</param>
            <param name="child">The index of the child to shrink.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`4.ReduceParentCounts(Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2,`3}.Node,System.Int32)">
            <summary>Reduces the counts of all the parents of a given node by a given amount.</summary>
            <param name="parent">The starting parent of the reduction.</param>
            <param name="reduction">The amount to reduce the parent counts by.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`4.IncreaseParentCounts(Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2,`3}.Node,System.Int32)">
            <summary>Increases the counts of all the parents of a given node by a given amount.</summary>
            <param name="parent">The starting parent of the increase.</param>
            <param name="increase">The amount to increase the parent counts by.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`4.InclusionCheck(Towel.DataStructures.Omnitree.Bounds{`1,`2,`3},Towel.DataStructures.Omnitree.Bounds{`1,`2,`3})">
            <summary>Checks a node for inclusion (overlap) between two bounds.</summary>
            <returns>True if the spaces overlap; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`4.EncapsulationCheck(Towel.DataStructures.Omnitree.Bounds{`1,`2,`3},Towel.DataStructures.Omnitree.Vector{`1,`2,`3})">
            <summary>Checks if a space encapsulates a point.</summary>
            <returns>True if the space encapsulates the point; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`4.EncapsulationCheck(Towel.DataStructures.Omnitree.Bounds{`1,`2,`3},Towel.DataStructures.Omnitree.Bounds{`1,`2,`3})">
            <summary>Checks if a space (left) encapsulates another space (right).</summary>
            <returns>True if the left space encapsulates the right; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`4.EqualsCheck(Towel.DataStructures.Omnitree.Vector{`1,`2,`3},Towel.DataStructures.Omnitree.Vector{`1,`2,`3})">
            <summary>Checks for equality between two locations.</summary>
            <returns>True if equal; False if not;</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`4.GetEncapsulationParent(Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2,`3}.Node,Towel.DataStructures.Omnitree.Vector{`1,`2,`3})">
            <summary>Gets the nearest parent that encapsulates a location.</summary>
            <param name="node">The starting node to find the encapsulating parent of the location.</param>
            <param name="coordinate1">The coordinate along the 1D axis.</param>
            <param name="coordinate2">The coordinate along the 2D axis.</param>
            <param name="coordinate3">The coordinate along the 3D axis.</param>
            <returns>The nearest node that encapsulates the given location.</returns>
        </member>
        <member name="P:Towel.DataStructures.IOmnitreePoints`5.Item(`1,`2,`3,`4)">
            <summary>Steps through the values at a given location.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <returns>A Stepper of the items at the given coordinates.</returns>
        </member>
        <member name="P:Towel.DataStructures.IOmnitreePoints`5.Dimensions">
            <summary>The number of dimensions in this tree.</summary>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`5.CountSubSpace(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4})">
            <summary>Counts the number of items in a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`5.Update">
            <summary>Iterates through the entire tree and ensures each item is in the proper leaf.</summary>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`5.Update(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4})">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`5.Remove(`1,`2,`3,`4)">
            <summary>Removes all the items in a given space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`5.Remove(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4})">
            <summary>Removes all the items in a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`5.Remove(`1,`2,`3,`4,System.Predicate{`0})">
            <summary>Removes all the items in a given space where equality is met.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`5.Remove(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},System.Predicate{`0})">
            <summary>Removes all the items in a given space where predicate is met.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="where">The predicate constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`5.Stepper(Towel.Step{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`5.Stepper(Towel.StepBreak{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`5.Stepper(Towel.Step{`0},`1,`2,`3,`4)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`5.Stepper(Towel.StepBreak{`0},`1,`2,`3,`4)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
        </member>
        <member name="T:Towel.DataStructures.OmnitreePointsLinked`5.Node">
            <summary>Can be a leaf or a branch.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`5.Node.Depth">
            <summary>The depth this node is located in the Omnitree.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`5.Node.#ctor(Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4},Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2,`3,`4}.Branch,System.Int32)">
            <summary>Constructs a node.</summary>
            <param name="bounds">The bounds of this node.</param>
            <param name="parent">The parent of this node.</param>
            <param name="index">The number of elements stored in this node and its children.</param>
        </member>
        <member name="T:Towel.DataStructures.OmnitreePointsLinked`5.Branch">
            <summary>A branch in the tree. Only contains nodes.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`5.Branch.Item(System.Int32)">
            <summary>Gets child by index.</summary>
            <param name="child_index">The index of the child to get.</param>
            <returns>The child of the given index or null if non-existent.</returns>
        </member>
        <member name="T:Towel.DataStructures.OmnitreePointsLinked`5.Leaf">
            <summary>A branch in the tree. Only contains items.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`5.#ctor(Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2,`3,`4})">
            <summary>This constructor is for cloning purposes</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`5.Item(`1,`2,`3,`4)">
            <summary>Steps through all the items at a given coordinate.</summary>
            <param name="axis1">The coordinate along axis 1.</param>
            <param name="axis2">The coordinate along axis 2.</param>
            <param name="axis3">The coordinate along axis 3.</param>
            <param name="axis4">The coordinate along axis 4.</param>
            <returns>The stepper for the items at the given coordinate.</returns>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`5.Dimensions">
            <summary>The number of dimensions in this tree.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`5.Equate">
            <summary>The function for equating keys in this table.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`5.Locate">
            <summary>The location function the Omnitree is using.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`5.Compare1">
            <summary>The comparison function the Omnitree is using along the 1D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`5.Compare2">
            <summary>The comparison function the Omnitree is using along the 2D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`5.Compare3">
            <summary>The comparison function the Omnitree is using along the 3D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`5.Compare4">
            <summary>The comparison function the Omnitree is using along the 4D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`5.EquateAxis1">
            <summary>The function for equating values along the 1D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`5.EquateAxis2">
            <summary>The function for equating values along the 2D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`5.EquateAxis3">
            <summary>The function for equating values along the 3D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`5.EquateAxis4">
            <summary>The function for equating values along the 4D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`5.Count">
            <summary>The current number of items in the tree.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`5.MaxDepth">
            <summary>Finds the current maximum depth of the tree. NOT AN O(1) OPERATION. Intended for educational purposes only.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`5.NodeCount">
            <summary>Counts the current number of nodes in the tree. NOT AN O(1) OPERATION. Intended for educational purposes only.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`5.BranchCount">
            <summary>Counts the current number of branches in the tree. NOT AN O(1) OPERATION. Intended for educational purposes only.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`5.LeafCount">
            <summary>Counts the current number of leaves in the tree. NOT AN O(1) OPERATION. Intended for educational purposes only.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`5.GetMedianIndexes(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>Gets the indeces of the median values at the given position during bulk additions.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`5.Add(`0)">
            <summary>Adds an item to the tree.</summary>
            <param name="addition">The item to be added.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`5.Add(`0,Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2,`3,`4}.Node,Towel.DataStructures.Omnitree.Vector{`1,`2,`3,`4},System.Int32)">
            <summary>Recursive version of the add function.</summary>
            <param name="addition">The item to be added.</param>
            <param name="node">The current node for tree trversal.</param>
            <param name="ms">The location of the addition.</param>
            <param name="depth">The current depth of iteration.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`5.DetermineMedians(Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2,`3,`4}.Leaf)">
            <summary>Determins the dimensions of the child at the given index.</summary>
            <param name="leaf">The parent of the node to compute dimensions for.</param>
            <param name="child">The index of the child to compute dimensions for.</param>
            <param name="median1">The computed minimum dimensions of the child node along the 1D axis.</param>
            <param name="median2">The computed minimum dimensions of the child node along the 2D axis.</param>
            <param name="median3">The computed minimum dimensions of the child node along the 3D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`5.Clear">
            <summary>Returns the tree to an empty state.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`5.Clone">
            <summary>Creates a shallow clone of this data structure.</summary>
            <returns>A shallow clone of this data structure.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`5.CountSubSpace(`1,`1,`2,`2,`3,`3,`4,`4)">
            <summary>Counts the number of items in a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`5.CountSubSpace(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4})">
            <summary>Counts the number of items in a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`5.CountSubSpace(`1,`2,`3,`4)">
            <summary>Counts the number of items in a sub space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`5.CountSubSpace(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4})">
            <summary>Counts the number of items in a sub space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`5.CountSubSpace(Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2,`3,`4}.Node,Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4})">
            <summary>Counts the number of items in a sub space.</summary>
            <param name="node">The current traversal node.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`5.Update">
            <summary>Iterates through the entire tree and ensures each item is in the proper leaf.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`5.Update(Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2,`3,`4}.Node,System.Int32)">
            <summary>Recursive version of the Update method.</summary>
            <param name="node">The current node of iteration.</param>
            <param name="depth">The current depth of iteration.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`5.Update(`1,`1,`2,`2,`3,`3,`4,`4)">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`5.Update(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4})">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`5.Update(`1,`2,`3,`4)">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`5.Update(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4})">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`5.Remove(System.Predicate{`0})">
            <summary>Removes all the items qualified by the delegate.</summary>
            <param name="where">The predicate to qualify removals.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`5.Remove(Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2,`3,`4}.Node,System.Predicate{`0})">
            <summary>Recursive version of the remove method.</summary>
            <param name="node">The current node of traversal.</param>
            <param name="where">The predicate to qualify removals.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`5.Remove(`1,`1,`2,`2,`3,`3,`4,`4)">
            <summary>Removes all the items in a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <returns>The number of items that were removed.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`5.Remove(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4})">
            <summary>Removes all the items in a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <returns>The number of items that were removed.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`5.Remove(`1,`1,`2,`2,`3,`3,`4,`4,System.Predicate{`0})">
            <summary>Removes all the items in a given space validated by a predicate.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`5.Remove(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},System.Predicate{`0})">
            <summary>Removes all the items in a given space validated by a predicate.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`5.Remove(`0)">
            <summary>Removes all instances of a given value.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`5.Remove(`1,`2,`3,`4)">
            <summary>Removes all the items in a given space.</summary>
            <param name="axis1">The axis of the removal along the  1D axis.</param>
            <param name="axis2">The axis of the removal along the  2D axis.</param>
            <param name="axis3">The axis of the removal along the  3D axis.</param>
            <param name="axis4">The axis of the removal along the  4D axis.</param>
            <returns>The number of items that were removed.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`5.Remove(`1,`2,`3,`4,System.Predicate{`0})">
            <summary>Removes all the items in a given space validated by a predicate.</summary>
            <param name="axis1">The axis of the removal along the  1D axis.</param>
            <param name="axis2">The axis of the removal along the  2D axis.</param>
            <param name="axis3">The axis of the removal along the  3D axis.</param>
            <param name="axis4">The axis of the removal along the  4D axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`5.Stepper(Towel.Step{`0})">
            <summary>Traverses every item in the tree and performs the delegate in them.</summary>
            <param name="function">The delegate to perform on every item in the tree.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`5.Stepper(Towel.StepBreak{`0})">
            <summary>Traverses every item in the tree and performs the delegate in them.</summary>
            <param name="function">The delegate to perform on every item in the tree.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`5.Stepper(Towel.Step{`0},`1,`1,`2,`2,`3,`3,`4,`4)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="function">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`5.Stepper(Towel.Step{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="function">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`5.Stepper(Towel.StepBreak{`0},`1,`1,`2,`2,`3,`3,`4,`4)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`5.Stepper(Towel.StepBreak{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`5.Stepper(Towel.Step{`0},`1,`2,`3,`4)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="axis1">The axis of the removal along the  1D axis.</param>
            <param name="axis2">The axis of the removal along the  2D axis.</param>
            <param name="axis3">The axis of the removal along the  3D axis.</param>
            <param name="axis4">The axis of the removal along the  4D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`5.Stepper(Towel.StepBreak{`0},`1,`2,`3,`4)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="function">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="axis1">The axis of the removal along the  1D axis.</param>
            <param name="axis2">The axis of the removal along the  2D axis.</param>
            <param name="axis3">The axis of the removal along the  3D axis.</param>
            <param name="axis4">The axis of the removal along the  4D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`5.System#Collections#IEnumerable#GetEnumerator">
            <summary>FOR COMPATIBILITY ONLY. AVOID IF POSSIBLE.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`5.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>FOR COMPATIBILITY ONLY. AVOID IF POSSIBLE.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`5.DetermineChildIndex(Towel.DataStructures.Omnitree.Vector{`1,`2,`3,`4},Towel.DataStructures.Omnitree.Vector{`1,`2,`3,`4})">
            <summary>Computes the child index that contains the desired dimensions.</summary>
            <param name="node">The branch .</param>
            <param name="vector">The dimensions to determine the child index.</param>
            <returns>The computed child index based on the coordinates relative to the center of the node.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`5.ShrinkChild(Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2,`3,`4}.Branch,System.Int32)">
            <summary>Converts a branch back into a leaf when the count is reduced.</summary>
            <param name="parent">The parent to shrink a child of.</param>
            <param name="child">The index of the child to shrink.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`5.ReduceParentCounts(Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2,`3,`4}.Node,System.Int32)">
            <summary>Reduces the counts of all the parents of a given node by a given amount.</summary>
            <param name="parent">The starting parent of the reduction.</param>
            <param name="reduction">The amount to reduce the parent counts by.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`5.IncreaseParentCounts(Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2,`3,`4}.Node,System.Int32)">
            <summary>Increases the counts of all the parents of a given node by a given amount.</summary>
            <param name="parent">The starting parent of the increase.</param>
            <param name="increase">The amount to increase the parent counts by.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`5.InclusionCheck(Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4},Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4})">
            <summary>Checks a node for inclusion (overlap) between two bounds.</summary>
            <returns>True if the spaces overlap; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`5.EncapsulationCheck(Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4},Towel.DataStructures.Omnitree.Vector{`1,`2,`3,`4})">
            <summary>Checks if a space encapsulates a point.</summary>
            <returns>True if the space encapsulates the point; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`5.EncapsulationCheck(Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4},Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4})">
            <summary>Checks if a space (left) encapsulates another space (right).</summary>
            <returns>True if the left space encapsulates the right; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`5.EqualsCheck(Towel.DataStructures.Omnitree.Vector{`1,`2,`3,`4},Towel.DataStructures.Omnitree.Vector{`1,`2,`3,`4})">
            <summary>Checks for equality between two locations.</summary>
            <returns>True if equal; False if not;</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`5.GetEncapsulationParent(Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2,`3,`4}.Node,Towel.DataStructures.Omnitree.Vector{`1,`2,`3,`4})">
            <summary>Gets the nearest parent that encapsulates a location.</summary>
            <param name="node">The starting node to find the encapsulating parent of the location.</param>
            <param name="coordinate1">The coordinate along the 1D axis.</param>
            <param name="coordinate2">The coordinate along the 2D axis.</param>
            <param name="coordinate3">The coordinate along the 3D axis.</param>
            <returns>The nearest node that encapsulates the given location.</returns>
        </member>
        <member name="P:Towel.DataStructures.IOmnitreePoints`6.Item(`1,`2,`3,`4,`5)">
            <summary>Steps through the values at a given location.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="axis5">The coordinate along the 5D axis.</param>
            <returns>A Stepper of the items at the given coordinates.</returns>
        </member>
        <member name="P:Towel.DataStructures.IOmnitreePoints`6.Dimensions">
            <summary>The number of dimensions in this tree.</summary>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`6.CountSubSpace(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5})">
            <summary>Counts the number of items in a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`6.Update">
            <summary>Iterates through the entire tree and ensures each item is in the proper leaf.</summary>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`6.Update(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5})">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`6.Remove(`1,`2,`3,`4,`5)">
            <summary>Removes all the items in a given space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="axis5">The coordinate along the 5D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`6.Remove(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5})">
            <summary>Removes all the items in a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`6.Remove(`1,`2,`3,`4,`5,System.Predicate{`0})">
            <summary>Removes all the items in a given space where equality is met.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="axis5">The coordinate along the 5D axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`6.Remove(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},System.Predicate{`0})">
            <summary>Removes all the items in a given space where predicate is met.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="where">The predicate constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`6.Stepper(Towel.Step{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`6.Stepper(Towel.StepBreak{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`6.Stepper(Towel.Step{`0},`1,`2,`3,`4,`5)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="axis5">The coordinate along the 5D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`6.Stepper(Towel.StepBreak{`0},`1,`2,`3,`4,`5)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="axis5">The coordinate along the 5D axis.</param>
        </member>
        <member name="T:Towel.DataStructures.OmnitreePointsLinked`6.Node">
            <summary>Can be a leaf or a branch.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`6.Node.Depth">
            <summary>The depth this node is located in the Omnitree.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`6.Node.#ctor(Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5},Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2,`3,`4,`5}.Branch,System.Int32)">
            <summary>Constructs a node.</summary>
            <param name="bounds">The bounds of this node.</param>
            <param name="parent">The parent of this node.</param>
            <param name="index">The number of elements stored in this node and its children.</param>
        </member>
        <member name="T:Towel.DataStructures.OmnitreePointsLinked`6.Branch">
            <summary>A branch in the tree. Only contains nodes.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`6.Branch.Item(System.Int32)">
            <summary>Gets child by index.</summary>
            <param name="child_index">The index of the child to get.</param>
            <returns>The child of the given index or null if non-existent.</returns>
        </member>
        <member name="T:Towel.DataStructures.OmnitreePointsLinked`6.Leaf">
            <summary>A branch in the tree. Only contains items.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`6.#ctor(Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2,`3,`4,`5})">
            <summary>This constructor is for cloning purposes</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`6.Item(`1,`2,`3,`4,`5)">
            <summary>Steps through all the items at a given coordinate.</summary>
            <param name="axis1">The coordinate along axis 1.</param>
            <param name="axis2">The coordinate along axis 2.</param>
            <param name="axis3">The coordinate along axis 3.</param>
            <param name="axis4">The coordinate along axis 4.</param>
            <param name="axis5">The coordinate along axis 5.</param>
            <returns>The stepper for the items at the given coordinate.</returns>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`6.Dimensions">
            <summary>The number of dimensions in this tree.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`6.Equate">
            <summary>The function for equating keys in this table.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`6.Locate">
            <summary>The location function the Omnitree is using.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`6.Compare1">
            <summary>The comparison function the Omnitree is using along the 1D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`6.Compare2">
            <summary>The comparison function the Omnitree is using along the 2D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`6.Compare3">
            <summary>The comparison function the Omnitree is using along the 3D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`6.Compare4">
            <summary>The comparison function the Omnitree is using along the 4D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`6.Compare5">
            <summary>The comparison function the Omnitree is using along the 5D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`6.EquateAxis1">
            <summary>The function for equating values along the 1D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`6.EquateAxis2">
            <summary>The function for equating values along the 2D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`6.EquateAxis3">
            <summary>The function for equating values along the 3D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`6.EquateAxis4">
            <summary>The function for equating values along the 4D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`6.EquateAxis5">
            <summary>The function for equating values along the 5D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`6.Count">
            <summary>The current number of items in the tree.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`6.MaxDepth">
            <summary>Finds the current maximum depth of the tree. NOT AN O(1) OPERATION. Intended for educational purposes only.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`6.NodeCount">
            <summary>Counts the current number of nodes in the tree. NOT AN O(1) OPERATION. Intended for educational purposes only.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`6.BranchCount">
            <summary>Counts the current number of branches in the tree. NOT AN O(1) OPERATION. Intended for educational purposes only.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`6.LeafCount">
            <summary>Counts the current number of leaves in the tree. NOT AN O(1) OPERATION. Intended for educational purposes only.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`6.GetMedianIndexes(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>Gets the indeces of the median values at the given position during bulk additions.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`6.Add(`0)">
            <summary>Adds an item to the tree.</summary>
            <param name="addition">The item to be added.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`6.Add(`0,Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2,`3,`4,`5}.Node,Towel.DataStructures.Omnitree.Vector{`1,`2,`3,`4,`5},System.Int32)">
            <summary>Recursive version of the add function.</summary>
            <param name="addition">The item to be added.</param>
            <param name="node">The current node for tree trversal.</param>
            <param name="ms">The location of the addition.</param>
            <param name="depth">The current depth of iteration.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`6.DetermineMedians(Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2,`3,`4,`5}.Leaf)">
            <summary>Determins the dimensions of the child at the given index.</summary>
            <param name="leaf">The parent of the node to compute dimensions for.</param>
            <param name="child">The index of the child to compute dimensions for.</param>
            <param name="median1">The computed minimum dimensions of the child node along the 1D axis.</param>
            <param name="median2">The computed minimum dimensions of the child node along the 2D axis.</param>
            <param name="median3">The computed minimum dimensions of the child node along the 3D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`6.Clear">
            <summary>Returns the tree to an empty state.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`6.Clone">
            <summary>Creates a shallow clone of this data structure.</summary>
            <returns>A shallow clone of this data structure.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`6.CountSubSpace(`1,`1,`2,`2,`3,`3,`4,`4,`5,`5)">
            <summary>Counts the number of items in a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`6.CountSubSpace(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5})">
            <summary>Counts the number of items in a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`6.CountSubSpace(`1,`2,`3,`4,`5)">
            <summary>Counts the number of items in a sub space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="axis5">The coordinate along the 5D axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`6.CountSubSpace(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5})">
            <summary>Counts the number of items in a sub space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="axis5">The coordinate along the 5D axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`6.CountSubSpace(Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2,`3,`4,`5}.Node,Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5})">
            <summary>Counts the number of items in a sub space.</summary>
            <param name="node">The current traversal node.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`6.Update">
            <summary>Iterates through the entire tree and ensures each item is in the proper leaf.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`6.Update(Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2,`3,`4,`5}.Node,System.Int32)">
            <summary>Recursive version of the Update method.</summary>
            <param name="node">The current node of iteration.</param>
            <param name="depth">The current depth of iteration.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`6.Update(`1,`1,`2,`2,`3,`3,`4,`4,`5,`5)">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`6.Update(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5})">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`6.Update(`1,`2,`3,`4,`5)">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="axis5">The coordinate along the 5D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`6.Update(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5})">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="axis5">The coordinate along the 5D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`6.Remove(System.Predicate{`0})">
            <summary>Removes all the items qualified by the delegate.</summary>
            <param name="where">The predicate to qualify removals.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`6.Remove(Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2,`3,`4,`5}.Node,System.Predicate{`0})">
            <summary>Recursive version of the remove method.</summary>
            <param name="node">The current node of traversal.</param>
            <param name="where">The predicate to qualify removals.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`6.Remove(`1,`1,`2,`2,`3,`3,`4,`4,`5,`5)">
            <summary>Removes all the items in a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <returns>The number of items that were removed.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`6.Remove(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5})">
            <summary>Removes all the items in a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <returns>The number of items that were removed.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`6.Remove(`1,`1,`2,`2,`3,`3,`4,`4,`5,`5,System.Predicate{`0})">
            <summary>Removes all the items in a given space validated by a predicate.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`6.Remove(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},System.Predicate{`0})">
            <summary>Removes all the items in a given space validated by a predicate.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`6.Remove(`0)">
            <summary>Removes all instances of a given value.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`6.Remove(`1,`2,`3,`4,`5)">
            <summary>Removes all the items in a given space.</summary>
            <param name="axis1">The axis of the removal along the  1D axis.</param>
            <param name="axis2">The axis of the removal along the  2D axis.</param>
            <param name="axis3">The axis of the removal along the  3D axis.</param>
            <param name="axis4">The axis of the removal along the  4D axis.</param>
            <param name="axis5">The axis of the removal along the  5D axis.</param>
            <returns>The number of items that were removed.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`6.Remove(`1,`2,`3,`4,`5,System.Predicate{`0})">
            <summary>Removes all the items in a given space validated by a predicate.</summary>
            <param name="axis1">The axis of the removal along the  1D axis.</param>
            <param name="axis2">The axis of the removal along the  2D axis.</param>
            <param name="axis3">The axis of the removal along the  3D axis.</param>
            <param name="axis4">The axis of the removal along the  4D axis.</param>
            <param name="axis5">The axis of the removal along the  5D axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`6.Stepper(Towel.Step{`0})">
            <summary>Traverses every item in the tree and performs the delegate in them.</summary>
            <param name="function">The delegate to perform on every item in the tree.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`6.Stepper(Towel.StepBreak{`0})">
            <summary>Traverses every item in the tree and performs the delegate in them.</summary>
            <param name="function">The delegate to perform on every item in the tree.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`6.Stepper(Towel.Step{`0},`1,`1,`2,`2,`3,`3,`4,`4,`5,`5)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="function">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`6.Stepper(Towel.Step{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="function">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`6.Stepper(Towel.StepBreak{`0},`1,`1,`2,`2,`3,`3,`4,`4,`5,`5)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`6.Stepper(Towel.StepBreak{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`6.Stepper(Towel.Step{`0},`1,`2,`3,`4,`5)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="axis1">The axis of the removal along the  1D axis.</param>
            <param name="axis2">The axis of the removal along the  2D axis.</param>
            <param name="axis3">The axis of the removal along the  3D axis.</param>
            <param name="axis4">The axis of the removal along the  4D axis.</param>
            <param name="axis5">The axis of the removal along the  5D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`6.Stepper(Towel.StepBreak{`0},`1,`2,`3,`4,`5)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="function">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="axis1">The axis of the removal along the  1D axis.</param>
            <param name="axis2">The axis of the removal along the  2D axis.</param>
            <param name="axis3">The axis of the removal along the  3D axis.</param>
            <param name="axis4">The axis of the removal along the  4D axis.</param>
            <param name="axis5">The axis of the removal along the  5D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`6.System#Collections#IEnumerable#GetEnumerator">
            <summary>FOR COMPATIBILITY ONLY. AVOID IF POSSIBLE.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`6.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>FOR COMPATIBILITY ONLY. AVOID IF POSSIBLE.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`6.DetermineChildIndex(Towel.DataStructures.Omnitree.Vector{`1,`2,`3,`4,`5},Towel.DataStructures.Omnitree.Vector{`1,`2,`3,`4,`5})">
            <summary>Computes the child index that contains the desired dimensions.</summary>
            <param name="node">The branch .</param>
            <param name="vector">The dimensions to determine the child index.</param>
            <returns>The computed child index based on the coordinates relative to the center of the node.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`6.ShrinkChild(Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2,`3,`4,`5}.Branch,System.Int32)">
            <summary>Converts a branch back into a leaf when the count is reduced.</summary>
            <param name="parent">The parent to shrink a child of.</param>
            <param name="child">The index of the child to shrink.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`6.ReduceParentCounts(Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2,`3,`4,`5}.Node,System.Int32)">
            <summary>Reduces the counts of all the parents of a given node by a given amount.</summary>
            <param name="parent">The starting parent of the reduction.</param>
            <param name="reduction">The amount to reduce the parent counts by.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`6.IncreaseParentCounts(Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2,`3,`4,`5}.Node,System.Int32)">
            <summary>Increases the counts of all the parents of a given node by a given amount.</summary>
            <param name="parent">The starting parent of the increase.</param>
            <param name="increase">The amount to increase the parent counts by.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`6.InclusionCheck(Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5},Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5})">
            <summary>Checks a node for inclusion (overlap) between two bounds.</summary>
            <returns>True if the spaces overlap; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`6.EncapsulationCheck(Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5},Towel.DataStructures.Omnitree.Vector{`1,`2,`3,`4,`5})">
            <summary>Checks if a space encapsulates a point.</summary>
            <returns>True if the space encapsulates the point; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`6.EncapsulationCheck(Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5},Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5})">
            <summary>Checks if a space (left) encapsulates another space (right).</summary>
            <returns>True if the left space encapsulates the right; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`6.EqualsCheck(Towel.DataStructures.Omnitree.Vector{`1,`2,`3,`4,`5},Towel.DataStructures.Omnitree.Vector{`1,`2,`3,`4,`5})">
            <summary>Checks for equality between two locations.</summary>
            <returns>True if equal; False if not;</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`6.GetEncapsulationParent(Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2,`3,`4,`5}.Node,Towel.DataStructures.Omnitree.Vector{`1,`2,`3,`4,`5})">
            <summary>Gets the nearest parent that encapsulates a location.</summary>
            <param name="node">The starting node to find the encapsulating parent of the location.</param>
            <param name="coordinate1">The coordinate along the 1D axis.</param>
            <param name="coordinate2">The coordinate along the 2D axis.</param>
            <param name="coordinate3">The coordinate along the 3D axis.</param>
            <returns>The nearest node that encapsulates the given location.</returns>
        </member>
        <member name="P:Towel.DataStructures.IOmnitreePoints`7.Item(`1,`2,`3,`4,`5,`6)">
            <summary>Steps through the values at a given location.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="axis5">The coordinate along the 5D axis.</param>
            <param name="axis6">The coordinate along the 6D axis.</param>
            <returns>A Stepper of the items at the given coordinates.</returns>
        </member>
        <member name="P:Towel.DataStructures.IOmnitreePoints`7.Dimensions">
            <summary>The number of dimensions in this tree.</summary>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`7.CountSubSpace(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`6})">
            <summary>Counts the number of items in a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`7.Update">
            <summary>Iterates through the entire tree and ensures each item is in the proper leaf.</summary>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`7.Update(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`6})">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`7.Remove(`1,`2,`3,`4,`5,`6)">
            <summary>Removes all the items in a given space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="axis5">The coordinate along the 5D axis.</param>
            <param name="axis6">The coordinate along the 6D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`7.Remove(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`6})">
            <summary>Removes all the items in a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`7.Remove(`1,`2,`3,`4,`5,`6,System.Predicate{`0})">
            <summary>Removes all the items in a given space where equality is met.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="axis5">The coordinate along the 5D axis.</param>
            <param name="axis6">The coordinate along the 6D axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`7.Remove(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`6},System.Predicate{`0})">
            <summary>Removes all the items in a given space where predicate is met.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="where">The predicate constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`7.Stepper(Towel.Step{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`6})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`7.Stepper(Towel.StepBreak{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`6})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`7.Stepper(Towel.Step{`0},`1,`2,`3,`4,`5,`6)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="axis5">The coordinate along the 5D axis.</param>
            <param name="axis6">The coordinate along the 6D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`7.Stepper(Towel.StepBreak{`0},`1,`2,`3,`4,`5,`6)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="axis5">The coordinate along the 5D axis.</param>
            <param name="axis6">The coordinate along the 6D axis.</param>
        </member>
        <member name="T:Towel.DataStructures.OmnitreePointsLinked`7.Node">
            <summary>Can be a leaf or a branch.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`7.Node.Depth">
            <summary>The depth this node is located in the Omnitree.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`7.Node.#ctor(Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5,`6},Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2,`3,`4,`5,`6}.Branch,System.Int32)">
            <summary>Constructs a node.</summary>
            <param name="bounds">The bounds of this node.</param>
            <param name="parent">The parent of this node.</param>
            <param name="index">The number of elements stored in this node and its children.</param>
        </member>
        <member name="T:Towel.DataStructures.OmnitreePointsLinked`7.Branch">
            <summary>A branch in the tree. Only contains nodes.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`7.Branch.Item(System.Int32)">
            <summary>Gets child by index.</summary>
            <param name="child_index">The index of the child to get.</param>
            <returns>The child of the given index or null if non-existent.</returns>
        </member>
        <member name="T:Towel.DataStructures.OmnitreePointsLinked`7.Leaf">
            <summary>A branch in the tree. Only contains items.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`7.#ctor(Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2,`3,`4,`5,`6})">
            <summary>This constructor is for cloning purposes</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`7.Item(`1,`2,`3,`4,`5,`6)">
            <summary>Steps through all the items at a given coordinate.</summary>
            <param name="axis1">The coordinate along axis 1.</param>
            <param name="axis2">The coordinate along axis 2.</param>
            <param name="axis3">The coordinate along axis 3.</param>
            <param name="axis4">The coordinate along axis 4.</param>
            <param name="axis5">The coordinate along axis 5.</param>
            <param name="axis6">The coordinate along axis 6.</param>
            <returns>The stepper for the items at the given coordinate.</returns>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`7.Dimensions">
            <summary>The number of dimensions in this tree.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`7.Equate">
            <summary>The function for equating keys in this table.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`7.Locate">
            <summary>The location function the Omnitree is using.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`7.Compare1">
            <summary>The comparison function the Omnitree is using along the 1D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`7.Compare2">
            <summary>The comparison function the Omnitree is using along the 2D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`7.Compare3">
            <summary>The comparison function the Omnitree is using along the 3D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`7.Compare4">
            <summary>The comparison function the Omnitree is using along the 4D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`7.Compare5">
            <summary>The comparison function the Omnitree is using along the 5D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`7.Compare6">
            <summary>The comparison function the Omnitree is using along the 6D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`7.EquateAxis1">
            <summary>The function for equating values along the 1D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`7.EquateAxis2">
            <summary>The function for equating values along the 2D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`7.EquateAxis3">
            <summary>The function for equating values along the 3D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`7.EquateAxis4">
            <summary>The function for equating values along the 4D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`7.EquateAxis5">
            <summary>The function for equating values along the 5D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`7.EquateAxis6">
            <summary>The function for equating values along the 6D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`7.Count">
            <summary>The current number of items in the tree.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`7.MaxDepth">
            <summary>Finds the current maximum depth of the tree. NOT AN O(1) OPERATION. Intended for educational purposes only.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`7.NodeCount">
            <summary>Counts the current number of nodes in the tree. NOT AN O(1) OPERATION. Intended for educational purposes only.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`7.BranchCount">
            <summary>Counts the current number of branches in the tree. NOT AN O(1) OPERATION. Intended for educational purposes only.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`7.LeafCount">
            <summary>Counts the current number of leaves in the tree. NOT AN O(1) OPERATION. Intended for educational purposes only.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`7.GetMedianIndexes(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>Gets the indeces of the median values at the given position during bulk additions.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`7.Add(`0)">
            <summary>Adds an item to the tree.</summary>
            <param name="addition">The item to be added.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`7.Add(`0,Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2,`3,`4,`5,`6}.Node,Towel.DataStructures.Omnitree.Vector{`1,`2,`3,`4,`5,`6},System.Int32)">
            <summary>Recursive version of the add function.</summary>
            <param name="addition">The item to be added.</param>
            <param name="node">The current node for tree trversal.</param>
            <param name="ms">The location of the addition.</param>
            <param name="depth">The current depth of iteration.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`7.DetermineMedians(Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2,`3,`4,`5,`6}.Leaf)">
            <summary>Determins the dimensions of the child at the given index.</summary>
            <param name="leaf">The parent of the node to compute dimensions for.</param>
            <param name="child">The index of the child to compute dimensions for.</param>
            <param name="median1">The computed minimum dimensions of the child node along the 1D axis.</param>
            <param name="median2">The computed minimum dimensions of the child node along the 2D axis.</param>
            <param name="median3">The computed minimum dimensions of the child node along the 3D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`7.Clear">
            <summary>Returns the tree to an empty state.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`7.Clone">
            <summary>Creates a shallow clone of this data structure.</summary>
            <returns>A shallow clone of this data structure.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`7.CountSubSpace(`1,`1,`2,`2,`3,`3,`4,`4,`5,`5,`6,`6)">
            <summary>Counts the number of items in a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`7.CountSubSpace(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`6})">
            <summary>Counts the number of items in a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`7.CountSubSpace(`1,`2,`3,`4,`5,`6)">
            <summary>Counts the number of items in a sub space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="axis5">The coordinate along the 5D axis.</param>
            <param name="axis6">The coordinate along the 6D axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`7.CountSubSpace(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6})">
            <summary>Counts the number of items in a sub space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="axis5">The coordinate along the 5D axis.</param>
            <param name="axis6">The coordinate along the 6D axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`7.CountSubSpace(Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2,`3,`4,`5,`6}.Node,Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5,`6})">
            <summary>Counts the number of items in a sub space.</summary>
            <param name="node">The current traversal node.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`7.Update">
            <summary>Iterates through the entire tree and ensures each item is in the proper leaf.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`7.Update(Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2,`3,`4,`5,`6}.Node,System.Int32)">
            <summary>Recursive version of the Update method.</summary>
            <param name="node">The current node of iteration.</param>
            <param name="depth">The current depth of iteration.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`7.Update(`1,`1,`2,`2,`3,`3,`4,`4,`5,`5,`6,`6)">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`7.Update(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`6})">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`7.Update(`1,`2,`3,`4,`5,`6)">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="axis5">The coordinate along the 5D axis.</param>
            <param name="axis6">The coordinate along the 6D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`7.Update(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6})">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="axis5">The coordinate along the 5D axis.</param>
            <param name="axis6">The coordinate along the 6D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`7.Remove(System.Predicate{`0})">
            <summary>Removes all the items qualified by the delegate.</summary>
            <param name="where">The predicate to qualify removals.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`7.Remove(Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2,`3,`4,`5,`6}.Node,System.Predicate{`0})">
            <summary>Recursive version of the remove method.</summary>
            <param name="node">The current node of traversal.</param>
            <param name="where">The predicate to qualify removals.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`7.Remove(`1,`1,`2,`2,`3,`3,`4,`4,`5,`5,`6,`6)">
            <summary>Removes all the items in a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <returns>The number of items that were removed.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`7.Remove(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`6})">
            <summary>Removes all the items in a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <returns>The number of items that were removed.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`7.Remove(`1,`1,`2,`2,`3,`3,`4,`4,`5,`5,`6,`6,System.Predicate{`0})">
            <summary>Removes all the items in a given space validated by a predicate.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`7.Remove(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`6},System.Predicate{`0})">
            <summary>Removes all the items in a given space validated by a predicate.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`7.Remove(`0)">
            <summary>Removes all instances of a given value.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`7.Remove(`1,`2,`3,`4,`5,`6)">
            <summary>Removes all the items in a given space.</summary>
            <param name="axis1">The axis of the removal along the  1D axis.</param>
            <param name="axis2">The axis of the removal along the  2D axis.</param>
            <param name="axis3">The axis of the removal along the  3D axis.</param>
            <param name="axis4">The axis of the removal along the  4D axis.</param>
            <param name="axis5">The axis of the removal along the  5D axis.</param>
            <param name="axis6">The axis of the removal along the  6D axis.</param>
            <returns>The number of items that were removed.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`7.Remove(`1,`2,`3,`4,`5,`6,System.Predicate{`0})">
            <summary>Removes all the items in a given space validated by a predicate.</summary>
            <param name="axis1">The axis of the removal along the  1D axis.</param>
            <param name="axis2">The axis of the removal along the  2D axis.</param>
            <param name="axis3">The axis of the removal along the  3D axis.</param>
            <param name="axis4">The axis of the removal along the  4D axis.</param>
            <param name="axis5">The axis of the removal along the  5D axis.</param>
            <param name="axis6">The axis of the removal along the  6D axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`7.Stepper(Towel.Step{`0})">
            <summary>Traverses every item in the tree and performs the delegate in them.</summary>
            <param name="function">The delegate to perform on every item in the tree.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`7.Stepper(Towel.StepBreak{`0})">
            <summary>Traverses every item in the tree and performs the delegate in them.</summary>
            <param name="function">The delegate to perform on every item in the tree.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`7.Stepper(Towel.Step{`0},`1,`1,`2,`2,`3,`3,`4,`4,`5,`5,`6,`6)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="function">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`7.Stepper(Towel.Step{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`6})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="function">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`7.Stepper(Towel.StepBreak{`0},`1,`1,`2,`2,`3,`3,`4,`4,`5,`5,`6,`6)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`7.Stepper(Towel.StepBreak{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`6})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`7.Stepper(Towel.Step{`0},`1,`2,`3,`4,`5,`6)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="axis1">The axis of the removal along the  1D axis.</param>
            <param name="axis2">The axis of the removal along the  2D axis.</param>
            <param name="axis3">The axis of the removal along the  3D axis.</param>
            <param name="axis4">The axis of the removal along the  4D axis.</param>
            <param name="axis5">The axis of the removal along the  5D axis.</param>
            <param name="axis6">The axis of the removal along the  6D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`7.Stepper(Towel.StepBreak{`0},`1,`2,`3,`4,`5,`6)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="function">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="axis1">The axis of the removal along the  1D axis.</param>
            <param name="axis2">The axis of the removal along the  2D axis.</param>
            <param name="axis3">The axis of the removal along the  3D axis.</param>
            <param name="axis4">The axis of the removal along the  4D axis.</param>
            <param name="axis5">The axis of the removal along the  5D axis.</param>
            <param name="axis6">The axis of the removal along the  6D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`7.System#Collections#IEnumerable#GetEnumerator">
            <summary>FOR COMPATIBILITY ONLY. AVOID IF POSSIBLE.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`7.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>FOR COMPATIBILITY ONLY. AVOID IF POSSIBLE.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`7.DetermineChildIndex(Towel.DataStructures.Omnitree.Vector{`1,`2,`3,`4,`5,`6},Towel.DataStructures.Omnitree.Vector{`1,`2,`3,`4,`5,`6})">
            <summary>Computes the child index that contains the desired dimensions.</summary>
            <param name="node">The branch .</param>
            <param name="vector">The dimensions to determine the child index.</param>
            <returns>The computed child index based on the coordinates relative to the center of the node.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`7.ShrinkChild(Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2,`3,`4,`5,`6}.Branch,System.Int32)">
            <summary>Converts a branch back into a leaf when the count is reduced.</summary>
            <param name="parent">The parent to shrink a child of.</param>
            <param name="child">The index of the child to shrink.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`7.ReduceParentCounts(Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2,`3,`4,`5,`6}.Node,System.Int32)">
            <summary>Reduces the counts of all the parents of a given node by a given amount.</summary>
            <param name="parent">The starting parent of the reduction.</param>
            <param name="reduction">The amount to reduce the parent counts by.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`7.IncreaseParentCounts(Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2,`3,`4,`5,`6}.Node,System.Int32)">
            <summary>Increases the counts of all the parents of a given node by a given amount.</summary>
            <param name="parent">The starting parent of the increase.</param>
            <param name="increase">The amount to increase the parent counts by.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`7.InclusionCheck(Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5,`6},Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5,`6})">
            <summary>Checks a node for inclusion (overlap) between two bounds.</summary>
            <returns>True if the spaces overlap; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`7.EncapsulationCheck(Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5,`6},Towel.DataStructures.Omnitree.Vector{`1,`2,`3,`4,`5,`6})">
            <summary>Checks if a space encapsulates a point.</summary>
            <returns>True if the space encapsulates the point; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`7.EncapsulationCheck(Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5,`6},Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5,`6})">
            <summary>Checks if a space (left) encapsulates another space (right).</summary>
            <returns>True if the left space encapsulates the right; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`7.EqualsCheck(Towel.DataStructures.Omnitree.Vector{`1,`2,`3,`4,`5,`6},Towel.DataStructures.Omnitree.Vector{`1,`2,`3,`4,`5,`6})">
            <summary>Checks for equality between two locations.</summary>
            <returns>True if equal; False if not;</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`7.GetEncapsulationParent(Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2,`3,`4,`5,`6}.Node,Towel.DataStructures.Omnitree.Vector{`1,`2,`3,`4,`5,`6})">
            <summary>Gets the nearest parent that encapsulates a location.</summary>
            <param name="node">The starting node to find the encapsulating parent of the location.</param>
            <param name="coordinate1">The coordinate along the 1D axis.</param>
            <param name="coordinate2">The coordinate along the 2D axis.</param>
            <param name="coordinate3">The coordinate along the 3D axis.</param>
            <returns>The nearest node that encapsulates the given location.</returns>
        </member>
        <member name="P:Towel.DataStructures.IOmnitreePoints`8.Item(`1,`2,`3,`4,`5,`6,`7)">
            <summary>Steps through the values at a given location.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="axis5">The coordinate along the 5D axis.</param>
            <param name="axis6">The coordinate along the 6D axis.</param>
            <param name="axis7">The coordinate along the 7D axis.</param>
            <returns>A Stepper of the items at the given coordinates.</returns>
        </member>
        <member name="P:Towel.DataStructures.IOmnitreePoints`8.Dimensions">
            <summary>The number of dimensions in this tree.</summary>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`8.CountSubSpace(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`7},Towel.DataStructures.Omnitree.Bound{`7})">
            <summary>Counts the number of items in a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="min7">The minimum coordinate of the space along the 7 axis.</param>
            <param name="max7">The maximum coordinate of the space along the 7 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`8.Update">
            <summary>Iterates through the entire tree and ensures each item is in the proper leaf.</summary>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`8.Update(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`7},Towel.DataStructures.Omnitree.Bound{`7})">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="min7">The minimum coordinate of the space along the 7 axis.</param>
            <param name="max7">The maximum coordinate of the space along the 7 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`8.Remove(`1,`2,`3,`4,`5,`6,`7)">
            <summary>Removes all the items in a given space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="axis5">The coordinate along the 5D axis.</param>
            <param name="axis6">The coordinate along the 6D axis.</param>
            <param name="axis7">The coordinate along the 7D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`8.Remove(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`7},Towel.DataStructures.Omnitree.Bound{`7})">
            <summary>Removes all the items in a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="min7">The minimum coordinate of the space along the 7 axis.</param>
            <param name="max7">The maximum coordinate of the space along the 7 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`8.Remove(`1,`2,`3,`4,`5,`6,`7,System.Predicate{`0})">
            <summary>Removes all the items in a given space where equality is met.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="axis5">The coordinate along the 5D axis.</param>
            <param name="axis6">The coordinate along the 6D axis.</param>
            <param name="axis7">The coordinate along the 7D axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`8.Remove(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`7},Towel.DataStructures.Omnitree.Bound{`7},System.Predicate{`0})">
            <summary>Removes all the items in a given space where predicate is met.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="min7">The minimum coordinate of the space along the 7 axis.</param>
            <param name="max7">The maximum coordinate of the space along the 7 axis.</param>
            <param name="where">The predicate constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`8.Stepper(Towel.Step{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`7},Towel.DataStructures.Omnitree.Bound{`7})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="min7">The minimum coordinate of the space along the 7 axis.</param>
            <param name="max7">The maximum coordinate of the space along the 7 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`8.Stepper(Towel.StepBreak{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`7},Towel.DataStructures.Omnitree.Bound{`7})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="min7">The minimum coordinate of the space along the 7 axis.</param>
            <param name="max7">The maximum coordinate of the space along the 7 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`8.Stepper(Towel.Step{`0},`1,`2,`3,`4,`5,`6,`7)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="axis5">The coordinate along the 5D axis.</param>
            <param name="axis6">The coordinate along the 6D axis.</param>
            <param name="axis7">The coordinate along the 7D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`8.Stepper(Towel.StepBreak{`0},`1,`2,`3,`4,`5,`6,`7)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="axis5">The coordinate along the 5D axis.</param>
            <param name="axis6">The coordinate along the 6D axis.</param>
            <param name="axis7">The coordinate along the 7D axis.</param>
        </member>
        <member name="T:Towel.DataStructures.OmnitreePointsLinked`8.Node">
            <summary>Can be a leaf or a branch.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`8.Node.Depth">
            <summary>The depth this node is located in the Omnitree.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`8.Node.#ctor(Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5,`6,`7},Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2,`3,`4,`5,`6,`7}.Branch,System.Int32)">
            <summary>Constructs a node.</summary>
            <param name="bounds">The bounds of this node.</param>
            <param name="parent">The parent of this node.</param>
            <param name="index">The number of elements stored in this node and its children.</param>
        </member>
        <member name="T:Towel.DataStructures.OmnitreePointsLinked`8.Branch">
            <summary>A branch in the tree. Only contains nodes.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`8.Branch.Item(System.Int32)">
            <summary>Gets child by index.</summary>
            <param name="child_index">The index of the child to get.</param>
            <returns>The child of the given index or null if non-existent.</returns>
        </member>
        <member name="T:Towel.DataStructures.OmnitreePointsLinked`8.Leaf">
            <summary>A branch in the tree. Only contains items.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`8.#ctor(Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2,`3,`4,`5,`6,`7})">
            <summary>This constructor is for cloning purposes</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`8.Item(`1,`2,`3,`4,`5,`6,`7)">
            <summary>Steps through all the items at a given coordinate.</summary>
            <param name="axis1">The coordinate along axis 1.</param>
            <param name="axis2">The coordinate along axis 2.</param>
            <param name="axis3">The coordinate along axis 3.</param>
            <param name="axis4">The coordinate along axis 4.</param>
            <param name="axis5">The coordinate along axis 5.</param>
            <param name="axis6">The coordinate along axis 6.</param>
            <param name="axis7">The coordinate along axis 7.</param>
            <returns>The stepper for the items at the given coordinate.</returns>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`8.Dimensions">
            <summary>The number of dimensions in this tree.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`8.Equate">
            <summary>The function for equating keys in this table.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`8.Locate">
            <summary>The location function the Omnitree is using.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`8.Compare1">
            <summary>The comparison function the Omnitree is using along the 1D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`8.Compare2">
            <summary>The comparison function the Omnitree is using along the 2D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`8.Compare3">
            <summary>The comparison function the Omnitree is using along the 3D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`8.Compare4">
            <summary>The comparison function the Omnitree is using along the 4D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`8.Compare5">
            <summary>The comparison function the Omnitree is using along the 5D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`8.Compare6">
            <summary>The comparison function the Omnitree is using along the 6D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`8.Compare7">
            <summary>The comparison function the Omnitree is using along the 7D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`8.EquateAxis1">
            <summary>The function for equating values along the 1D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`8.EquateAxis2">
            <summary>The function for equating values along the 2D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`8.EquateAxis3">
            <summary>The function for equating values along the 3D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`8.EquateAxis4">
            <summary>The function for equating values along the 4D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`8.EquateAxis5">
            <summary>The function for equating values along the 5D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`8.EquateAxis6">
            <summary>The function for equating values along the 6D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`8.EquateAxis7">
            <summary>The function for equating values along the 7D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`8.Count">
            <summary>The current number of items in the tree.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`8.MaxDepth">
            <summary>Finds the current maximum depth of the tree. NOT AN O(1) OPERATION. Intended for educational purposes only.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`8.NodeCount">
            <summary>Counts the current number of nodes in the tree. NOT AN O(1) OPERATION. Intended for educational purposes only.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`8.BranchCount">
            <summary>Counts the current number of branches in the tree. NOT AN O(1) OPERATION. Intended for educational purposes only.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`8.LeafCount">
            <summary>Counts the current number of leaves in the tree. NOT AN O(1) OPERATION. Intended for educational purposes only.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`8.GetMedianIndexes(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>Gets the indeces of the median values at the given position during bulk additions.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`8.Add(`0)">
            <summary>Adds an item to the tree.</summary>
            <param name="addition">The item to be added.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`8.Add(`0,Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2,`3,`4,`5,`6,`7}.Node,Towel.DataStructures.Omnitree.Vector{`1,`2,`3,`4,`5,`6,`7},System.Int32)">
            <summary>Recursive version of the add function.</summary>
            <param name="addition">The item to be added.</param>
            <param name="node">The current node for tree trversal.</param>
            <param name="ms">The location of the addition.</param>
            <param name="depth">The current depth of iteration.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`8.DetermineMedians(Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2,`3,`4,`5,`6,`7}.Leaf)">
            <summary>Determins the dimensions of the child at the given index.</summary>
            <param name="leaf">The parent of the node to compute dimensions for.</param>
            <param name="child">The index of the child to compute dimensions for.</param>
            <param name="median1">The computed minimum dimensions of the child node along the 1D axis.</param>
            <param name="median2">The computed minimum dimensions of the child node along the 2D axis.</param>
            <param name="median3">The computed minimum dimensions of the child node along the 3D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`8.Clear">
            <summary>Returns the tree to an empty state.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`8.Clone">
            <summary>Creates a shallow clone of this data structure.</summary>
            <returns>A shallow clone of this data structure.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`8.CountSubSpace(`1,`1,`2,`2,`3,`3,`4,`4,`5,`5,`6,`6,`7,`7)">
            <summary>Counts the number of items in a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="min7">The minimum coordinate of the space along the 7 axis.</param>
            <param name="max7">The maximum coordinate of the space along the 7 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`8.CountSubSpace(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`7},Towel.DataStructures.Omnitree.Bound{`7})">
            <summary>Counts the number of items in a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="min7">The minimum coordinate of the space along the 7 axis.</param>
            <param name="max7">The maximum coordinate of the space along the 7 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`8.CountSubSpace(`1,`2,`3,`4,`5,`6,`7)">
            <summary>Counts the number of items in a sub space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="axis5">The coordinate along the 5D axis.</param>
            <param name="axis6">The coordinate along the 6D axis.</param>
            <param name="axis7">The coordinate along the 7D axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`8.CountSubSpace(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`7})">
            <summary>Counts the number of items in a sub space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="axis5">The coordinate along the 5D axis.</param>
            <param name="axis6">The coordinate along the 6D axis.</param>
            <param name="axis7">The coordinate along the 7D axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`8.CountSubSpace(Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2,`3,`4,`5,`6,`7}.Node,Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5,`6,`7})">
            <summary>Counts the number of items in a sub space.</summary>
            <param name="node">The current traversal node.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`8.Update">
            <summary>Iterates through the entire tree and ensures each item is in the proper leaf.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`8.Update(Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2,`3,`4,`5,`6,`7}.Node,System.Int32)">
            <summary>Recursive version of the Update method.</summary>
            <param name="node">The current node of iteration.</param>
            <param name="depth">The current depth of iteration.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`8.Update(`1,`1,`2,`2,`3,`3,`4,`4,`5,`5,`6,`6,`7,`7)">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="min7">The minimum coordinate of the space along the 7 axis.</param>
            <param name="max7">The maximum coordinate of the space along the 7 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`8.Update(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`7},Towel.DataStructures.Omnitree.Bound{`7})">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="min7">The minimum coordinate of the space along the 7 axis.</param>
            <param name="max7">The maximum coordinate of the space along the 7 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`8.Update(`1,`2,`3,`4,`5,`6,`7)">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="axis5">The coordinate along the 5D axis.</param>
            <param name="axis6">The coordinate along the 6D axis.</param>
            <param name="axis7">The coordinate along the 7D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`8.Update(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`7})">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="axis5">The coordinate along the 5D axis.</param>
            <param name="axis6">The coordinate along the 6D axis.</param>
            <param name="axis7">The coordinate along the 7D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`8.Remove(System.Predicate{`0})">
            <summary>Removes all the items qualified by the delegate.</summary>
            <param name="where">The predicate to qualify removals.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`8.Remove(Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2,`3,`4,`5,`6,`7}.Node,System.Predicate{`0})">
            <summary>Recursive version of the remove method.</summary>
            <param name="node">The current node of traversal.</param>
            <param name="where">The predicate to qualify removals.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`8.Remove(`1,`1,`2,`2,`3,`3,`4,`4,`5,`5,`6,`6,`7,`7)">
            <summary>Removes all the items in a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="min7">The minimum coordinate of the space along the 7 axis.</param>
            <param name="max7">The maximum coordinate of the space along the 7 axis.</param>
            <returns>The number of items that were removed.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`8.Remove(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`7},Towel.DataStructures.Omnitree.Bound{`7})">
            <summary>Removes all the items in a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="min7">The minimum coordinate of the space along the 7 axis.</param>
            <param name="max7">The maximum coordinate of the space along the 7 axis.</param>
            <returns>The number of items that were removed.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`8.Remove(`1,`1,`2,`2,`3,`3,`4,`4,`5,`5,`6,`6,`7,`7,System.Predicate{`0})">
            <summary>Removes all the items in a given space validated by a predicate.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="min7">The minimum coordinate of the space along the 7 axis.</param>
            <param name="max7">The maximum coordinate of the space along the 7 axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`8.Remove(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`7},Towel.DataStructures.Omnitree.Bound{`7},System.Predicate{`0})">
            <summary>Removes all the items in a given space validated by a predicate.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="min7">The minimum coordinate of the space along the 7 axis.</param>
            <param name="max7">The maximum coordinate of the space along the 7 axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`8.Remove(`0)">
            <summary>Removes all instances of a given value.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`8.Remove(`1,`2,`3,`4,`5,`6,`7)">
            <summary>Removes all the items in a given space.</summary>
            <param name="axis1">The axis of the removal along the  1D axis.</param>
            <param name="axis2">The axis of the removal along the  2D axis.</param>
            <param name="axis3">The axis of the removal along the  3D axis.</param>
            <param name="axis4">The axis of the removal along the  4D axis.</param>
            <param name="axis5">The axis of the removal along the  5D axis.</param>
            <param name="axis6">The axis of the removal along the  6D axis.</param>
            <param name="axis7">The axis of the removal along the  7D axis.</param>
            <returns>The number of items that were removed.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`8.Remove(`1,`2,`3,`4,`5,`6,`7,System.Predicate{`0})">
            <summary>Removes all the items in a given space validated by a predicate.</summary>
            <param name="axis1">The axis of the removal along the  1D axis.</param>
            <param name="axis2">The axis of the removal along the  2D axis.</param>
            <param name="axis3">The axis of the removal along the  3D axis.</param>
            <param name="axis4">The axis of the removal along the  4D axis.</param>
            <param name="axis5">The axis of the removal along the  5D axis.</param>
            <param name="axis6">The axis of the removal along the  6D axis.</param>
            <param name="axis7">The axis of the removal along the  7D axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`8.Stepper(Towel.Step{`0})">
            <summary>Traverses every item in the tree and performs the delegate in them.</summary>
            <param name="function">The delegate to perform on every item in the tree.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`8.Stepper(Towel.StepBreak{`0})">
            <summary>Traverses every item in the tree and performs the delegate in them.</summary>
            <param name="function">The delegate to perform on every item in the tree.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`8.Stepper(Towel.Step{`0},`1,`1,`2,`2,`3,`3,`4,`4,`5,`5,`6,`6,`7,`7)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="function">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="min7">The minimum coordinate of the space along the 7 axis.</param>
            <param name="max7">The maximum coordinate of the space along the 7 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`8.Stepper(Towel.Step{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`7},Towel.DataStructures.Omnitree.Bound{`7})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="function">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="min7">The minimum coordinate of the space along the 7 axis.</param>
            <param name="max7">The maximum coordinate of the space along the 7 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`8.Stepper(Towel.StepBreak{`0},`1,`1,`2,`2,`3,`3,`4,`4,`5,`5,`6,`6,`7,`7)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="min7">The minimum coordinate of the space along the 7 axis.</param>
            <param name="max7">The maximum coordinate of the space along the 7 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`8.Stepper(Towel.StepBreak{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`7},Towel.DataStructures.Omnitree.Bound{`7})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="min7">The minimum coordinate of the space along the 7 axis.</param>
            <param name="max7">The maximum coordinate of the space along the 7 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`8.Stepper(Towel.Step{`0},`1,`2,`3,`4,`5,`6,`7)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="axis1">The axis of the removal along the  1D axis.</param>
            <param name="axis2">The axis of the removal along the  2D axis.</param>
            <param name="axis3">The axis of the removal along the  3D axis.</param>
            <param name="axis4">The axis of the removal along the  4D axis.</param>
            <param name="axis5">The axis of the removal along the  5D axis.</param>
            <param name="axis6">The axis of the removal along the  6D axis.</param>
            <param name="axis7">The axis of the removal along the  7D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`8.Stepper(Towel.StepBreak{`0},`1,`2,`3,`4,`5,`6,`7)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="function">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="axis1">The axis of the removal along the  1D axis.</param>
            <param name="axis2">The axis of the removal along the  2D axis.</param>
            <param name="axis3">The axis of the removal along the  3D axis.</param>
            <param name="axis4">The axis of the removal along the  4D axis.</param>
            <param name="axis5">The axis of the removal along the  5D axis.</param>
            <param name="axis6">The axis of the removal along the  6D axis.</param>
            <param name="axis7">The axis of the removal along the  7D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`8.System#Collections#IEnumerable#GetEnumerator">
            <summary>FOR COMPATIBILITY ONLY. AVOID IF POSSIBLE.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`8.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>FOR COMPATIBILITY ONLY. AVOID IF POSSIBLE.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`8.DetermineChildIndex(Towel.DataStructures.Omnitree.Vector{`1,`2,`3,`4,`5,`6,`7},Towel.DataStructures.Omnitree.Vector{`1,`2,`3,`4,`5,`6,`7})">
            <summary>Computes the child index that contains the desired dimensions.</summary>
            <param name="node">The branch .</param>
            <param name="vector">The dimensions to determine the child index.</param>
            <returns>The computed child index based on the coordinates relative to the center of the node.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`8.ShrinkChild(Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2,`3,`4,`5,`6,`7}.Branch,System.Int32)">
            <summary>Converts a branch back into a leaf when the count is reduced.</summary>
            <param name="parent">The parent to shrink a child of.</param>
            <param name="child">The index of the child to shrink.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`8.ReduceParentCounts(Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2,`3,`4,`5,`6,`7}.Node,System.Int32)">
            <summary>Reduces the counts of all the parents of a given node by a given amount.</summary>
            <param name="parent">The starting parent of the reduction.</param>
            <param name="reduction">The amount to reduce the parent counts by.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`8.IncreaseParentCounts(Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2,`3,`4,`5,`6,`7}.Node,System.Int32)">
            <summary>Increases the counts of all the parents of a given node by a given amount.</summary>
            <param name="parent">The starting parent of the increase.</param>
            <param name="increase">The amount to increase the parent counts by.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`8.InclusionCheck(Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5,`6,`7},Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5,`6,`7})">
            <summary>Checks a node for inclusion (overlap) between two bounds.</summary>
            <returns>True if the spaces overlap; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`8.EncapsulationCheck(Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5,`6,`7},Towel.DataStructures.Omnitree.Vector{`1,`2,`3,`4,`5,`6,`7})">
            <summary>Checks if a space encapsulates a point.</summary>
            <returns>True if the space encapsulates the point; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`8.EncapsulationCheck(Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5,`6,`7},Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5,`6,`7})">
            <summary>Checks if a space (left) encapsulates another space (right).</summary>
            <returns>True if the left space encapsulates the right; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`8.EqualsCheck(Towel.DataStructures.Omnitree.Vector{`1,`2,`3,`4,`5,`6,`7},Towel.DataStructures.Omnitree.Vector{`1,`2,`3,`4,`5,`6,`7})">
            <summary>Checks for equality between two locations.</summary>
            <returns>True if equal; False if not;</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`8.GetEncapsulationParent(Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2,`3,`4,`5,`6,`7}.Node,Towel.DataStructures.Omnitree.Vector{`1,`2,`3,`4,`5,`6,`7})">
            <summary>Gets the nearest parent that encapsulates a location.</summary>
            <param name="node">The starting node to find the encapsulating parent of the location.</param>
            <param name="coordinate1">The coordinate along the 1D axis.</param>
            <param name="coordinate2">The coordinate along the 2D axis.</param>
            <param name="coordinate3">The coordinate along the 3D axis.</param>
            <returns>The nearest node that encapsulates the given location.</returns>
        </member>
        <member name="P:Towel.DataStructures.IOmnitreeBounds`2.Dimensions">
            <summary>The number of dimensions in this tree.</summary>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`2.CountSubSpaceEncapsulated(`1,`1)">
            <summary>Counts the number of items encapsulated by a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`2.CountSubSpaceOverlapped(`1,`1)">
            <summary>Counts the number of items overlapped by a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`2.Update">
            <summary>Iterates through the entire tree and ensures each item is in the proper leaf.</summary>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`2.Update(`1,`1)">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`2.RemoveEncapsulated(`1,`1)">
            <summary>Removes all the items in a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`2.RemoveEncapsulated(`1,`1,System.Predicate{`0})">
            <summary>Removes all the items in a given space where predicate is met.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="where">The predicate constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`2.RemoveOverlapped(`1)">
            <summary>Removes all the items in a given space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`2.RemoveOverlapped(`1,`1)">
            <summary>Removes all the items in a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`2.RemoveOverlapped(`1,System.Predicate{`0})">
            <summary>Removes all the items in a given space where equality is met.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`2.RemoveOverlapped(`1,`1,System.Predicate{`0})">
            <summary>Removes all the items in a given space where predicate is met.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="where">The predicate constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`2.StepperEncapsulated(Towel.Step{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`2.StepperEncapsulated(Towel.StepBreak{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`2.StepperOverlapped(Towel.Step{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`2.StepperOverlapped(Towel.StepBreak{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`2.StepperOverlapped(Towel.Step{`0},`1)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="axis1">The coordinate along the 1D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`2.StepperOverlapped(Towel.StepBreak{`0},`1)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="axis1">The coordinate along the 1D axis.</param>
        </member>
        <member name="T:Towel.DataStructures.OmnitreeBoundsLinked`2.Node">
            <summary>Can be a leaf or a branch.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`2.Node.Item(System.Int32)">
            <summary>Gets child by index.</summary>
            <param name="child_index">The index of the child to get.</param>
            <returns>The child of the given index or null if non-existent.</returns>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`2.Node.Depth">
            <summary>The depth this node is located in the Omnitree.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`2.Node.#ctor(Towel.DataStructures.Omnitree.Bounds{`1},Towel.DataStructures.OmnitreeBoundsLinked{`0,`1}.Node,System.Int32)">
            <summary>Constructs a node.</summary>
            <param name="bounds">The bounds of this node.</param>
            <param name="parent">The parent of this node.</param>
            <param name="index">The number of elements stored in this node and its children.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`2.#ctor(Towel.DataStructures.OmnitreeBoundsLinked{`0,`1})">
            <summary>This constructor is for cloning purposes</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`2.Dimensions">
            <summary>The number of dimensions in this tree.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`2.Equate">
            <summary>The function for equating keys in this table.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`2.GetBounds">
            <summary>The location function the Omnitree is using.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`2.Compare1">
            <summary>The comparison function the Omnitree is using along the 1D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`2.EquateAxis1">
            <summary>The function for equating values along the 1D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`2.Count">
            <summary>The current number of items in the tree.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`2.MaxDepth">
            <summary>Finds the current maximum depth of the tree. NOT AN O(1) OPERATION. Intended for educational purposes only.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`2.NodeCount">
            <summary>Counts the current number of nodes in the tree. NOT AN O(1) OPERATION. Intended for educational purposes only.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`2.Add(`0)">
            <summary>Adds an item to the tree.</summary>
            <param name="addition">The item to be added.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`2.Add(`0,Towel.DataStructures.OmnitreeBoundsLinked{`0,`1}.Node,Towel.DataStructures.Omnitree.Bounds{`1},System.Int32)">
            <summary>Recursive version of the add function.</summary>
            <param name="addition">The item to be added.</param>
            <param name="node">The current node for tree trversal.</param>
            <param name="ms">The location of the addition.</param>
            <param name="depth">The current depth of iteration.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`2.DetermineMedians(Towel.DataStructures.OmnitreeBoundsLinked{`0,`1}.Node)">
            <summary>Determins the dimensions of the child at the given index.</summary>
            <param name="leaf">The parent of the node to compute dimensions for.</param>
            <param name="child">The index of the child to compute dimensions for.</param>
            <param name="median1">The computed minimum dimensions of the child node along the 1D axis.</param>
            <param name="median2">The computed minimum dimensions of the child node along the 2D axis.</param>
            <param name="median3">The computed minimum dimensions of the child node along the 3D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`2.Clear">
            <summary>Returns the tree to an empty state.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`2.Clone">
            <summary>Creates a shallow clone of this data structure.</summary>
            <returns>A shallow clone of this data structure.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`2.CountSubSpaceEncapsulated(`1,`1)">
            <summary>Counts the number of items encapsulated by a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`2.CountSubSpaceEncapsulated(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1})">
            <summary>Counts the number of items encapsulated by a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`2.CountSubSpaceEncapsulated(`1)">
            <summary>Counts the number of items encapsulated by a sub space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`2.CountSubSpaceEncapsulated(Towel.DataStructures.Omnitree.Bound{`1})">
            <summary>Counts the number of items encapsulated by a sub space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`2.CountSubSpaceOverlapped(`1,`1)">
            <summary>Counts the number of items overlapped by a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`2.CountSubSpaceOverlapped(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1})">
            <summary>Counts the number of items overlapped by a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`2.CountSubSpaceOverlapped(`1)">
            <summary>Counts the number of items overlapped by a sub space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`2.CountSubSpaceOverlapped(Towel.DataStructures.Omnitree.Bound{`1})">
            <summary>Counts the number of items overlapped by a sub space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`2.Update">
            <summary>Iterates through the entire tree and ensures each item is in the proper leaf.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`2.Update(Towel.DataStructures.OmnitreeBoundsLinked{`0,`1}.Node,System.Int32)">
            <summary>Recursive version of the Update method.</summary>
            <param name="node">The current node of iteration.</param>
            <param name="depth">The current depth of iteration.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`2.Update(`1,`1)">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`2.Update(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1})">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`2.Update(`1)">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`2.Update(Towel.DataStructures.Omnitree.Bound{`1})">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`2.Remove(System.Predicate{`0})">
            <summary>Removes all the items qualified by the delegate.</summary>
            <param name="where">The predicate to qualify removals.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`2.Remove(Towel.DataStructures.OmnitreeBoundsLinked{`0,`1}.Node,System.Predicate{`0})">
            <summary>Recursive version of the remove method.</summary>
            <param name="node">The current node of traversal.</param>
            <param name="where">The predicate to qualify removals.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`2.RemoveEncapsulated(`1,`1)">
            <summary>Removes all the items encapsulated in a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <returns>The number of items that were removed.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`2.RemoveEncapsulated(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1})">
            <summary>Removes all the items encapsulated in a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <returns>The number of items that were removed.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`2.RemoveEncapsulated(Towel.DataStructures.Omnitree.Bound{`1})">
            <summary>Removes all the items encapsulated in a given space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`2.RemoveOverlapped(`1,`1)">
            <summary>Removes all the items overlapping a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <returns>The number of items that were removed.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`2.RemoveOverlapped(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1})">
            <summary>Removes all the items overlapping a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <returns>The number of items that were removed.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`2.RemoveEncapsulated(`1,`1,System.Predicate{`0})">
            <summary>Removes all the items in a given space validated by a predicate.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`2.RemoveEncapsulated(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},System.Predicate{`0})">
            <summary>Removes all the items in a given space validated by a predicate.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`2.RemoveOverlapped(`1,`1,System.Predicate{`0})">
            <summary>Removes all the items in a given space validated by a predicate.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`2.RemoveOverlapped(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},System.Predicate{`0})">
            <summary>Removes all the items in a given space validated by a predicate.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`2.Remove(`0)">
            <summary>Removes all instances of a given value.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`2.RemoveOverlapped(`1)">
            <summary>Removes all the items in a given space.</summary>
            <param name="axis1">The axis of the removal along the  1D axis.</param>
            <returns>The number of items that were removed.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`2.RemoveOverlapped(`1,System.Predicate{`0})">
            <summary>Removes all the items in a given space validated by a predicate.</summary>
            <param name="axis1">The axis of the removal along the  1D axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`2.Stepper(Towel.Step{`0})">
            <summary>Traverses every item in the tree and performs the delegate in them.</summary>
            <param name="function">The delegate to perform on every item in the tree.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`2.Stepper(Towel.StepBreak{`0})">
            <summary>Traverses every item in the tree and performs the delegate in them.</summary>
            <param name="function">The delegate to perform on every item in the tree.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`2.StepperEncapsulated(Towel.Step{`0},`1,`1)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="function">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`2.StepperEncapsulated(Towel.Step{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="function">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`2.StepperOverlapped(Towel.Step{`0},`1,`1)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="function">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`2.StepperOverlapped(Towel.Step{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="function">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`2.StepperEncapsulated(Towel.StepBreak{`0},`1,`1)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`2.StepperEncapsulated(Towel.StepBreak{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`2.StepperOverlapped(Towel.StepBreak{`0},`1,`1)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`2.StepperOverlapped(Towel.StepBreak{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`2.StepperOverlapped(Towel.Step{`0},`1)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="axis1">The axis of the removal along the  1D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`2.StepperOverlapped(Towel.StepBreak{`0},`1)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="function">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="axis1">The axis of the removal along the  1D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>FOR COMPATIBILITY ONLY. AVOID IF POSSIBLE.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`2.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>FOR COMPATIBILITY ONLY. AVOID IF POSSIBLE.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`2.DetermineChildIndex(Towel.DataStructures.Omnitree.Vector{`1},Towel.DataStructures.Omnitree.Bounds{`1})">
            <summary>Computes the child index that contains the desired dimensions.</summary>
            <param name="node">The branch .</param>
            <param name="vector">The dimensions to determine the child index.</param>
            <returns>The computed child index based on the coordinates relative to the center of the node.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`2.ShrinkChild(Towel.DataStructures.OmnitreeBoundsLinked{`0,`1}.Node,System.Int32)">
            <summary>Converts a branch back into a leaf when the count is reduced.</summary>
            <param name="parent">The parent to shrink a child of.</param>
            <param name="child">The index of the child to shrink.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`2.ReduceParentCounts(Towel.DataStructures.OmnitreeBoundsLinked{`0,`1}.Node,System.Int32)">
            <summary>Reduces the counts of all the parents of a given node by a given amount.</summary>
            <param name="parent">The starting parent of the reduction.</param>
            <param name="reduction">The amount to reduce the parent counts by.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`2.IncreaseParentCounts(Towel.DataStructures.OmnitreeBoundsLinked{`0,`1}.Node,System.Int32)">
            <summary>Increases the counts of all the parents of a given node by a given amount.</summary>
            <param name="parent">The starting parent of the increase.</param>
            <param name="increase">The amount to increase the parent counts by.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`2.InclusionCheck(Towel.DataStructures.Omnitree.Bounds{`1},Towel.DataStructures.Omnitree.Bounds{`1})">
            <summary>Checks a node for inclusion (overlap) between two bounds.</summary>
            <returns>True if the spaces overlap; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`2.EncapsulationCheck(Towel.DataStructures.Omnitree.Bounds{`1},Towel.DataStructures.Omnitree.Vector{`1})">
            <summary>Checks if a space encapsulates a point.</summary>
            <returns>True if the space encapsulates the point; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`2.EncapsulationCheck(Towel.DataStructures.Omnitree.Bounds{`1},Towel.DataStructures.Omnitree.Bounds{`1})">
            <summary>Checks if a space (left) encapsulates another space (right).</summary>
            <returns>True if the left space encapsulates the right; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`2.EqualsCheck(Towel.DataStructures.Omnitree.Vector{`1},Towel.DataStructures.Omnitree.Vector{`1})">
            <summary>Checks for equality between two locations.</summary>
            <returns>True if equal; False if not;</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`2.GetEncapsulationParent(Towel.DataStructures.OmnitreeBoundsLinked{`0,`1}.Node,Towel.DataStructures.Omnitree.Bounds{`1})">
            <summary>Gets the nearest parent that encapsulates a location.</summary>
            <param name="node">The starting node to find the encapsulating parent of the location.</param>
            <param name="bounds">The bounds to get the encapsulating parent from.</param>
            <returns>The nearest node that encapsulates the given location.</returns>
        </member>
        <member name="P:Towel.DataStructures.IOmnitreeBounds`3.Dimensions">
            <summary>The number of dimensions in this tree.</summary>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`3.CountSubSpaceEncapsulated(`1,`1,`2,`2)">
            <summary>Counts the number of items encapsulated by a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`3.CountSubSpaceOverlapped(`1,`1,`2,`2)">
            <summary>Counts the number of items overlapped by a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`3.Update">
            <summary>Iterates through the entire tree and ensures each item is in the proper leaf.</summary>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`3.Update(`1,`1,`2,`2)">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`3.RemoveEncapsulated(`1,`1,`2,`2)">
            <summary>Removes all the items in a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`3.RemoveEncapsulated(`1,`1,`2,`2,System.Predicate{`0})">
            <summary>Removes all the items in a given space where predicate is met.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="where">The predicate constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`3.RemoveOverlapped(`1,`2)">
            <summary>Removes all the items in a given space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`3.RemoveOverlapped(`1,`1,`2,`2)">
            <summary>Removes all the items in a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`3.RemoveOverlapped(`1,`2,System.Predicate{`0})">
            <summary>Removes all the items in a given space where equality is met.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`3.RemoveOverlapped(`1,`1,`2,`2,System.Predicate{`0})">
            <summary>Removes all the items in a given space where predicate is met.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="where">The predicate constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`3.StepperEncapsulated(Towel.Step{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`3.StepperEncapsulated(Towel.StepBreak{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`3.StepperOverlapped(Towel.Step{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`3.StepperOverlapped(Towel.StepBreak{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`3.StepperOverlapped(Towel.Step{`0},`1,`2)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`3.StepperOverlapped(Towel.StepBreak{`0},`1,`2)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
        </member>
        <member name="T:Towel.DataStructures.OmnitreeBoundsLinked`3.Node">
            <summary>Can be a leaf or a branch.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`3.Node.Item(System.Int32)">
            <summary>Gets child by index.</summary>
            <param name="child_index">The index of the child to get.</param>
            <returns>The child of the given index or null if non-existent.</returns>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`3.Node.Depth">
            <summary>The depth this node is located in the Omnitree.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`3.Node.#ctor(Towel.DataStructures.Omnitree.Bounds{`1,`2},Towel.DataStructures.OmnitreeBoundsLinked{`0,`1,`2}.Node,System.Int32)">
            <summary>Constructs a node.</summary>
            <param name="bounds">The bounds of this node.</param>
            <param name="parent">The parent of this node.</param>
            <param name="index">The number of elements stored in this node and its children.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`3.#ctor(Towel.DataStructures.OmnitreeBoundsLinked{`0,`1,`2})">
            <summary>This constructor is for cloning purposes</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`3.Dimensions">
            <summary>The number of dimensions in this tree.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`3.Equate">
            <summary>The function for equating keys in this table.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`3.GetBounds">
            <summary>The location function the Omnitree is using.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`3.Compare1">
            <summary>The comparison function the Omnitree is using along the 1D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`3.Compare2">
            <summary>The comparison function the Omnitree is using along the 2D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`3.EquateAxis1">
            <summary>The function for equating values along the 1D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`3.EquateAxis2">
            <summary>The function for equating values along the 2D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`3.Count">
            <summary>The current number of items in the tree.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`3.MaxDepth">
            <summary>Finds the current maximum depth of the tree. NOT AN O(1) OPERATION. Intended for educational purposes only.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`3.NodeCount">
            <summary>Counts the current number of nodes in the tree. NOT AN O(1) OPERATION. Intended for educational purposes only.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`3.Add(`0)">
            <summary>Adds an item to the tree.</summary>
            <param name="addition">The item to be added.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`3.Add(`0,Towel.DataStructures.OmnitreeBoundsLinked{`0,`1,`2}.Node,Towel.DataStructures.Omnitree.Bounds{`1,`2},System.Int32)">
            <summary>Recursive version of the add function.</summary>
            <param name="addition">The item to be added.</param>
            <param name="node">The current node for tree trversal.</param>
            <param name="ms">The location of the addition.</param>
            <param name="depth">The current depth of iteration.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`3.DetermineMedians(Towel.DataStructures.OmnitreeBoundsLinked{`0,`1,`2}.Node)">
            <summary>Determins the dimensions of the child at the given index.</summary>
            <param name="leaf">The parent of the node to compute dimensions for.</param>
            <param name="child">The index of the child to compute dimensions for.</param>
            <param name="median1">The computed minimum dimensions of the child node along the 1D axis.</param>
            <param name="median2">The computed minimum dimensions of the child node along the 2D axis.</param>
            <param name="median3">The computed minimum dimensions of the child node along the 3D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`3.Clear">
            <summary>Returns the tree to an empty state.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`3.Clone">
            <summary>Creates a shallow clone of this data structure.</summary>
            <returns>A shallow clone of this data structure.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`3.CountSubSpaceEncapsulated(`1,`1,`2,`2)">
            <summary>Counts the number of items encapsulated by a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`3.CountSubSpaceEncapsulated(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2})">
            <summary>Counts the number of items encapsulated by a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`3.CountSubSpaceEncapsulated(`1,`2)">
            <summary>Counts the number of items encapsulated by a sub space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`3.CountSubSpaceEncapsulated(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2})">
            <summary>Counts the number of items encapsulated by a sub space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`3.CountSubSpaceOverlapped(`1,`1,`2,`2)">
            <summary>Counts the number of items overlapped by a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`3.CountSubSpaceOverlapped(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2})">
            <summary>Counts the number of items overlapped by a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`3.CountSubSpaceOverlapped(`1,`2)">
            <summary>Counts the number of items overlapped by a sub space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`3.CountSubSpaceOverlapped(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2})">
            <summary>Counts the number of items overlapped by a sub space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`3.Update">
            <summary>Iterates through the entire tree and ensures each item is in the proper leaf.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`3.Update(Towel.DataStructures.OmnitreeBoundsLinked{`0,`1,`2}.Node,System.Int32)">
            <summary>Recursive version of the Update method.</summary>
            <param name="node">The current node of iteration.</param>
            <param name="depth">The current depth of iteration.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`3.Update(`1,`1,`2,`2)">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`3.Update(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2})">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`3.Update(`1,`2)">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`3.Update(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2})">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`3.Remove(System.Predicate{`0})">
            <summary>Removes all the items qualified by the delegate.</summary>
            <param name="where">The predicate to qualify removals.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`3.Remove(Towel.DataStructures.OmnitreeBoundsLinked{`0,`1,`2}.Node,System.Predicate{`0})">
            <summary>Recursive version of the remove method.</summary>
            <param name="node">The current node of traversal.</param>
            <param name="where">The predicate to qualify removals.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`3.RemoveEncapsulated(`1,`1,`2,`2)">
            <summary>Removes all the items encapsulated in a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <returns>The number of items that were removed.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`3.RemoveEncapsulated(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2})">
            <summary>Removes all the items encapsulated in a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <returns>The number of items that were removed.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`3.RemoveEncapsulated(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2})">
            <summary>Removes all the items encapsulated in a given space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`3.RemoveOverlapped(`1,`1,`2,`2)">
            <summary>Removes all the items overlapping a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <returns>The number of items that were removed.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`3.RemoveOverlapped(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2})">
            <summary>Removes all the items overlapping a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <returns>The number of items that were removed.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`3.RemoveEncapsulated(`1,`1,`2,`2,System.Predicate{`0})">
            <summary>Removes all the items in a given space validated by a predicate.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`3.RemoveEncapsulated(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},System.Predicate{`0})">
            <summary>Removes all the items in a given space validated by a predicate.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`3.RemoveOverlapped(`1,`1,`2,`2,System.Predicate{`0})">
            <summary>Removes all the items in a given space validated by a predicate.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`3.RemoveOverlapped(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},System.Predicate{`0})">
            <summary>Removes all the items in a given space validated by a predicate.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`3.Remove(`0)">
            <summary>Removes all instances of a given value.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`3.RemoveOverlapped(`1,`2)">
            <summary>Removes all the items in a given space.</summary>
            <param name="axis1">The axis of the removal along the  1D axis.</param>
            <param name="axis2">The axis of the removal along the  2D axis.</param>
            <returns>The number of items that were removed.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`3.RemoveOverlapped(`1,`2,System.Predicate{`0})">
            <summary>Removes all the items in a given space validated by a predicate.</summary>
            <param name="axis1">The axis of the removal along the  1D axis.</param>
            <param name="axis2">The axis of the removal along the  2D axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`3.Stepper(Towel.Step{`0})">
            <summary>Traverses every item in the tree and performs the delegate in them.</summary>
            <param name="function">The delegate to perform on every item in the tree.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`3.Stepper(Towel.StepBreak{`0})">
            <summary>Traverses every item in the tree and performs the delegate in them.</summary>
            <param name="function">The delegate to perform on every item in the tree.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`3.StepperEncapsulated(Towel.Step{`0},`1,`1,`2,`2)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="function">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`3.StepperEncapsulated(Towel.Step{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="function">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`3.StepperOverlapped(Towel.Step{`0},`1,`1,`2,`2)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="function">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`3.StepperOverlapped(Towel.Step{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="function">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`3.StepperEncapsulated(Towel.StepBreak{`0},`1,`1,`2,`2)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`3.StepperEncapsulated(Towel.StepBreak{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`3.StepperOverlapped(Towel.StepBreak{`0},`1,`1,`2,`2)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`3.StepperOverlapped(Towel.StepBreak{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`3.StepperOverlapped(Towel.Step{`0},`1,`2)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="axis1">The axis of the removal along the  1D axis.</param>
            <param name="axis2">The axis of the removal along the  2D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`3.StepperOverlapped(Towel.StepBreak{`0},`1,`2)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="function">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="axis1">The axis of the removal along the  1D axis.</param>
            <param name="axis2">The axis of the removal along the  2D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`3.System#Collections#IEnumerable#GetEnumerator">
            <summary>FOR COMPATIBILITY ONLY. AVOID IF POSSIBLE.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`3.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>FOR COMPATIBILITY ONLY. AVOID IF POSSIBLE.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`3.DetermineChildIndex(Towel.DataStructures.Omnitree.Vector{`1,`2},Towel.DataStructures.Omnitree.Bounds{`1,`2})">
            <summary>Computes the child index that contains the desired dimensions.</summary>
            <param name="node">The branch .</param>
            <param name="vector">The dimensions to determine the child index.</param>
            <returns>The computed child index based on the coordinates relative to the center of the node.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`3.ShrinkChild(Towel.DataStructures.OmnitreeBoundsLinked{`0,`1,`2}.Node,System.Int32)">
            <summary>Converts a branch back into a leaf when the count is reduced.</summary>
            <param name="parent">The parent to shrink a child of.</param>
            <param name="child">The index of the child to shrink.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`3.ReduceParentCounts(Towel.DataStructures.OmnitreeBoundsLinked{`0,`1,`2}.Node,System.Int32)">
            <summary>Reduces the counts of all the parents of a given node by a given amount.</summary>
            <param name="parent">The starting parent of the reduction.</param>
            <param name="reduction">The amount to reduce the parent counts by.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`3.IncreaseParentCounts(Towel.DataStructures.OmnitreeBoundsLinked{`0,`1,`2}.Node,System.Int32)">
            <summary>Increases the counts of all the parents of a given node by a given amount.</summary>
            <param name="parent">The starting parent of the increase.</param>
            <param name="increase">The amount to increase the parent counts by.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`3.InclusionCheck(Towel.DataStructures.Omnitree.Bounds{`1,`2},Towel.DataStructures.Omnitree.Bounds{`1,`2})">
            <summary>Checks a node for inclusion (overlap) between two bounds.</summary>
            <returns>True if the spaces overlap; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`3.EncapsulationCheck(Towel.DataStructures.Omnitree.Bounds{`1,`2},Towel.DataStructures.Omnitree.Vector{`1,`2})">
            <summary>Checks if a space encapsulates a point.</summary>
            <returns>True if the space encapsulates the point; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`3.EncapsulationCheck(Towel.DataStructures.Omnitree.Bounds{`1,`2},Towel.DataStructures.Omnitree.Bounds{`1,`2})">
            <summary>Checks if a space (left) encapsulates another space (right).</summary>
            <returns>True if the left space encapsulates the right; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`3.EqualsCheck(Towel.DataStructures.Omnitree.Vector{`1,`2},Towel.DataStructures.Omnitree.Vector{`1,`2})">
            <summary>Checks for equality between two locations.</summary>
            <returns>True if equal; False if not;</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`3.GetEncapsulationParent(Towel.DataStructures.OmnitreeBoundsLinked{`0,`1,`2}.Node,Towel.DataStructures.Omnitree.Bounds{`1,`2})">
            <summary>Gets the nearest parent that encapsulates a location.</summary>
            <param name="node">The starting node to find the encapsulating parent of the location.</param>
            <param name="bounds">The bounds to get the encapsulating parent from.</param>
            <returns>The nearest node that encapsulates the given location.</returns>
        </member>
        <member name="P:Towel.DataStructures.IOmnitreeBounds`4.Dimensions">
            <summary>The number of dimensions in this tree.</summary>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`4.CountSubSpaceEncapsulated(`1,`1,`2,`2,`3,`3)">
            <summary>Counts the number of items encapsulated by a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`4.CountSubSpaceOverlapped(`1,`1,`2,`2,`3,`3)">
            <summary>Counts the number of items overlapped by a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`4.Update">
            <summary>Iterates through the entire tree and ensures each item is in the proper leaf.</summary>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`4.Update(`1,`1,`2,`2,`3,`3)">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`4.RemoveEncapsulated(`1,`1,`2,`2,`3,`3)">
            <summary>Removes all the items in a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`4.RemoveEncapsulated(`1,`1,`2,`2,`3,`3,System.Predicate{`0})">
            <summary>Removes all the items in a given space where predicate is met.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="where">The predicate constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`4.RemoveOverlapped(`1,`2,`3)">
            <summary>Removes all the items in a given space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`4.RemoveOverlapped(`1,`1,`2,`2,`3,`3)">
            <summary>Removes all the items in a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`4.RemoveOverlapped(`1,`2,`3,System.Predicate{`0})">
            <summary>Removes all the items in a given space where equality is met.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`4.RemoveOverlapped(`1,`1,`2,`2,`3,`3,System.Predicate{`0})">
            <summary>Removes all the items in a given space where predicate is met.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="where">The predicate constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`4.StepperEncapsulated(Towel.Step{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`4.StepperEncapsulated(Towel.StepBreak{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`4.StepperOverlapped(Towel.Step{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`4.StepperOverlapped(Towel.StepBreak{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`4.StepperOverlapped(Towel.Step{`0},`1,`2,`3)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`4.StepperOverlapped(Towel.StepBreak{`0},`1,`2,`3)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
        </member>
        <member name="T:Towel.DataStructures.OmnitreeBoundsLinked`4.Node">
            <summary>Can be a leaf or a branch.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`4.Node.Item(System.Int32)">
            <summary>Gets child by index.</summary>
            <param name="child_index">The index of the child to get.</param>
            <returns>The child of the given index or null if non-existent.</returns>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`4.Node.Depth">
            <summary>The depth this node is located in the Omnitree.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`4.Node.#ctor(Towel.DataStructures.Omnitree.Bounds{`1,`2,`3},Towel.DataStructures.OmnitreeBoundsLinked{`0,`1,`2,`3}.Node,System.Int32)">
            <summary>Constructs a node.</summary>
            <param name="bounds">The bounds of this node.</param>
            <param name="parent">The parent of this node.</param>
            <param name="index">The number of elements stored in this node and its children.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`4.#ctor(Towel.DataStructures.OmnitreeBoundsLinked{`0,`1,`2,`3})">
            <summary>This constructor is for cloning purposes</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`4.Dimensions">
            <summary>The number of dimensions in this tree.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`4.Equate">
            <summary>The function for equating keys in this table.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`4.GetBounds">
            <summary>The location function the Omnitree is using.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`4.Compare1">
            <summary>The comparison function the Omnitree is using along the 1D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`4.Compare2">
            <summary>The comparison function the Omnitree is using along the 2D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`4.Compare3">
            <summary>The comparison function the Omnitree is using along the 3D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`4.EquateAxis1">
            <summary>The function for equating values along the 1D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`4.EquateAxis2">
            <summary>The function for equating values along the 2D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`4.EquateAxis3">
            <summary>The function for equating values along the 3D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`4.Count">
            <summary>The current number of items in the tree.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`4.MaxDepth">
            <summary>Finds the current maximum depth of the tree. NOT AN O(1) OPERATION. Intended for educational purposes only.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`4.NodeCount">
            <summary>Counts the current number of nodes in the tree. NOT AN O(1) OPERATION. Intended for educational purposes only.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`4.Add(`0)">
            <summary>Adds an item to the tree.</summary>
            <param name="addition">The item to be added.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`4.Add(`0,Towel.DataStructures.OmnitreeBoundsLinked{`0,`1,`2,`3}.Node,Towel.DataStructures.Omnitree.Bounds{`1,`2,`3},System.Int32)">
            <summary>Recursive version of the add function.</summary>
            <param name="addition">The item to be added.</param>
            <param name="node">The current node for tree trversal.</param>
            <param name="ms">The location of the addition.</param>
            <param name="depth">The current depth of iteration.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`4.DetermineMedians(Towel.DataStructures.OmnitreeBoundsLinked{`0,`1,`2,`3}.Node)">
            <summary>Determins the dimensions of the child at the given index.</summary>
            <param name="leaf">The parent of the node to compute dimensions for.</param>
            <param name="child">The index of the child to compute dimensions for.</param>
            <param name="median1">The computed minimum dimensions of the child node along the 1D axis.</param>
            <param name="median2">The computed minimum dimensions of the child node along the 2D axis.</param>
            <param name="median3">The computed minimum dimensions of the child node along the 3D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`4.Clear">
            <summary>Returns the tree to an empty state.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`4.Clone">
            <summary>Creates a shallow clone of this data structure.</summary>
            <returns>A shallow clone of this data structure.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`4.CountSubSpaceEncapsulated(`1,`1,`2,`2,`3,`3)">
            <summary>Counts the number of items encapsulated by a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`4.CountSubSpaceEncapsulated(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3})">
            <summary>Counts the number of items encapsulated by a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`4.CountSubSpaceEncapsulated(`1,`2,`3)">
            <summary>Counts the number of items encapsulated by a sub space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`4.CountSubSpaceEncapsulated(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3})">
            <summary>Counts the number of items encapsulated by a sub space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`4.CountSubSpaceOverlapped(`1,`1,`2,`2,`3,`3)">
            <summary>Counts the number of items overlapped by a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`4.CountSubSpaceOverlapped(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3})">
            <summary>Counts the number of items overlapped by a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`4.CountSubSpaceOverlapped(`1,`2,`3)">
            <summary>Counts the number of items overlapped by a sub space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`4.CountSubSpaceOverlapped(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3})">
            <summary>Counts the number of items overlapped by a sub space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`4.Update">
            <summary>Iterates through the entire tree and ensures each item is in the proper leaf.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`4.Update(Towel.DataStructures.OmnitreeBoundsLinked{`0,`1,`2,`3}.Node,System.Int32)">
            <summary>Recursive version of the Update method.</summary>
            <param name="node">The current node of iteration.</param>
            <param name="depth">The current depth of iteration.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`4.Update(`1,`1,`2,`2,`3,`3)">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`4.Update(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3})">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`4.Update(`1,`2,`3)">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`4.Update(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3})">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`4.Remove(System.Predicate{`0})">
            <summary>Removes all the items qualified by the delegate.</summary>
            <param name="where">The predicate to qualify removals.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`4.Remove(Towel.DataStructures.OmnitreeBoundsLinked{`0,`1,`2,`3}.Node,System.Predicate{`0})">
            <summary>Recursive version of the remove method.</summary>
            <param name="node">The current node of traversal.</param>
            <param name="where">The predicate to qualify removals.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`4.RemoveEncapsulated(`1,`1,`2,`2,`3,`3)">
            <summary>Removes all the items encapsulated in a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <returns>The number of items that were removed.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`4.RemoveEncapsulated(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3})">
            <summary>Removes all the items encapsulated in a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <returns>The number of items that were removed.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`4.RemoveEncapsulated(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3})">
            <summary>Removes all the items encapsulated in a given space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`4.RemoveOverlapped(`1,`1,`2,`2,`3,`3)">
            <summary>Removes all the items overlapping a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <returns>The number of items that were removed.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`4.RemoveOverlapped(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3})">
            <summary>Removes all the items overlapping a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <returns>The number of items that were removed.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`4.RemoveEncapsulated(`1,`1,`2,`2,`3,`3,System.Predicate{`0})">
            <summary>Removes all the items in a given space validated by a predicate.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`4.RemoveEncapsulated(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},System.Predicate{`0})">
            <summary>Removes all the items in a given space validated by a predicate.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`4.RemoveOverlapped(`1,`1,`2,`2,`3,`3,System.Predicate{`0})">
            <summary>Removes all the items in a given space validated by a predicate.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`4.RemoveOverlapped(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},System.Predicate{`0})">
            <summary>Removes all the items in a given space validated by a predicate.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`4.Remove(`0)">
            <summary>Removes all instances of a given value.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`4.RemoveOverlapped(`1,`2,`3)">
            <summary>Removes all the items in a given space.</summary>
            <param name="axis1">The axis of the removal along the  1D axis.</param>
            <param name="axis2">The axis of the removal along the  2D axis.</param>
            <param name="axis3">The axis of the removal along the  3D axis.</param>
            <returns>The number of items that were removed.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`4.RemoveOverlapped(`1,`2,`3,System.Predicate{`0})">
            <summary>Removes all the items in a given space validated by a predicate.</summary>
            <param name="axis1">The axis of the removal along the  1D axis.</param>
            <param name="axis2">The axis of the removal along the  2D axis.</param>
            <param name="axis3">The axis of the removal along the  3D axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`4.Stepper(Towel.Step{`0})">
            <summary>Traverses every item in the tree and performs the delegate in them.</summary>
            <param name="function">The delegate to perform on every item in the tree.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`4.Stepper(Towel.StepBreak{`0})">
            <summary>Traverses every item in the tree and performs the delegate in them.</summary>
            <param name="function">The delegate to perform on every item in the tree.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`4.StepperEncapsulated(Towel.Step{`0},`1,`1,`2,`2,`3,`3)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="function">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`4.StepperEncapsulated(Towel.Step{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="function">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`4.StepperOverlapped(Towel.Step{`0},`1,`1,`2,`2,`3,`3)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="function">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`4.StepperOverlapped(Towel.Step{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="function">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`4.StepperEncapsulated(Towel.StepBreak{`0},`1,`1,`2,`2,`3,`3)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`4.StepperEncapsulated(Towel.StepBreak{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`4.StepperOverlapped(Towel.StepBreak{`0},`1,`1,`2,`2,`3,`3)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`4.StepperOverlapped(Towel.StepBreak{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`4.StepperOverlapped(Towel.Step{`0},`1,`2,`3)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="axis1">The axis of the removal along the  1D axis.</param>
            <param name="axis2">The axis of the removal along the  2D axis.</param>
            <param name="axis3">The axis of the removal along the  3D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`4.StepperOverlapped(Towel.StepBreak{`0},`1,`2,`3)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="function">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="axis1">The axis of the removal along the  1D axis.</param>
            <param name="axis2">The axis of the removal along the  2D axis.</param>
            <param name="axis3">The axis of the removal along the  3D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`4.System#Collections#IEnumerable#GetEnumerator">
            <summary>FOR COMPATIBILITY ONLY. AVOID IF POSSIBLE.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`4.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>FOR COMPATIBILITY ONLY. AVOID IF POSSIBLE.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`4.DetermineChildIndex(Towel.DataStructures.Omnitree.Vector{`1,`2,`3},Towel.DataStructures.Omnitree.Bounds{`1,`2,`3})">
            <summary>Computes the child index that contains the desired dimensions.</summary>
            <param name="node">The branch .</param>
            <param name="vector">The dimensions to determine the child index.</param>
            <returns>The computed child index based on the coordinates relative to the center of the node.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`4.ShrinkChild(Towel.DataStructures.OmnitreeBoundsLinked{`0,`1,`2,`3}.Node,System.Int32)">
            <summary>Converts a branch back into a leaf when the count is reduced.</summary>
            <param name="parent">The parent to shrink a child of.</param>
            <param name="child">The index of the child to shrink.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`4.ReduceParentCounts(Towel.DataStructures.OmnitreeBoundsLinked{`0,`1,`2,`3}.Node,System.Int32)">
            <summary>Reduces the counts of all the parents of a given node by a given amount.</summary>
            <param name="parent">The starting parent of the reduction.</param>
            <param name="reduction">The amount to reduce the parent counts by.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`4.IncreaseParentCounts(Towel.DataStructures.OmnitreeBoundsLinked{`0,`1,`2,`3}.Node,System.Int32)">
            <summary>Increases the counts of all the parents of a given node by a given amount.</summary>
            <param name="parent">The starting parent of the increase.</param>
            <param name="increase">The amount to increase the parent counts by.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`4.InclusionCheck(Towel.DataStructures.Omnitree.Bounds{`1,`2,`3},Towel.DataStructures.Omnitree.Bounds{`1,`2,`3})">
            <summary>Checks a node for inclusion (overlap) between two bounds.</summary>
            <returns>True if the spaces overlap; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`4.EncapsulationCheck(Towel.DataStructures.Omnitree.Bounds{`1,`2,`3},Towel.DataStructures.Omnitree.Vector{`1,`2,`3})">
            <summary>Checks if a space encapsulates a point.</summary>
            <returns>True if the space encapsulates the point; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`4.EncapsulationCheck(Towel.DataStructures.Omnitree.Bounds{`1,`2,`3},Towel.DataStructures.Omnitree.Bounds{`1,`2,`3})">
            <summary>Checks if a space (left) encapsulates another space (right).</summary>
            <returns>True if the left space encapsulates the right; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`4.EqualsCheck(Towel.DataStructures.Omnitree.Vector{`1,`2,`3},Towel.DataStructures.Omnitree.Vector{`1,`2,`3})">
            <summary>Checks for equality between two locations.</summary>
            <returns>True if equal; False if not;</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`4.GetEncapsulationParent(Towel.DataStructures.OmnitreeBoundsLinked{`0,`1,`2,`3}.Node,Towel.DataStructures.Omnitree.Bounds{`1,`2,`3})">
            <summary>Gets the nearest parent that encapsulates a location.</summary>
            <param name="node">The starting node to find the encapsulating parent of the location.</param>
            <param name="bounds">The bounds to get the encapsulating parent from.</param>
            <returns>The nearest node that encapsulates the given location.</returns>
        </member>
        <member name="P:Towel.DataStructures.IOmnitreeBounds`5.Dimensions">
            <summary>The number of dimensions in this tree.</summary>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`5.CountSubSpaceEncapsulated(`1,`1,`2,`2,`3,`3,`4,`4)">
            <summary>Counts the number of items encapsulated by a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`5.CountSubSpaceOverlapped(`1,`1,`2,`2,`3,`3,`4,`4)">
            <summary>Counts the number of items overlapped by a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`5.Update">
            <summary>Iterates through the entire tree and ensures each item is in the proper leaf.</summary>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`5.Update(`1,`1,`2,`2,`3,`3,`4,`4)">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`5.RemoveEncapsulated(`1,`1,`2,`2,`3,`3,`4,`4)">
            <summary>Removes all the items in a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`5.RemoveEncapsulated(`1,`1,`2,`2,`3,`3,`4,`4,System.Predicate{`0})">
            <summary>Removes all the items in a given space where predicate is met.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="where">The predicate constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`5.RemoveOverlapped(`1,`2,`3,`4)">
            <summary>Removes all the items in a given space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`5.RemoveOverlapped(`1,`1,`2,`2,`3,`3,`4,`4)">
            <summary>Removes all the items in a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`5.RemoveOverlapped(`1,`2,`3,`4,System.Predicate{`0})">
            <summary>Removes all the items in a given space where equality is met.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`5.RemoveOverlapped(`1,`1,`2,`2,`3,`3,`4,`4,System.Predicate{`0})">
            <summary>Removes all the items in a given space where predicate is met.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="where">The predicate constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`5.StepperEncapsulated(Towel.Step{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`5.StepperEncapsulated(Towel.StepBreak{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`5.StepperOverlapped(Towel.Step{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`5.StepperOverlapped(Towel.StepBreak{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`5.StepperOverlapped(Towel.Step{`0},`1,`2,`3,`4)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`5.StepperOverlapped(Towel.StepBreak{`0},`1,`2,`3,`4)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
        </member>
        <member name="T:Towel.DataStructures.OmnitreeBoundsLinked`5.Node">
            <summary>Can be a leaf or a branch.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`5.Node.Item(System.Int32)">
            <summary>Gets child by index.</summary>
            <param name="child_index">The index of the child to get.</param>
            <returns>The child of the given index or null if non-existent.</returns>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`5.Node.Depth">
            <summary>The depth this node is located in the Omnitree.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`5.Node.#ctor(Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4},Towel.DataStructures.OmnitreeBoundsLinked{`0,`1,`2,`3,`4}.Node,System.Int32)">
            <summary>Constructs a node.</summary>
            <param name="bounds">The bounds of this node.</param>
            <param name="parent">The parent of this node.</param>
            <param name="index">The number of elements stored in this node and its children.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`5.#ctor(Towel.DataStructures.OmnitreeBoundsLinked{`0,`1,`2,`3,`4})">
            <summary>This constructor is for cloning purposes</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`5.Dimensions">
            <summary>The number of dimensions in this tree.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`5.Equate">
            <summary>The function for equating keys in this table.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`5.GetBounds">
            <summary>The location function the Omnitree is using.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`5.Compare1">
            <summary>The comparison function the Omnitree is using along the 1D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`5.Compare2">
            <summary>The comparison function the Omnitree is using along the 2D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`5.Compare3">
            <summary>The comparison function the Omnitree is using along the 3D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`5.Compare4">
            <summary>The comparison function the Omnitree is using along the 4D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`5.EquateAxis1">
            <summary>The function for equating values along the 1D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`5.EquateAxis2">
            <summary>The function for equating values along the 2D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`5.EquateAxis3">
            <summary>The function for equating values along the 3D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`5.EquateAxis4">
            <summary>The function for equating values along the 4D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`5.Count">
            <summary>The current number of items in the tree.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`5.MaxDepth">
            <summary>Finds the current maximum depth of the tree. NOT AN O(1) OPERATION. Intended for educational purposes only.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`5.NodeCount">
            <summary>Counts the current number of nodes in the tree. NOT AN O(1) OPERATION. Intended for educational purposes only.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`5.Add(`0)">
            <summary>Adds an item to the tree.</summary>
            <param name="addition">The item to be added.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`5.Add(`0,Towel.DataStructures.OmnitreeBoundsLinked{`0,`1,`2,`3,`4}.Node,Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4},System.Int32)">
            <summary>Recursive version of the add function.</summary>
            <param name="addition">The item to be added.</param>
            <param name="node">The current node for tree trversal.</param>
            <param name="ms">The location of the addition.</param>
            <param name="depth">The current depth of iteration.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`5.DetermineMedians(Towel.DataStructures.OmnitreeBoundsLinked{`0,`1,`2,`3,`4}.Node)">
            <summary>Determins the dimensions of the child at the given index.</summary>
            <param name="leaf">The parent of the node to compute dimensions for.</param>
            <param name="child">The index of the child to compute dimensions for.</param>
            <param name="median1">The computed minimum dimensions of the child node along the 1D axis.</param>
            <param name="median2">The computed minimum dimensions of the child node along the 2D axis.</param>
            <param name="median3">The computed minimum dimensions of the child node along the 3D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`5.Clear">
            <summary>Returns the tree to an empty state.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`5.Clone">
            <summary>Creates a shallow clone of this data structure.</summary>
            <returns>A shallow clone of this data structure.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`5.CountSubSpaceEncapsulated(`1,`1,`2,`2,`3,`3,`4,`4)">
            <summary>Counts the number of items encapsulated by a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`5.CountSubSpaceEncapsulated(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4})">
            <summary>Counts the number of items encapsulated by a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`5.CountSubSpaceEncapsulated(`1,`2,`3,`4)">
            <summary>Counts the number of items encapsulated by a sub space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`5.CountSubSpaceEncapsulated(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4})">
            <summary>Counts the number of items encapsulated by a sub space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`5.CountSubSpaceOverlapped(`1,`1,`2,`2,`3,`3,`4,`4)">
            <summary>Counts the number of items overlapped by a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`5.CountSubSpaceOverlapped(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4})">
            <summary>Counts the number of items overlapped by a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`5.CountSubSpaceOverlapped(`1,`2,`3,`4)">
            <summary>Counts the number of items overlapped by a sub space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`5.CountSubSpaceOverlapped(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4})">
            <summary>Counts the number of items overlapped by a sub space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`5.Update">
            <summary>Iterates through the entire tree and ensures each item is in the proper leaf.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`5.Update(Towel.DataStructures.OmnitreeBoundsLinked{`0,`1,`2,`3,`4}.Node,System.Int32)">
            <summary>Recursive version of the Update method.</summary>
            <param name="node">The current node of iteration.</param>
            <param name="depth">The current depth of iteration.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`5.Update(`1,`1,`2,`2,`3,`3,`4,`4)">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`5.Update(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4})">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`5.Update(`1,`2,`3,`4)">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`5.Update(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4})">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`5.Remove(System.Predicate{`0})">
            <summary>Removes all the items qualified by the delegate.</summary>
            <param name="where">The predicate to qualify removals.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`5.Remove(Towel.DataStructures.OmnitreeBoundsLinked{`0,`1,`2,`3,`4}.Node,System.Predicate{`0})">
            <summary>Recursive version of the remove method.</summary>
            <param name="node">The current node of traversal.</param>
            <param name="where">The predicate to qualify removals.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`5.RemoveEncapsulated(`1,`1,`2,`2,`3,`3,`4,`4)">
            <summary>Removes all the items encapsulated in a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <returns>The number of items that were removed.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`5.RemoveEncapsulated(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4})">
            <summary>Removes all the items encapsulated in a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <returns>The number of items that were removed.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`5.RemoveEncapsulated(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4})">
            <summary>Removes all the items encapsulated in a given space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`5.RemoveOverlapped(`1,`1,`2,`2,`3,`3,`4,`4)">
            <summary>Removes all the items overlapping a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <returns>The number of items that were removed.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`5.RemoveOverlapped(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4})">
            <summary>Removes all the items overlapping a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <returns>The number of items that were removed.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`5.RemoveEncapsulated(`1,`1,`2,`2,`3,`3,`4,`4,System.Predicate{`0})">
            <summary>Removes all the items in a given space validated by a predicate.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`5.RemoveEncapsulated(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},System.Predicate{`0})">
            <summary>Removes all the items in a given space validated by a predicate.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`5.RemoveOverlapped(`1,`1,`2,`2,`3,`3,`4,`4,System.Predicate{`0})">
            <summary>Removes all the items in a given space validated by a predicate.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`5.RemoveOverlapped(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},System.Predicate{`0})">
            <summary>Removes all the items in a given space validated by a predicate.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`5.Remove(`0)">
            <summary>Removes all instances of a given value.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`5.RemoveOverlapped(`1,`2,`3,`4)">
            <summary>Removes all the items in a given space.</summary>
            <param name="axis1">The axis of the removal along the  1D axis.</param>
            <param name="axis2">The axis of the removal along the  2D axis.</param>
            <param name="axis3">The axis of the removal along the  3D axis.</param>
            <param name="axis4">The axis of the removal along the  4D axis.</param>
            <returns>The number of items that were removed.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`5.RemoveOverlapped(`1,`2,`3,`4,System.Predicate{`0})">
            <summary>Removes all the items in a given space validated by a predicate.</summary>
            <param name="axis1">The axis of the removal along the  1D axis.</param>
            <param name="axis2">The axis of the removal along the  2D axis.</param>
            <param name="axis3">The axis of the removal along the  3D axis.</param>
            <param name="axis4">The axis of the removal along the  4D axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`5.Stepper(Towel.Step{`0})">
            <summary>Traverses every item in the tree and performs the delegate in them.</summary>
            <param name="function">The delegate to perform on every item in the tree.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`5.Stepper(Towel.StepBreak{`0})">
            <summary>Traverses every item in the tree and performs the delegate in them.</summary>
            <param name="function">The delegate to perform on every item in the tree.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`5.StepperEncapsulated(Towel.Step{`0},`1,`1,`2,`2,`3,`3,`4,`4)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="function">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`5.StepperEncapsulated(Towel.Step{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="function">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`5.StepperOverlapped(Towel.Step{`0},`1,`1,`2,`2,`3,`3,`4,`4)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="function">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`5.StepperOverlapped(Towel.Step{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="function">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`5.StepperEncapsulated(Towel.StepBreak{`0},`1,`1,`2,`2,`3,`3,`4,`4)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`5.StepperEncapsulated(Towel.StepBreak{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`5.StepperOverlapped(Towel.StepBreak{`0},`1,`1,`2,`2,`3,`3,`4,`4)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`5.StepperOverlapped(Towel.StepBreak{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`5.StepperOverlapped(Towel.Step{`0},`1,`2,`3,`4)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="axis1">The axis of the removal along the  1D axis.</param>
            <param name="axis2">The axis of the removal along the  2D axis.</param>
            <param name="axis3">The axis of the removal along the  3D axis.</param>
            <param name="axis4">The axis of the removal along the  4D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`5.StepperOverlapped(Towel.StepBreak{`0},`1,`2,`3,`4)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="function">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="axis1">The axis of the removal along the  1D axis.</param>
            <param name="axis2">The axis of the removal along the  2D axis.</param>
            <param name="axis3">The axis of the removal along the  3D axis.</param>
            <param name="axis4">The axis of the removal along the  4D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`5.System#Collections#IEnumerable#GetEnumerator">
            <summary>FOR COMPATIBILITY ONLY. AVOID IF POSSIBLE.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`5.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>FOR COMPATIBILITY ONLY. AVOID IF POSSIBLE.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`5.DetermineChildIndex(Towel.DataStructures.Omnitree.Vector{`1,`2,`3,`4},Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4})">
            <summary>Computes the child index that contains the desired dimensions.</summary>
            <param name="node">The branch .</param>
            <param name="vector">The dimensions to determine the child index.</param>
            <returns>The computed child index based on the coordinates relative to the center of the node.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`5.ShrinkChild(Towel.DataStructures.OmnitreeBoundsLinked{`0,`1,`2,`3,`4}.Node,System.Int32)">
            <summary>Converts a branch back into a leaf when the count is reduced.</summary>
            <param name="parent">The parent to shrink a child of.</param>
            <param name="child">The index of the child to shrink.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`5.ReduceParentCounts(Towel.DataStructures.OmnitreeBoundsLinked{`0,`1,`2,`3,`4}.Node,System.Int32)">
            <summary>Reduces the counts of all the parents of a given node by a given amount.</summary>
            <param name="parent">The starting parent of the reduction.</param>
            <param name="reduction">The amount to reduce the parent counts by.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`5.IncreaseParentCounts(Towel.DataStructures.OmnitreeBoundsLinked{`0,`1,`2,`3,`4}.Node,System.Int32)">
            <summary>Increases the counts of all the parents of a given node by a given amount.</summary>
            <param name="parent">The starting parent of the increase.</param>
            <param name="increase">The amount to increase the parent counts by.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`5.InclusionCheck(Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4},Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4})">
            <summary>Checks a node for inclusion (overlap) between two bounds.</summary>
            <returns>True if the spaces overlap; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`5.EncapsulationCheck(Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4},Towel.DataStructures.Omnitree.Vector{`1,`2,`3,`4})">
            <summary>Checks if a space encapsulates a point.</summary>
            <returns>True if the space encapsulates the point; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`5.EncapsulationCheck(Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4},Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4})">
            <summary>Checks if a space (left) encapsulates another space (right).</summary>
            <returns>True if the left space encapsulates the right; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`5.EqualsCheck(Towel.DataStructures.Omnitree.Vector{`1,`2,`3,`4},Towel.DataStructures.Omnitree.Vector{`1,`2,`3,`4})">
            <summary>Checks for equality between two locations.</summary>
            <returns>True if equal; False if not;</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`5.GetEncapsulationParent(Towel.DataStructures.OmnitreeBoundsLinked{`0,`1,`2,`3,`4}.Node,Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4})">
            <summary>Gets the nearest parent that encapsulates a location.</summary>
            <param name="node">The starting node to find the encapsulating parent of the location.</param>
            <param name="bounds">The bounds to get the encapsulating parent from.</param>
            <returns>The nearest node that encapsulates the given location.</returns>
        </member>
        <member name="P:Towel.DataStructures.IOmnitreeBounds`6.Dimensions">
            <summary>The number of dimensions in this tree.</summary>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`6.CountSubSpaceEncapsulated(`1,`1,`2,`2,`3,`3,`4,`4,`5,`5)">
            <summary>Counts the number of items encapsulated by a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`6.CountSubSpaceOverlapped(`1,`1,`2,`2,`3,`3,`4,`4,`5,`5)">
            <summary>Counts the number of items overlapped by a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`6.Update">
            <summary>Iterates through the entire tree and ensures each item is in the proper leaf.</summary>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`6.Update(`1,`1,`2,`2,`3,`3,`4,`4,`5,`5)">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`6.RemoveEncapsulated(`1,`1,`2,`2,`3,`3,`4,`4,`5,`5)">
            <summary>Removes all the items in a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`6.RemoveEncapsulated(`1,`1,`2,`2,`3,`3,`4,`4,`5,`5,System.Predicate{`0})">
            <summary>Removes all the items in a given space where predicate is met.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="where">The predicate constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`6.RemoveOverlapped(`1,`2,`3,`4,`5)">
            <summary>Removes all the items in a given space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="axis5">The coordinate along the 5D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`6.RemoveOverlapped(`1,`1,`2,`2,`3,`3,`4,`4,`5,`5)">
            <summary>Removes all the items in a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`6.RemoveOverlapped(`1,`2,`3,`4,`5,System.Predicate{`0})">
            <summary>Removes all the items in a given space where equality is met.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="axis5">The coordinate along the 5D axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`6.RemoveOverlapped(`1,`1,`2,`2,`3,`3,`4,`4,`5,`5,System.Predicate{`0})">
            <summary>Removes all the items in a given space where predicate is met.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="where">The predicate constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`6.StepperEncapsulated(Towel.Step{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`6.StepperEncapsulated(Towel.StepBreak{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`6.StepperOverlapped(Towel.Step{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`6.StepperOverlapped(Towel.StepBreak{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`6.StepperOverlapped(Towel.Step{`0},`1,`2,`3,`4,`5)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="axis5">The coordinate along the 5D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`6.StepperOverlapped(Towel.StepBreak{`0},`1,`2,`3,`4,`5)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="axis5">The coordinate along the 5D axis.</param>
        </member>
        <member name="T:Towel.DataStructures.OmnitreeBoundsLinked`6.Node">
            <summary>Can be a leaf or a branch.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`6.Node.Item(System.Int32)">
            <summary>Gets child by index.</summary>
            <param name="child_index">The index of the child to get.</param>
            <returns>The child of the given index or null if non-existent.</returns>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`6.Node.Depth">
            <summary>The depth this node is located in the Omnitree.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`6.Node.#ctor(Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5},Towel.DataStructures.OmnitreeBoundsLinked{`0,`1,`2,`3,`4,`5}.Node,System.Int32)">
            <summary>Constructs a node.</summary>
            <param name="bounds">The bounds of this node.</param>
            <param name="parent">The parent of this node.</param>
            <param name="index">The number of elements stored in this node and its children.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`6.#ctor(Towel.DataStructures.OmnitreeBoundsLinked{`0,`1,`2,`3,`4,`5})">
            <summary>This constructor is for cloning purposes</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`6.Dimensions">
            <summary>The number of dimensions in this tree.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`6.Equate">
            <summary>The function for equating keys in this table.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`6.GetBounds">
            <summary>The location function the Omnitree is using.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`6.Compare1">
            <summary>The comparison function the Omnitree is using along the 1D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`6.Compare2">
            <summary>The comparison function the Omnitree is using along the 2D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`6.Compare3">
            <summary>The comparison function the Omnitree is using along the 3D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`6.Compare4">
            <summary>The comparison function the Omnitree is using along the 4D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`6.Compare5">
            <summary>The comparison function the Omnitree is using along the 5D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`6.EquateAxis1">
            <summary>The function for equating values along the 1D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`6.EquateAxis2">
            <summary>The function for equating values along the 2D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`6.EquateAxis3">
            <summary>The function for equating values along the 3D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`6.EquateAxis4">
            <summary>The function for equating values along the 4D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`6.EquateAxis5">
            <summary>The function for equating values along the 5D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`6.Count">
            <summary>The current number of items in the tree.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`6.MaxDepth">
            <summary>Finds the current maximum depth of the tree. NOT AN O(1) OPERATION. Intended for educational purposes only.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`6.NodeCount">
            <summary>Counts the current number of nodes in the tree. NOT AN O(1) OPERATION. Intended for educational purposes only.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`6.Add(`0)">
            <summary>Adds an item to the tree.</summary>
            <param name="addition">The item to be added.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`6.Add(`0,Towel.DataStructures.OmnitreeBoundsLinked{`0,`1,`2,`3,`4,`5}.Node,Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5},System.Int32)">
            <summary>Recursive version of the add function.</summary>
            <param name="addition">The item to be added.</param>
            <param name="node">The current node for tree trversal.</param>
            <param name="ms">The location of the addition.</param>
            <param name="depth">The current depth of iteration.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`6.DetermineMedians(Towel.DataStructures.OmnitreeBoundsLinked{`0,`1,`2,`3,`4,`5}.Node)">
            <summary>Determins the dimensions of the child at the given index.</summary>
            <param name="leaf">The parent of the node to compute dimensions for.</param>
            <param name="child">The index of the child to compute dimensions for.</param>
            <param name="median1">The computed minimum dimensions of the child node along the 1D axis.</param>
            <param name="median2">The computed minimum dimensions of the child node along the 2D axis.</param>
            <param name="median3">The computed minimum dimensions of the child node along the 3D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`6.Clear">
            <summary>Returns the tree to an empty state.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`6.Clone">
            <summary>Creates a shallow clone of this data structure.</summary>
            <returns>A shallow clone of this data structure.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`6.CountSubSpaceEncapsulated(`1,`1,`2,`2,`3,`3,`4,`4,`5,`5)">
            <summary>Counts the number of items encapsulated by a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`6.CountSubSpaceEncapsulated(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5})">
            <summary>Counts the number of items encapsulated by a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`6.CountSubSpaceEncapsulated(`1,`2,`3,`4,`5)">
            <summary>Counts the number of items encapsulated by a sub space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="axis5">The coordinate along the 5D axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`6.CountSubSpaceEncapsulated(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5})">
            <summary>Counts the number of items encapsulated by a sub space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="axis5">The coordinate along the 5D axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`6.CountSubSpaceOverlapped(`1,`1,`2,`2,`3,`3,`4,`4,`5,`5)">
            <summary>Counts the number of items overlapped by a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`6.CountSubSpaceOverlapped(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5})">
            <summary>Counts the number of items overlapped by a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`6.CountSubSpaceOverlapped(`1,`2,`3,`4,`5)">
            <summary>Counts the number of items overlapped by a sub space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="axis5">The coordinate along the 5D axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`6.CountSubSpaceOverlapped(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5})">
            <summary>Counts the number of items overlapped by a sub space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="axis5">The coordinate along the 5D axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`6.Update">
            <summary>Iterates through the entire tree and ensures each item is in the proper leaf.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`6.Update(Towel.DataStructures.OmnitreeBoundsLinked{`0,`1,`2,`3,`4,`5}.Node,System.Int32)">
            <summary>Recursive version of the Update method.</summary>
            <param name="node">The current node of iteration.</param>
            <param name="depth">The current depth of iteration.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`6.Update(`1,`1,`2,`2,`3,`3,`4,`4,`5,`5)">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`6.Update(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5})">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`6.Update(`1,`2,`3,`4,`5)">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="axis5">The coordinate along the 5D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`6.Update(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5})">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="axis5">The coordinate along the 5D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`6.Remove(System.Predicate{`0})">
            <summary>Removes all the items qualified by the delegate.</summary>
            <param name="where">The predicate to qualify removals.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`6.Remove(Towel.DataStructures.OmnitreeBoundsLinked{`0,`1,`2,`3,`4,`5}.Node,System.Predicate{`0})">
            <summary>Recursive version of the remove method.</summary>
            <param name="node">The current node of traversal.</param>
            <param name="where">The predicate to qualify removals.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`6.RemoveEncapsulated(`1,`1,`2,`2,`3,`3,`4,`4,`5,`5)">
            <summary>Removes all the items encapsulated in a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <returns>The number of items that were removed.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`6.RemoveEncapsulated(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5})">
            <summary>Removes all the items encapsulated in a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <returns>The number of items that were removed.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`6.RemoveEncapsulated(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5})">
            <summary>Removes all the items encapsulated in a given space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="axis5">The coordinate along the 5D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`6.RemoveOverlapped(`1,`1,`2,`2,`3,`3,`4,`4,`5,`5)">
            <summary>Removes all the items overlapping a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <returns>The number of items that were removed.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`6.RemoveOverlapped(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5})">
            <summary>Removes all the items overlapping a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <returns>The number of items that were removed.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`6.RemoveEncapsulated(`1,`1,`2,`2,`3,`3,`4,`4,`5,`5,System.Predicate{`0})">
            <summary>Removes all the items in a given space validated by a predicate.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`6.RemoveEncapsulated(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},System.Predicate{`0})">
            <summary>Removes all the items in a given space validated by a predicate.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`6.RemoveOverlapped(`1,`1,`2,`2,`3,`3,`4,`4,`5,`5,System.Predicate{`0})">
            <summary>Removes all the items in a given space validated by a predicate.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`6.RemoveOverlapped(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},System.Predicate{`0})">
            <summary>Removes all the items in a given space validated by a predicate.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`6.Remove(`0)">
            <summary>Removes all instances of a given value.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`6.RemoveOverlapped(`1,`2,`3,`4,`5)">
            <summary>Removes all the items in a given space.</summary>
            <param name="axis1">The axis of the removal along the  1D axis.</param>
            <param name="axis2">The axis of the removal along the  2D axis.</param>
            <param name="axis3">The axis of the removal along the  3D axis.</param>
            <param name="axis4">The axis of the removal along the  4D axis.</param>
            <param name="axis5">The axis of the removal along the  5D axis.</param>
            <returns>The number of items that were removed.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`6.RemoveOverlapped(`1,`2,`3,`4,`5,System.Predicate{`0})">
            <summary>Removes all the items in a given space validated by a predicate.</summary>
            <param name="axis1">The axis of the removal along the  1D axis.</param>
            <param name="axis2">The axis of the removal along the  2D axis.</param>
            <param name="axis3">The axis of the removal along the  3D axis.</param>
            <param name="axis4">The axis of the removal along the  4D axis.</param>
            <param name="axis5">The axis of the removal along the  5D axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`6.Stepper(Towel.Step{`0})">
            <summary>Traverses every item in the tree and performs the delegate in them.</summary>
            <param name="function">The delegate to perform on every item in the tree.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`6.Stepper(Towel.StepBreak{`0})">
            <summary>Traverses every item in the tree and performs the delegate in them.</summary>
            <param name="function">The delegate to perform on every item in the tree.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`6.StepperEncapsulated(Towel.Step{`0},`1,`1,`2,`2,`3,`3,`4,`4,`5,`5)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="function">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`6.StepperEncapsulated(Towel.Step{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="function">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`6.StepperOverlapped(Towel.Step{`0},`1,`1,`2,`2,`3,`3,`4,`4,`5,`5)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="function">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`6.StepperOverlapped(Towel.Step{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="function">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`6.StepperEncapsulated(Towel.StepBreak{`0},`1,`1,`2,`2,`3,`3,`4,`4,`5,`5)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`6.StepperEncapsulated(Towel.StepBreak{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`6.StepperOverlapped(Towel.StepBreak{`0},`1,`1,`2,`2,`3,`3,`4,`4,`5,`5)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`6.StepperOverlapped(Towel.StepBreak{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`6.StepperOverlapped(Towel.Step{`0},`1,`2,`3,`4,`5)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="axis1">The axis of the removal along the  1D axis.</param>
            <param name="axis2">The axis of the removal along the  2D axis.</param>
            <param name="axis3">The axis of the removal along the  3D axis.</param>
            <param name="axis4">The axis of the removal along the  4D axis.</param>
            <param name="axis5">The axis of the removal along the  5D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`6.StepperOverlapped(Towel.StepBreak{`0},`1,`2,`3,`4,`5)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="function">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="axis1">The axis of the removal along the  1D axis.</param>
            <param name="axis2">The axis of the removal along the  2D axis.</param>
            <param name="axis3">The axis of the removal along the  3D axis.</param>
            <param name="axis4">The axis of the removal along the  4D axis.</param>
            <param name="axis5">The axis of the removal along the  5D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`6.System#Collections#IEnumerable#GetEnumerator">
            <summary>FOR COMPATIBILITY ONLY. AVOID IF POSSIBLE.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`6.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>FOR COMPATIBILITY ONLY. AVOID IF POSSIBLE.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`6.DetermineChildIndex(Towel.DataStructures.Omnitree.Vector{`1,`2,`3,`4,`5},Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5})">
            <summary>Computes the child index that contains the desired dimensions.</summary>
            <param name="node">The branch .</param>
            <param name="vector">The dimensions to determine the child index.</param>
            <returns>The computed child index based on the coordinates relative to the center of the node.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`6.ShrinkChild(Towel.DataStructures.OmnitreeBoundsLinked{`0,`1,`2,`3,`4,`5}.Node,System.Int32)">
            <summary>Converts a branch back into a leaf when the count is reduced.</summary>
            <param name="parent">The parent to shrink a child of.</param>
            <param name="child">The index of the child to shrink.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`6.ReduceParentCounts(Towel.DataStructures.OmnitreeBoundsLinked{`0,`1,`2,`3,`4,`5}.Node,System.Int32)">
            <summary>Reduces the counts of all the parents of a given node by a given amount.</summary>
            <param name="parent">The starting parent of the reduction.</param>
            <param name="reduction">The amount to reduce the parent counts by.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`6.IncreaseParentCounts(Towel.DataStructures.OmnitreeBoundsLinked{`0,`1,`2,`3,`4,`5}.Node,System.Int32)">
            <summary>Increases the counts of all the parents of a given node by a given amount.</summary>
            <param name="parent">The starting parent of the increase.</param>
            <param name="increase">The amount to increase the parent counts by.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`6.InclusionCheck(Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5},Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5})">
            <summary>Checks a node for inclusion (overlap) between two bounds.</summary>
            <returns>True if the spaces overlap; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`6.EncapsulationCheck(Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5},Towel.DataStructures.Omnitree.Vector{`1,`2,`3,`4,`5})">
            <summary>Checks if a space encapsulates a point.</summary>
            <returns>True if the space encapsulates the point; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`6.EncapsulationCheck(Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5},Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5})">
            <summary>Checks if a space (left) encapsulates another space (right).</summary>
            <returns>True if the left space encapsulates the right; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`6.EqualsCheck(Towel.DataStructures.Omnitree.Vector{`1,`2,`3,`4,`5},Towel.DataStructures.Omnitree.Vector{`1,`2,`3,`4,`5})">
            <summary>Checks for equality between two locations.</summary>
            <returns>True if equal; False if not;</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`6.GetEncapsulationParent(Towel.DataStructures.OmnitreeBoundsLinked{`0,`1,`2,`3,`4,`5}.Node,Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5})">
            <summary>Gets the nearest parent that encapsulates a location.</summary>
            <param name="node">The starting node to find the encapsulating parent of the location.</param>
            <param name="bounds">The bounds to get the encapsulating parent from.</param>
            <returns>The nearest node that encapsulates the given location.</returns>
        </member>
        <member name="P:Towel.DataStructures.IOmnitreeBounds`7.Dimensions">
            <summary>The number of dimensions in this tree.</summary>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`7.CountSubSpaceEncapsulated(`1,`1,`2,`2,`3,`3,`4,`4,`5,`5,`6,`6)">
            <summary>Counts the number of items encapsulated by a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`7.CountSubSpaceOverlapped(`1,`1,`2,`2,`3,`3,`4,`4,`5,`5,`6,`6)">
            <summary>Counts the number of items overlapped by a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`7.Update">
            <summary>Iterates through the entire tree and ensures each item is in the proper leaf.</summary>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`7.Update(`1,`1,`2,`2,`3,`3,`4,`4,`5,`5,`6,`6)">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`7.RemoveEncapsulated(`1,`1,`2,`2,`3,`3,`4,`4,`5,`5,`6,`6)">
            <summary>Removes all the items in a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`7.RemoveEncapsulated(`1,`1,`2,`2,`3,`3,`4,`4,`5,`5,`6,`6,System.Predicate{`0})">
            <summary>Removes all the items in a given space where predicate is met.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="where">The predicate constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`7.RemoveOverlapped(`1,`2,`3,`4,`5,`6)">
            <summary>Removes all the items in a given space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="axis5">The coordinate along the 5D axis.</param>
            <param name="axis6">The coordinate along the 6D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`7.RemoveOverlapped(`1,`1,`2,`2,`3,`3,`4,`4,`5,`5,`6,`6)">
            <summary>Removes all the items in a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`7.RemoveOverlapped(`1,`2,`3,`4,`5,`6,System.Predicate{`0})">
            <summary>Removes all the items in a given space where equality is met.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="axis5">The coordinate along the 5D axis.</param>
            <param name="axis6">The coordinate along the 6D axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`7.RemoveOverlapped(`1,`1,`2,`2,`3,`3,`4,`4,`5,`5,`6,`6,System.Predicate{`0})">
            <summary>Removes all the items in a given space where predicate is met.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="where">The predicate constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`7.StepperEncapsulated(Towel.Step{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`6})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`7.StepperEncapsulated(Towel.StepBreak{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`6})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`7.StepperOverlapped(Towel.Step{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`6})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`7.StepperOverlapped(Towel.StepBreak{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`6})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`7.StepperOverlapped(Towel.Step{`0},`1,`2,`3,`4,`5,`6)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="axis5">The coordinate along the 5D axis.</param>
            <param name="axis6">The coordinate along the 6D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`7.StepperOverlapped(Towel.StepBreak{`0},`1,`2,`3,`4,`5,`6)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="axis5">The coordinate along the 5D axis.</param>
            <param name="axis6">The coordinate along the 6D axis.</param>
        </member>
        <member name="T:Towel.DataStructures.OmnitreeBoundsLinked`7.Node">
            <summary>Can be a leaf or a branch.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`7.Node.Item(System.Int32)">
            <summary>Gets child by index.</summary>
            <param name="child_index">The index of the child to get.</param>
            <returns>The child of the given index or null if non-existent.</returns>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`7.Node.Depth">
            <summary>The depth this node is located in the Omnitree.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`7.Node.#ctor(Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5,`6},Towel.DataStructures.OmnitreeBoundsLinked{`0,`1,`2,`3,`4,`5,`6}.Node,System.Int32)">
            <summary>Constructs a node.</summary>
            <param name="bounds">The bounds of this node.</param>
            <param name="parent">The parent of this node.</param>
            <param name="index">The number of elements stored in this node and its children.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`7.#ctor(Towel.DataStructures.OmnitreeBoundsLinked{`0,`1,`2,`3,`4,`5,`6})">
            <summary>This constructor is for cloning purposes</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`7.Dimensions">
            <summary>The number of dimensions in this tree.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`7.Equate">
            <summary>The function for equating keys in this table.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`7.GetBounds">
            <summary>The location function the Omnitree is using.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`7.Compare1">
            <summary>The comparison function the Omnitree is using along the 1D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`7.Compare2">
            <summary>The comparison function the Omnitree is using along the 2D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`7.Compare3">
            <summary>The comparison function the Omnitree is using along the 3D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`7.Compare4">
            <summary>The comparison function the Omnitree is using along the 4D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`7.Compare5">
            <summary>The comparison function the Omnitree is using along the 5D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`7.Compare6">
            <summary>The comparison function the Omnitree is using along the 6D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`7.EquateAxis1">
            <summary>The function for equating values along the 1D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`7.EquateAxis2">
            <summary>The function for equating values along the 2D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`7.EquateAxis3">
            <summary>The function for equating values along the 3D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`7.EquateAxis4">
            <summary>The function for equating values along the 4D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`7.EquateAxis5">
            <summary>The function for equating values along the 5D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`7.EquateAxis6">
            <summary>The function for equating values along the 6D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`7.Count">
            <summary>The current number of items in the tree.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`7.MaxDepth">
            <summary>Finds the current maximum depth of the tree. NOT AN O(1) OPERATION. Intended for educational purposes only.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`7.NodeCount">
            <summary>Counts the current number of nodes in the tree. NOT AN O(1) OPERATION. Intended for educational purposes only.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`7.Add(`0)">
            <summary>Adds an item to the tree.</summary>
            <param name="addition">The item to be added.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`7.Add(`0,Towel.DataStructures.OmnitreeBoundsLinked{`0,`1,`2,`3,`4,`5,`6}.Node,Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5,`6},System.Int32)">
            <summary>Recursive version of the add function.</summary>
            <param name="addition">The item to be added.</param>
            <param name="node">The current node for tree trversal.</param>
            <param name="ms">The location of the addition.</param>
            <param name="depth">The current depth of iteration.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`7.DetermineMedians(Towel.DataStructures.OmnitreeBoundsLinked{`0,`1,`2,`3,`4,`5,`6}.Node)">
            <summary>Determins the dimensions of the child at the given index.</summary>
            <param name="leaf">The parent of the node to compute dimensions for.</param>
            <param name="child">The index of the child to compute dimensions for.</param>
            <param name="median1">The computed minimum dimensions of the child node along the 1D axis.</param>
            <param name="median2">The computed minimum dimensions of the child node along the 2D axis.</param>
            <param name="median3">The computed minimum dimensions of the child node along the 3D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`7.Clear">
            <summary>Returns the tree to an empty state.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`7.Clone">
            <summary>Creates a shallow clone of this data structure.</summary>
            <returns>A shallow clone of this data structure.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`7.CountSubSpaceEncapsulated(`1,`1,`2,`2,`3,`3,`4,`4,`5,`5,`6,`6)">
            <summary>Counts the number of items encapsulated by a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`7.CountSubSpaceEncapsulated(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`6})">
            <summary>Counts the number of items encapsulated by a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`7.CountSubSpaceEncapsulated(`1,`2,`3,`4,`5,`6)">
            <summary>Counts the number of items encapsulated by a sub space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="axis5">The coordinate along the 5D axis.</param>
            <param name="axis6">The coordinate along the 6D axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`7.CountSubSpaceEncapsulated(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6})">
            <summary>Counts the number of items encapsulated by a sub space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="axis5">The coordinate along the 5D axis.</param>
            <param name="axis6">The coordinate along the 6D axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`7.CountSubSpaceOverlapped(`1,`1,`2,`2,`3,`3,`4,`4,`5,`5,`6,`6)">
            <summary>Counts the number of items overlapped by a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`7.CountSubSpaceOverlapped(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`6})">
            <summary>Counts the number of items overlapped by a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`7.CountSubSpaceOverlapped(`1,`2,`3,`4,`5,`6)">
            <summary>Counts the number of items overlapped by a sub space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="axis5">The coordinate along the 5D axis.</param>
            <param name="axis6">The coordinate along the 6D axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`7.CountSubSpaceOverlapped(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6})">
            <summary>Counts the number of items overlapped by a sub space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="axis5">The coordinate along the 5D axis.</param>
            <param name="axis6">The coordinate along the 6D axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`7.Update">
            <summary>Iterates through the entire tree and ensures each item is in the proper leaf.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`7.Update(Towel.DataStructures.OmnitreeBoundsLinked{`0,`1,`2,`3,`4,`5,`6}.Node,System.Int32)">
            <summary>Recursive version of the Update method.</summary>
            <param name="node">The current node of iteration.</param>
            <param name="depth">The current depth of iteration.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`7.Update(`1,`1,`2,`2,`3,`3,`4,`4,`5,`5,`6,`6)">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`7.Update(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`6})">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`7.Update(`1,`2,`3,`4,`5,`6)">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="axis5">The coordinate along the 5D axis.</param>
            <param name="axis6">The coordinate along the 6D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`7.Update(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6})">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="axis5">The coordinate along the 5D axis.</param>
            <param name="axis6">The coordinate along the 6D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`7.Remove(System.Predicate{`0})">
            <summary>Removes all the items qualified by the delegate.</summary>
            <param name="where">The predicate to qualify removals.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`7.Remove(Towel.DataStructures.OmnitreeBoundsLinked{`0,`1,`2,`3,`4,`5,`6}.Node,System.Predicate{`0})">
            <summary>Recursive version of the remove method.</summary>
            <param name="node">The current node of traversal.</param>
            <param name="where">The predicate to qualify removals.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`7.RemoveEncapsulated(`1,`1,`2,`2,`3,`3,`4,`4,`5,`5,`6,`6)">
            <summary>Removes all the items encapsulated in a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <returns>The number of items that were removed.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`7.RemoveEncapsulated(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`6})">
            <summary>Removes all the items encapsulated in a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <returns>The number of items that were removed.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`7.RemoveEncapsulated(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6})">
            <summary>Removes all the items encapsulated in a given space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="axis5">The coordinate along the 5D axis.</param>
            <param name="axis6">The coordinate along the 6D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`7.RemoveOverlapped(`1,`1,`2,`2,`3,`3,`4,`4,`5,`5,`6,`6)">
            <summary>Removes all the items overlapping a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <returns>The number of items that were removed.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`7.RemoveOverlapped(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`6})">
            <summary>Removes all the items overlapping a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <returns>The number of items that were removed.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`7.RemoveEncapsulated(`1,`1,`2,`2,`3,`3,`4,`4,`5,`5,`6,`6,System.Predicate{`0})">
            <summary>Removes all the items in a given space validated by a predicate.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`7.RemoveEncapsulated(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`6},System.Predicate{`0})">
            <summary>Removes all the items in a given space validated by a predicate.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`7.RemoveOverlapped(`1,`1,`2,`2,`3,`3,`4,`4,`5,`5,`6,`6,System.Predicate{`0})">
            <summary>Removes all the items in a given space validated by a predicate.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`7.RemoveOverlapped(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`6},System.Predicate{`0})">
            <summary>Removes all the items in a given space validated by a predicate.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`7.Remove(`0)">
            <summary>Removes all instances of a given value.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`7.RemoveOverlapped(`1,`2,`3,`4,`5,`6)">
            <summary>Removes all the items in a given space.</summary>
            <param name="axis1">The axis of the removal along the  1D axis.</param>
            <param name="axis2">The axis of the removal along the  2D axis.</param>
            <param name="axis3">The axis of the removal along the  3D axis.</param>
            <param name="axis4">The axis of the removal along the  4D axis.</param>
            <param name="axis5">The axis of the removal along the  5D axis.</param>
            <param name="axis6">The axis of the removal along the  6D axis.</param>
            <returns>The number of items that were removed.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`7.RemoveOverlapped(`1,`2,`3,`4,`5,`6,System.Predicate{`0})">
            <summary>Removes all the items in a given space validated by a predicate.</summary>
            <param name="axis1">The axis of the removal along the  1D axis.</param>
            <param name="axis2">The axis of the removal along the  2D axis.</param>
            <param name="axis3">The axis of the removal along the  3D axis.</param>
            <param name="axis4">The axis of the removal along the  4D axis.</param>
            <param name="axis5">The axis of the removal along the  5D axis.</param>
            <param name="axis6">The axis of the removal along the  6D axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`7.Stepper(Towel.Step{`0})">
            <summary>Traverses every item in the tree and performs the delegate in them.</summary>
            <param name="function">The delegate to perform on every item in the tree.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`7.Stepper(Towel.StepBreak{`0})">
            <summary>Traverses every item in the tree and performs the delegate in them.</summary>
            <param name="function">The delegate to perform on every item in the tree.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`7.StepperEncapsulated(Towel.Step{`0},`1,`1,`2,`2,`3,`3,`4,`4,`5,`5,`6,`6)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="function">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`7.StepperEncapsulated(Towel.Step{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`6})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="function">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`7.StepperOverlapped(Towel.Step{`0},`1,`1,`2,`2,`3,`3,`4,`4,`5,`5,`6,`6)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="function">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`7.StepperOverlapped(Towel.Step{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`6})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="function">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`7.StepperEncapsulated(Towel.StepBreak{`0},`1,`1,`2,`2,`3,`3,`4,`4,`5,`5,`6,`6)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`7.StepperEncapsulated(Towel.StepBreak{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`6})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`7.StepperOverlapped(Towel.StepBreak{`0},`1,`1,`2,`2,`3,`3,`4,`4,`5,`5,`6,`6)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`7.StepperOverlapped(Towel.StepBreak{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`6})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`7.StepperOverlapped(Towel.Step{`0},`1,`2,`3,`4,`5,`6)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="axis1">The axis of the removal along the  1D axis.</param>
            <param name="axis2">The axis of the removal along the  2D axis.</param>
            <param name="axis3">The axis of the removal along the  3D axis.</param>
            <param name="axis4">The axis of the removal along the  4D axis.</param>
            <param name="axis5">The axis of the removal along the  5D axis.</param>
            <param name="axis6">The axis of the removal along the  6D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`7.StepperOverlapped(Towel.StepBreak{`0},`1,`2,`3,`4,`5,`6)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="function">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="axis1">The axis of the removal along the  1D axis.</param>
            <param name="axis2">The axis of the removal along the  2D axis.</param>
            <param name="axis3">The axis of the removal along the  3D axis.</param>
            <param name="axis4">The axis of the removal along the  4D axis.</param>
            <param name="axis5">The axis of the removal along the  5D axis.</param>
            <param name="axis6">The axis of the removal along the  6D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`7.System#Collections#IEnumerable#GetEnumerator">
            <summary>FOR COMPATIBILITY ONLY. AVOID IF POSSIBLE.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`7.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>FOR COMPATIBILITY ONLY. AVOID IF POSSIBLE.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`7.DetermineChildIndex(Towel.DataStructures.Omnitree.Vector{`1,`2,`3,`4,`5,`6},Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5,`6})">
            <summary>Computes the child index that contains the desired dimensions.</summary>
            <param name="node">The branch .</param>
            <param name="vector">The dimensions to determine the child index.</param>
            <returns>The computed child index based on the coordinates relative to the center of the node.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`7.ShrinkChild(Towel.DataStructures.OmnitreeBoundsLinked{`0,`1,`2,`3,`4,`5,`6}.Node,System.Int32)">
            <summary>Converts a branch back into a leaf when the count is reduced.</summary>
            <param name="parent">The parent to shrink a child of.</param>
            <param name="child">The index of the child to shrink.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`7.ReduceParentCounts(Towel.DataStructures.OmnitreeBoundsLinked{`0,`1,`2,`3,`4,`5,`6}.Node,System.Int32)">
            <summary>Reduces the counts of all the parents of a given node by a given amount.</summary>
            <param name="parent">The starting parent of the reduction.</param>
            <param name="reduction">The amount to reduce the parent counts by.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`7.IncreaseParentCounts(Towel.DataStructures.OmnitreeBoundsLinked{`0,`1,`2,`3,`4,`5,`6}.Node,System.Int32)">
            <summary>Increases the counts of all the parents of a given node by a given amount.</summary>
            <param name="parent">The starting parent of the increase.</param>
            <param name="increase">The amount to increase the parent counts by.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`7.InclusionCheck(Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5,`6},Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5,`6})">
            <summary>Checks a node for inclusion (overlap) between two bounds.</summary>
            <returns>True if the spaces overlap; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`7.EncapsulationCheck(Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5,`6},Towel.DataStructures.Omnitree.Vector{`1,`2,`3,`4,`5,`6})">
            <summary>Checks if a space encapsulates a point.</summary>
            <returns>True if the space encapsulates the point; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`7.EncapsulationCheck(Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5,`6},Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5,`6})">
            <summary>Checks if a space (left) encapsulates another space (right).</summary>
            <returns>True if the left space encapsulates the right; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`7.EqualsCheck(Towel.DataStructures.Omnitree.Vector{`1,`2,`3,`4,`5,`6},Towel.DataStructures.Omnitree.Vector{`1,`2,`3,`4,`5,`6})">
            <summary>Checks for equality between two locations.</summary>
            <returns>True if equal; False if not;</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`7.GetEncapsulationParent(Towel.DataStructures.OmnitreeBoundsLinked{`0,`1,`2,`3,`4,`5,`6}.Node,Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5,`6})">
            <summary>Gets the nearest parent that encapsulates a location.</summary>
            <param name="node">The starting node to find the encapsulating parent of the location.</param>
            <param name="bounds">The bounds to get the encapsulating parent from.</param>
            <returns>The nearest node that encapsulates the given location.</returns>
        </member>
        <member name="P:Towel.DataStructures.IOmnitreeBounds`8.Dimensions">
            <summary>The number of dimensions in this tree.</summary>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`8.CountSubSpaceEncapsulated(`1,`1,`2,`2,`3,`3,`4,`4,`5,`5,`6,`6,`7,`7)">
            <summary>Counts the number of items encapsulated by a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="min7">The minimum coordinate of the space along the 7 axis.</param>
            <param name="max7">The maximum coordinate of the space along the 7 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`8.CountSubSpaceOverlapped(`1,`1,`2,`2,`3,`3,`4,`4,`5,`5,`6,`6,`7,`7)">
            <summary>Counts the number of items overlapped by a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="min7">The minimum coordinate of the space along the 7 axis.</param>
            <param name="max7">The maximum coordinate of the space along the 7 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`8.Update">
            <summary>Iterates through the entire tree and ensures each item is in the proper leaf.</summary>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`8.Update(`1,`1,`2,`2,`3,`3,`4,`4,`5,`5,`6,`6,`7,`7)">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="min7">The minimum coordinate of the space along the 7 axis.</param>
            <param name="max7">The maximum coordinate of the space along the 7 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`8.RemoveEncapsulated(`1,`1,`2,`2,`3,`3,`4,`4,`5,`5,`6,`6,`7,`7)">
            <summary>Removes all the items in a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="min7">The minimum coordinate of the space along the 7 axis.</param>
            <param name="max7">The maximum coordinate of the space along the 7 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`8.RemoveEncapsulated(`1,`1,`2,`2,`3,`3,`4,`4,`5,`5,`6,`6,`7,`7,System.Predicate{`0})">
            <summary>Removes all the items in a given space where predicate is met.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="min7">The minimum coordinate of the space along the 7 axis.</param>
            <param name="max7">The maximum coordinate of the space along the 7 axis.</param>
            <param name="where">The predicate constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`8.RemoveOverlapped(`1,`2,`3,`4,`5,`6,`7)">
            <summary>Removes all the items in a given space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="axis5">The coordinate along the 5D axis.</param>
            <param name="axis6">The coordinate along the 6D axis.</param>
            <param name="axis7">The coordinate along the 7D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`8.RemoveOverlapped(`1,`1,`2,`2,`3,`3,`4,`4,`5,`5,`6,`6,`7,`7)">
            <summary>Removes all the items in a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="min7">The minimum coordinate of the space along the 7 axis.</param>
            <param name="max7">The maximum coordinate of the space along the 7 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`8.RemoveOverlapped(`1,`2,`3,`4,`5,`6,`7,System.Predicate{`0})">
            <summary>Removes all the items in a given space where equality is met.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="axis5">The coordinate along the 5D axis.</param>
            <param name="axis6">The coordinate along the 6D axis.</param>
            <param name="axis7">The coordinate along the 7D axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`8.RemoveOverlapped(`1,`1,`2,`2,`3,`3,`4,`4,`5,`5,`6,`6,`7,`7,System.Predicate{`0})">
            <summary>Removes all the items in a given space where predicate is met.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="min7">The minimum coordinate of the space along the 7 axis.</param>
            <param name="max7">The maximum coordinate of the space along the 7 axis.</param>
            <param name="where">The predicate constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`8.StepperEncapsulated(Towel.Step{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`7},Towel.DataStructures.Omnitree.Bound{`7})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="min7">The minimum coordinate of the space along the 7 axis.</param>
            <param name="max7">The maximum coordinate of the space along the 7 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`8.StepperEncapsulated(Towel.StepBreak{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`7},Towel.DataStructures.Omnitree.Bound{`7})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="min7">The minimum coordinate of the space along the 7 axis.</param>
            <param name="max7">The maximum coordinate of the space along the 7 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`8.StepperOverlapped(Towel.Step{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`7},Towel.DataStructures.Omnitree.Bound{`7})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="min7">The minimum coordinate of the space along the 7 axis.</param>
            <param name="max7">The maximum coordinate of the space along the 7 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`8.StepperOverlapped(Towel.StepBreak{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`7},Towel.DataStructures.Omnitree.Bound{`7})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="min7">The minimum coordinate of the space along the 7 axis.</param>
            <param name="max7">The maximum coordinate of the space along the 7 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`8.StepperOverlapped(Towel.Step{`0},`1,`2,`3,`4,`5,`6,`7)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="axis5">The coordinate along the 5D axis.</param>
            <param name="axis6">The coordinate along the 6D axis.</param>
            <param name="axis7">The coordinate along the 7D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`8.StepperOverlapped(Towel.StepBreak{`0},`1,`2,`3,`4,`5,`6,`7)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="axis5">The coordinate along the 5D axis.</param>
            <param name="axis6">The coordinate along the 6D axis.</param>
            <param name="axis7">The coordinate along the 7D axis.</param>
        </member>
        <member name="T:Towel.DataStructures.OmnitreeBoundsLinked`8.Node">
            <summary>Can be a leaf or a branch.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`8.Node.Item(System.Int32)">
            <summary>Gets child by index.</summary>
            <param name="child_index">The index of the child to get.</param>
            <returns>The child of the given index or null if non-existent.</returns>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`8.Node.Depth">
            <summary>The depth this node is located in the Omnitree.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`8.Node.#ctor(Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5,`6,`7},Towel.DataStructures.OmnitreeBoundsLinked{`0,`1,`2,`3,`4,`5,`6,`7}.Node,System.Int32)">
            <summary>Constructs a node.</summary>
            <param name="bounds">The bounds of this node.</param>
            <param name="parent">The parent of this node.</param>
            <param name="index">The number of elements stored in this node and its children.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`8.#ctor(Towel.DataStructures.OmnitreeBoundsLinked{`0,`1,`2,`3,`4,`5,`6,`7})">
            <summary>This constructor is for cloning purposes</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`8.Dimensions">
            <summary>The number of dimensions in this tree.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`8.Equate">
            <summary>The function for equating keys in this table.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`8.GetBounds">
            <summary>The location function the Omnitree is using.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`8.Compare1">
            <summary>The comparison function the Omnitree is using along the 1D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`8.Compare2">
            <summary>The comparison function the Omnitree is using along the 2D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`8.Compare3">
            <summary>The comparison function the Omnitree is using along the 3D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`8.Compare4">
            <summary>The comparison function the Omnitree is using along the 4D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`8.Compare5">
            <summary>The comparison function the Omnitree is using along the 5D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`8.Compare6">
            <summary>The comparison function the Omnitree is using along the 6D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`8.Compare7">
            <summary>The comparison function the Omnitree is using along the 7D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`8.EquateAxis1">
            <summary>The function for equating values along the 1D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`8.EquateAxis2">
            <summary>The function for equating values along the 2D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`8.EquateAxis3">
            <summary>The function for equating values along the 3D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`8.EquateAxis4">
            <summary>The function for equating values along the 4D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`8.EquateAxis5">
            <summary>The function for equating values along the 5D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`8.EquateAxis6">
            <summary>The function for equating values along the 6D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`8.EquateAxis7">
            <summary>The function for equating values along the 7D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`8.Count">
            <summary>The current number of items in the tree.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`8.MaxDepth">
            <summary>Finds the current maximum depth of the tree. NOT AN O(1) OPERATION. Intended for educational purposes only.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`8.NodeCount">
            <summary>Counts the current number of nodes in the tree. NOT AN O(1) OPERATION. Intended for educational purposes only.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`8.Add(`0)">
            <summary>Adds an item to the tree.</summary>
            <param name="addition">The item to be added.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`8.Add(`0,Towel.DataStructures.OmnitreeBoundsLinked{`0,`1,`2,`3,`4,`5,`6,`7}.Node,Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5,`6,`7},System.Int32)">
            <summary>Recursive version of the add function.</summary>
            <param name="addition">The item to be added.</param>
            <param name="node">The current node for tree trversal.</param>
            <param name="ms">The location of the addition.</param>
            <param name="depth">The current depth of iteration.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`8.DetermineMedians(Towel.DataStructures.OmnitreeBoundsLinked{`0,`1,`2,`3,`4,`5,`6,`7}.Node)">
            <summary>Determins the dimensions of the child at the given index.</summary>
            <param name="leaf">The parent of the node to compute dimensions for.</param>
            <param name="child">The index of the child to compute dimensions for.</param>
            <param name="median1">The computed minimum dimensions of the child node along the 1D axis.</param>
            <param name="median2">The computed minimum dimensions of the child node along the 2D axis.</param>
            <param name="median3">The computed minimum dimensions of the child node along the 3D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`8.Clear">
            <summary>Returns the tree to an empty state.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`8.Clone">
            <summary>Creates a shallow clone of this data structure.</summary>
            <returns>A shallow clone of this data structure.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`8.CountSubSpaceEncapsulated(`1,`1,`2,`2,`3,`3,`4,`4,`5,`5,`6,`6,`7,`7)">
            <summary>Counts the number of items encapsulated by a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="min7">The minimum coordinate of the space along the 7 axis.</param>
            <param name="max7">The maximum coordinate of the space along the 7 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`8.CountSubSpaceEncapsulated(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`7},Towel.DataStructures.Omnitree.Bound{`7})">
            <summary>Counts the number of items encapsulated by a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="min7">The minimum coordinate of the space along the 7 axis.</param>
            <param name="max7">The maximum coordinate of the space along the 7 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`8.CountSubSpaceEncapsulated(`1,`2,`3,`4,`5,`6,`7)">
            <summary>Counts the number of items encapsulated by a sub space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="axis5">The coordinate along the 5D axis.</param>
            <param name="axis6">The coordinate along the 6D axis.</param>
            <param name="axis7">The coordinate along the 7D axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`8.CountSubSpaceEncapsulated(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`7})">
            <summary>Counts the number of items encapsulated by a sub space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="axis5">The coordinate along the 5D axis.</param>
            <param name="axis6">The coordinate along the 6D axis.</param>
            <param name="axis7">The coordinate along the 7D axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`8.CountSubSpaceOverlapped(`1,`1,`2,`2,`3,`3,`4,`4,`5,`5,`6,`6,`7,`7)">
            <summary>Counts the number of items overlapped by a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="min7">The minimum coordinate of the space along the 7 axis.</param>
            <param name="max7">The maximum coordinate of the space along the 7 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`8.CountSubSpaceOverlapped(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`7},Towel.DataStructures.Omnitree.Bound{`7})">
            <summary>Counts the number of items overlapped by a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="min7">The minimum coordinate of the space along the 7 axis.</param>
            <param name="max7">The maximum coordinate of the space along the 7 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`8.CountSubSpaceOverlapped(`1,`2,`3,`4,`5,`6,`7)">
            <summary>Counts the number of items overlapped by a sub space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="axis5">The coordinate along the 5D axis.</param>
            <param name="axis6">The coordinate along the 6D axis.</param>
            <param name="axis7">The coordinate along the 7D axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`8.CountSubSpaceOverlapped(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`7})">
            <summary>Counts the number of items overlapped by a sub space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="axis5">The coordinate along the 5D axis.</param>
            <param name="axis6">The coordinate along the 6D axis.</param>
            <param name="axis7">The coordinate along the 7D axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`8.Update">
            <summary>Iterates through the entire tree and ensures each item is in the proper leaf.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`8.Update(Towel.DataStructures.OmnitreeBoundsLinked{`0,`1,`2,`3,`4,`5,`6,`7}.Node,System.Int32)">
            <summary>Recursive version of the Update method.</summary>
            <param name="node">The current node of iteration.</param>
            <param name="depth">The current depth of iteration.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`8.Update(`1,`1,`2,`2,`3,`3,`4,`4,`5,`5,`6,`6,`7,`7)">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="min7">The minimum coordinate of the space along the 7 axis.</param>
            <param name="max7">The maximum coordinate of the space along the 7 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`8.Update(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`7},Towel.DataStructures.Omnitree.Bound{`7})">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="min7">The minimum coordinate of the space along the 7 axis.</param>
            <param name="max7">The maximum coordinate of the space along the 7 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`8.Update(`1,`2,`3,`4,`5,`6,`7)">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="axis5">The coordinate along the 5D axis.</param>
            <param name="axis6">The coordinate along the 6D axis.</param>
            <param name="axis7">The coordinate along the 7D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`8.Update(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`7})">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="axis5">The coordinate along the 5D axis.</param>
            <param name="axis6">The coordinate along the 6D axis.</param>
            <param name="axis7">The coordinate along the 7D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`8.Remove(System.Predicate{`0})">
            <summary>Removes all the items qualified by the delegate.</summary>
            <param name="where">The predicate to qualify removals.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`8.Remove(Towel.DataStructures.OmnitreeBoundsLinked{`0,`1,`2,`3,`4,`5,`6,`7}.Node,System.Predicate{`0})">
            <summary>Recursive version of the remove method.</summary>
            <param name="node">The current node of traversal.</param>
            <param name="where">The predicate to qualify removals.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`8.RemoveEncapsulated(`1,`1,`2,`2,`3,`3,`4,`4,`5,`5,`6,`6,`7,`7)">
            <summary>Removes all the items encapsulated in a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="min7">The minimum coordinate of the space along the 7 axis.</param>
            <param name="max7">The maximum coordinate of the space along the 7 axis.</param>
            <returns>The number of items that were removed.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`8.RemoveEncapsulated(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`7},Towel.DataStructures.Omnitree.Bound{`7})">
            <summary>Removes all the items encapsulated in a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="min7">The minimum coordinate of the space along the 7 axis.</param>
            <param name="max7">The maximum coordinate of the space along the 7 axis.</param>
            <returns>The number of items that were removed.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`8.RemoveEncapsulated(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`7})">
            <summary>Removes all the items encapsulated in a given space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="axis5">The coordinate along the 5D axis.</param>
            <param name="axis6">The coordinate along the 6D axis.</param>
            <param name="axis7">The coordinate along the 7D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`8.RemoveOverlapped(`1,`1,`2,`2,`3,`3,`4,`4,`5,`5,`6,`6,`7,`7)">
            <summary>Removes all the items overlapping a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="min7">The minimum coordinate of the space along the 7 axis.</param>
            <param name="max7">The maximum coordinate of the space along the 7 axis.</param>
            <returns>The number of items that were removed.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`8.RemoveOverlapped(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`7},Towel.DataStructures.Omnitree.Bound{`7})">
            <summary>Removes all the items overlapping a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="min7">The minimum coordinate of the space along the 7 axis.</param>
            <param name="max7">The maximum coordinate of the space along the 7 axis.</param>
            <returns>The number of items that were removed.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`8.RemoveEncapsulated(`1,`1,`2,`2,`3,`3,`4,`4,`5,`5,`6,`6,`7,`7,System.Predicate{`0})">
            <summary>Removes all the items in a given space validated by a predicate.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="min7">The minimum coordinate of the space along the 7 axis.</param>
            <param name="max7">The maximum coordinate of the space along the 7 axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`8.RemoveEncapsulated(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`7},Towel.DataStructures.Omnitree.Bound{`7},System.Predicate{`0})">
            <summary>Removes all the items in a given space validated by a predicate.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="min7">The minimum coordinate of the space along the 7 axis.</param>
            <param name="max7">The maximum coordinate of the space along the 7 axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`8.RemoveOverlapped(`1,`1,`2,`2,`3,`3,`4,`4,`5,`5,`6,`6,`7,`7,System.Predicate{`0})">
            <summary>Removes all the items in a given space validated by a predicate.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="min7">The minimum coordinate of the space along the 7 axis.</param>
            <param name="max7">The maximum coordinate of the space along the 7 axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`8.RemoveOverlapped(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`7},Towel.DataStructures.Omnitree.Bound{`7},System.Predicate{`0})">
            <summary>Removes all the items in a given space validated by a predicate.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="min7">The minimum coordinate of the space along the 7 axis.</param>
            <param name="max7">The maximum coordinate of the space along the 7 axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`8.Remove(`0)">
            <summary>Removes all instances of a given value.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`8.RemoveOverlapped(`1,`2,`3,`4,`5,`6,`7)">
            <summary>Removes all the items in a given space.</summary>
            <param name="axis1">The axis of the removal along the  1D axis.</param>
            <param name="axis2">The axis of the removal along the  2D axis.</param>
            <param name="axis3">The axis of the removal along the  3D axis.</param>
            <param name="axis4">The axis of the removal along the  4D axis.</param>
            <param name="axis5">The axis of the removal along the  5D axis.</param>
            <param name="axis6">The axis of the removal along the  6D axis.</param>
            <param name="axis7">The axis of the removal along the  7D axis.</param>
            <returns>The number of items that were removed.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`8.RemoveOverlapped(`1,`2,`3,`4,`5,`6,`7,System.Predicate{`0})">
            <summary>Removes all the items in a given space validated by a predicate.</summary>
            <param name="axis1">The axis of the removal along the  1D axis.</param>
            <param name="axis2">The axis of the removal along the  2D axis.</param>
            <param name="axis3">The axis of the removal along the  3D axis.</param>
            <param name="axis4">The axis of the removal along the  4D axis.</param>
            <param name="axis5">The axis of the removal along the  5D axis.</param>
            <param name="axis6">The axis of the removal along the  6D axis.</param>
            <param name="axis7">The axis of the removal along the  7D axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`8.Stepper(Towel.Step{`0})">
            <summary>Traverses every item in the tree and performs the delegate in them.</summary>
            <param name="function">The delegate to perform on every item in the tree.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`8.Stepper(Towel.StepBreak{`0})">
            <summary>Traverses every item in the tree and performs the delegate in them.</summary>
            <param name="function">The delegate to perform on every item in the tree.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`8.StepperEncapsulated(Towel.Step{`0},`1,`1,`2,`2,`3,`3,`4,`4,`5,`5,`6,`6,`7,`7)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="function">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="min7">The minimum coordinate of the space along the 7 axis.</param>
            <param name="max7">The maximum coordinate of the space along the 7 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`8.StepperEncapsulated(Towel.Step{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`7},Towel.DataStructures.Omnitree.Bound{`7})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="function">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="min7">The minimum coordinate of the space along the 7 axis.</param>
            <param name="max7">The maximum coordinate of the space along the 7 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`8.StepperOverlapped(Towel.Step{`0},`1,`1,`2,`2,`3,`3,`4,`4,`5,`5,`6,`6,`7,`7)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="function">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="min7">The minimum coordinate of the space along the 7 axis.</param>
            <param name="max7">The maximum coordinate of the space along the 7 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`8.StepperOverlapped(Towel.Step{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`7},Towel.DataStructures.Omnitree.Bound{`7})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="function">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="min7">The minimum coordinate of the space along the 7 axis.</param>
            <param name="max7">The maximum coordinate of the space along the 7 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`8.StepperEncapsulated(Towel.StepBreak{`0},`1,`1,`2,`2,`3,`3,`4,`4,`5,`5,`6,`6,`7,`7)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="min7">The minimum coordinate of the space along the 7 axis.</param>
            <param name="max7">The maximum coordinate of the space along the 7 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`8.StepperEncapsulated(Towel.StepBreak{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`7},Towel.DataStructures.Omnitree.Bound{`7})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="min7">The minimum coordinate of the space along the 7 axis.</param>
            <param name="max7">The maximum coordinate of the space along the 7 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`8.StepperOverlapped(Towel.StepBreak{`0},`1,`1,`2,`2,`3,`3,`4,`4,`5,`5,`6,`6,`7,`7)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="min7">The minimum coordinate of the space along the 7 axis.</param>
            <param name="max7">The maximum coordinate of the space along the 7 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`8.StepperOverlapped(Towel.StepBreak{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`7},Towel.DataStructures.Omnitree.Bound{`7})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="min7">The minimum coordinate of the space along the 7 axis.</param>
            <param name="max7">The maximum coordinate of the space along the 7 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`8.StepperOverlapped(Towel.Step{`0},`1,`2,`3,`4,`5,`6,`7)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="axis1">The axis of the removal along the  1D axis.</param>
            <param name="axis2">The axis of the removal along the  2D axis.</param>
            <param name="axis3">The axis of the removal along the  3D axis.</param>
            <param name="axis4">The axis of the removal along the  4D axis.</param>
            <param name="axis5">The axis of the removal along the  5D axis.</param>
            <param name="axis6">The axis of the removal along the  6D axis.</param>
            <param name="axis7">The axis of the removal along the  7D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`8.StepperOverlapped(Towel.StepBreak{`0},`1,`2,`3,`4,`5,`6,`7)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="function">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="axis1">The axis of the removal along the  1D axis.</param>
            <param name="axis2">The axis of the removal along the  2D axis.</param>
            <param name="axis3">The axis of the removal along the  3D axis.</param>
            <param name="axis4">The axis of the removal along the  4D axis.</param>
            <param name="axis5">The axis of the removal along the  5D axis.</param>
            <param name="axis6">The axis of the removal along the  6D axis.</param>
            <param name="axis7">The axis of the removal along the  7D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`8.System#Collections#IEnumerable#GetEnumerator">
            <summary>FOR COMPATIBILITY ONLY. AVOID IF POSSIBLE.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`8.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>FOR COMPATIBILITY ONLY. AVOID IF POSSIBLE.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`8.DetermineChildIndex(Towel.DataStructures.Omnitree.Vector{`1,`2,`3,`4,`5,`6,`7},Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5,`6,`7})">
            <summary>Computes the child index that contains the desired dimensions.</summary>
            <param name="node">The branch .</param>
            <param name="vector">The dimensions to determine the child index.</param>
            <returns>The computed child index based on the coordinates relative to the center of the node.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`8.ShrinkChild(Towel.DataStructures.OmnitreeBoundsLinked{`0,`1,`2,`3,`4,`5,`6,`7}.Node,System.Int32)">
            <summary>Converts a branch back into a leaf when the count is reduced.</summary>
            <param name="parent">The parent to shrink a child of.</param>
            <param name="child">The index of the child to shrink.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`8.ReduceParentCounts(Towel.DataStructures.OmnitreeBoundsLinked{`0,`1,`2,`3,`4,`5,`6,`7}.Node,System.Int32)">
            <summary>Reduces the counts of all the parents of a given node by a given amount.</summary>
            <param name="parent">The starting parent of the reduction.</param>
            <param name="reduction">The amount to reduce the parent counts by.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`8.IncreaseParentCounts(Towel.DataStructures.OmnitreeBoundsLinked{`0,`1,`2,`3,`4,`5,`6,`7}.Node,System.Int32)">
            <summary>Increases the counts of all the parents of a given node by a given amount.</summary>
            <param name="parent">The starting parent of the increase.</param>
            <param name="increase">The amount to increase the parent counts by.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`8.InclusionCheck(Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5,`6,`7},Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5,`6,`7})">
            <summary>Checks a node for inclusion (overlap) between two bounds.</summary>
            <returns>True if the spaces overlap; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`8.EncapsulationCheck(Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5,`6,`7},Towel.DataStructures.Omnitree.Vector{`1,`2,`3,`4,`5,`6,`7})">
            <summary>Checks if a space encapsulates a point.</summary>
            <returns>True if the space encapsulates the point; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`8.EncapsulationCheck(Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5,`6,`7},Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5,`6,`7})">
            <summary>Checks if a space (left) encapsulates another space (right).</summary>
            <returns>True if the left space encapsulates the right; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`8.EqualsCheck(Towel.DataStructures.Omnitree.Vector{`1,`2,`3,`4,`5,`6,`7},Towel.DataStructures.Omnitree.Vector{`1,`2,`3,`4,`5,`6,`7})">
            <summary>Checks for equality between two locations.</summary>
            <returns>True if equal; False if not;</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`8.GetEncapsulationParent(Towel.DataStructures.OmnitreeBoundsLinked{`0,`1,`2,`3,`4,`5,`6,`7}.Node,Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5,`6,`7})">
            <summary>Gets the nearest parent that encapsulates a location.</summary>
            <param name="node">The starting node to find the encapsulating parent of the location.</param>
            <param name="bounds">The bounds to get the encapsulating parent from.</param>
            <returns>The nearest node that encapsulates the given location.</returns>
        </member>
        <member name="T:Towel.DataStructures.IOrder`1">
            <summary>Sorted linear data structure.</summary>
            <typeparam name="T">The generic type stored in this data structure.</typeparam>
        </member>
        <member name="M:Towel.DataStructures.IOrder`1.RemoveFirst(`0)">
            <summary>Removes the first occurence of an item in the list.</summary>
            <param name="removal">The item to remove.</param>
        </member>
        <member name="M:Towel.DataStructures.IOrder`1.TryRemoveFirst(`0)">
            <summary>Removes the first occurence of an item in the list or returns false.</summary>
            <param name="removal">The item to remove.</param>
            <returns>True if the item was found and removed; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.IOrder`1.RemoveAll(`0)">
            <summary>Removes all occurences of an item in the list.</summary>
            <param name="removal">The item to genocide (hell yeah that is a verb...).</param>
        </member>
        <member name="T:Towel.DataStructures.OrderListArray`1">
            <summary>Sorted linear data structure implemented using a list array.</summary>
            <typeparam name="T">The generic type stored in this data structure.</typeparam>
        </member>
        <member name="M:Towel.DataStructures.OrderListArray`1.#ctor">
            <summary>Constructs a Order_ListArray.</summary>
        </member>
        <member name="M:Towel.DataStructures.OrderListArray`1.#ctor(Towel.Compare{`0})">
            <summary>Constructs a Order_ListArray.</summary>
            <param name="compare">The soring technique used by this data structure.</param>
        </member>
        <member name="P:Towel.DataStructures.OrderListArray`1.Item(System.Int32)">
            <summary>Index accessor.</summary>
            <param name="i">Index to get the value of.</param>
            <returns>The value at the desired index.</returns>
        </member>
        <member name="P:Towel.DataStructures.OrderListArray`1.Compare">
            <summary>The comparison function utilized by this data structure.</summary>
        </member>
        <member name="P:Towel.DataStructures.OrderListArray`1.Count">
            <summary>Returns the number of items in the list.</summary>
        </member>
        <member name="M:Towel.DataStructures.OrderListArray`1.Add(`0)">
            <summary>Adds an item to the end of this list.</summary>
            <param name="addition">The item to add to the list.</param>
        </member>
        <member name="M:Towel.DataStructures.OrderListArray`1.RemoveFirst(`0)">
            <summary>Removes the first occurence of an item in the list.</summary>
            <param name="removal">The item to remove.</param>
            <param name="compare">The function to determine equality.</param>
        </member>
        <member name="M:Towel.DataStructures.OrderListArray`1.TryRemoveFirst(`0)">
            <summary>Removes the first occurence of an item in the list or returns false.</summary>
            <param name="removal">The item to remove.</param>
            <param name="compare">The function to determine equality.</param>
            <returns>True if the item was found and removed; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.OrderListArray`1.RemoveAll(`0)">
            <summary>Removes all occurences of an item in the list.</summary>
            <param name="removal">The item to genocide (hell yeah that is a verb...).</param>
            <param name="compare">The function to determine equality.</param>
        </member>
        <member name="M:Towel.DataStructures.OrderListArray`1.Clear">
            <summary>Resets the list to an empty state. WARNING could cause excessive garbage collection.</summary>
        </member>
        <member name="M:Towel.DataStructures.OrderListArray`1.Stepper(Towel.Step{`0})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="function">The delegate to invoke on each item in the structure.</param>
        </member>
        <member name="M:Towel.DataStructures.OrderListArray`1.Stepper(Towel.StepRef{`0})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="function">The delegate to invoke on each item in the structure.</param>
        </member>
        <member name="M:Towel.DataStructures.OrderListArray`1.Stepper(Towel.StepBreak{`0})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="function">The delegate to invoke on each item in the structure.</param>
            <returns>The resulting status of the iteration.</returns>
        </member>
        <member name="M:Towel.DataStructures.OrderListArray`1.Stepper(Towel.StepRefBreak{`0})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="function">The delegate to invoke on each item in the structure.</param>
            <returns>The resulting status of the iteration.</returns>
        </member>
        <member name="T:Towel.DataStructures.OrderListLinked`1">
            <summary>Sorted linear data structure implemented using a list array.</summary>
            <typeparam name="T">The generic type stored in this data structure.</typeparam>
        </member>
        <member name="M:Towel.DataStructures.OrderListLinked`1.#ctor(Towel.Compare{`0})">
            <summary>Constructs a Order_ListArray.</summary>
            <param name="compare">The soring technique used by this data structure.</param>
        </member>
        <member name="P:Towel.DataStructures.OrderListLinked`1.Compare">
            <summary>The comparison function utilized by this data structure.</summary>
        </member>
        <member name="P:Towel.DataStructures.OrderListLinked`1.Count">
            <summary>Returns the number of items in the list.</summary>
        </member>
        <member name="M:Towel.DataStructures.OrderListLinked`1.Add(`0)">
            <summary>Adds an item to the end of this list.</summary>
            <param name="addition">The item to add to the list.</param>
        </member>
        <member name="M:Towel.DataStructures.OrderListLinked`1.RemoveFirst(`0)">
            <summary>Removes the first occurence of an item in the list.</summary>
            <param name="removal">The item to remove.</param>
            <param name="compare">The function to determine equality.</param>
        </member>
        <member name="M:Towel.DataStructures.OrderListLinked`1.TryRemoveFirst(`0)">
            <summary>Removes the first occurence of an item in the list or returns false.</summary>
            <param name="removal">The item to remove.</param>
            <param name="compare">The function to determine equality.</param>
            <returns>True if the item was found and removed; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.OrderListLinked`1.RemoveAll(`0)">
            <summary>Removes all occurences of an item in the list.</summary>
            <param name="removal">The item to genocide (hell yeah that is a verb...).</param>
            <param name="compare">The function to determine equality.</param>
        </member>
        <member name="M:Towel.DataStructures.OrderListLinked`1.Clear">
            <summary>Resets the list to an empty state. WARNING could cause excessive garbage collection.</summary>
        </member>
        <member name="M:Towel.DataStructures.OrderListLinked`1.Stepper(Towel.Step{`0})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="function">The delegate to invoke on each item in the structure.</param>
        </member>
        <member name="M:Towel.DataStructures.OrderListLinked`1.Stepper(Towel.StepRef{`0})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="function">The delegate to invoke on each item in the structure.</param>
        </member>
        <member name="M:Towel.DataStructures.OrderListLinked`1.Stepper(Towel.StepBreak{`0})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="function">The delegate to invoke on each item in the structure.</param>
            <returns>The resulting status of the iteration.</returns>
        </member>
        <member name="M:Towel.DataStructures.OrderListLinked`1.Stepper(Towel.StepRefBreak{`0})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="function">The delegate to invoke on each item in the structure.</param>
            <returns>The resulting status of the iteration.</returns>
        </member>
        <member name="T:Towel.DataStructures.IQueue`1">
            <summary>Implements First-In-First-Out queue data structure.</summary>
            <typeparam name="T">The generic type within the structure.</typeparam>
        </member>
        <member name="P:Towel.DataStructures.IQueue`1.Newest">
            <summary>The newest item currently in the queue.</summary>
        </member>
        <member name="P:Towel.DataStructures.IQueue`1.Oldest">
            <summary>The oldest item currently in the queue.</summary>
        </member>
        <member name="M:Towel.DataStructures.IQueue`1.Enqueue(`0)">
            <summary>Adds an item to the back of the queue.</summary>
            <param name="enqueue">The item to add to the queue.</param>
        </member>
        <member name="M:Towel.DataStructures.IQueue`1.Peek">
            <summary>Gets the next item in the queue without removing it.</summary>
            <returns>The next item in the queue.</returns>
        </member>
        <member name="M:Towel.DataStructures.IQueue`1.Dequeue">
            <summary>Removes the oldest item in the queue.</summary>
            <returns>The next item in the queue.</returns>
        </member>
        <member name="T:Towel.DataStructures.QueueLinked`1">
            <summary>Implements First-In-First-Out queue data structure using a linked list.</summary>
            <typeparam name="T">The generic type within the structure.</typeparam>
        </member>
        <member name="M:Towel.DataStructures.QueueLinked`1.#ctor">
            <summary>Creates an instance of a queue.</summary>
            <runtime>θ(1)</runtime>
        </member>
        <member name="P:Towel.DataStructures.QueueLinked`1.Newest">
            <summary>The newest item currently in the queue.</summary>
            <runtime>θ(1)</runtime>
        </member>
        <member name="P:Towel.DataStructures.QueueLinked`1.Oldest">
            <summary>The oldest item currently in the queue.</summary>
            <runtime>θ(1)</runtime>
        </member>
        <member name="P:Towel.DataStructures.QueueLinked`1.Count">
            <summary>Returns the number of items in the queue.</summary>
            <runtime>θ(1)</runtime>
        </member>
        <member name="M:Towel.DataStructures.QueueLinked`1.ToArray">
            <summary>Converts the list into a standard array.</summary>
            <returns>A standard array of all the items.</returns>
            /// <remarks>Runtime: Towel(n).</remarks>
        </member>
        <member name="M:Towel.DataStructures.QueueLinked`1.Clone">
            <summary>Creates a shallow clone of this data structure.</summary>
            <returns>A shallow clone of this data structure.</returns>
        </member>
        <member name="M:Towel.DataStructures.QueueLinked`1.Enqueue(`0)">
            <summary>Adds an item to the back of the queue.</summary>
            <param name="enqueue">The item to add to the queue.</param>
            <remarks>Runtime: O(1).</remarks>
        </member>
        <member name="M:Towel.DataStructures.QueueLinked`1.Dequeue">
            <summary>Removes the oldest item in the queue.</summary>
            <returns>The next item in the queue.</returns>
            <remarks>Runtime: O(1).</remarks>
        </member>
        <member name="M:Towel.DataStructures.QueueLinked`1.Peek">
            <summary>Gets the next item in the queue without removing it.</summary>
            <returns>The next item in the queue.</returns>
        </member>
        <member name="M:Towel.DataStructures.QueueLinked`1.Clear">
            <summary>Resets the queue to an empty state.</summary>
            <remarks>Runtime: O(1).</remarks>
        </member>
        <member name="M:Towel.DataStructures.QueueLinked`1.Stepper(Towel.Step{`0})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="function">The delegate to invoke on each item in the structure.</param>
        </member>
        <member name="M:Towel.DataStructures.QueueLinked`1.Stepper(Towel.StepRef{`0})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="function">The delegate to invoke on each item in the structure.</param>
        </member>
        <member name="M:Towel.DataStructures.QueueLinked`1.Stepper(Towel.StepBreak{`0})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="function">The delegate to invoke on each item in the structure.</param>
            <returns>The resulting status of the iteration.</returns>
        </member>
        <member name="M:Towel.DataStructures.QueueLinked`1.Stepper(Towel.StepRefBreak{`0})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="function">The delegate to invoke on each item in the structure.</param>
            <returns>The resulting status of the iteration.</returns>
        </member>
        <member name="M:Towel.DataStructures.QueueLinked`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>FOR COMPATIBILITY ONLY. AVOID IF POSSIBLE.</summary>
        </member>
        <member name="M:Towel.DataStructures.QueueLinked`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>FOR COMPATIBILITY ONLY. AVOID IF POSSIBLE.</summary>
        </member>
        <member name="T:Towel.DataStructures.QueueArray`1">
            <summary>Implements First-In-First-Out queue data structure using an array.</summary>
            <typeparam name="T">The generic type within the structure.</typeparam>
        </member>
        <member name="M:Towel.DataStructures.QueueArray`1.#ctor">
            <summary>Creates an instance of a ListArray, and sets it's minimum capacity.</summary>
            <param name="minimumCapacity">The initial and smallest array size allowed by this list.</param>
            <runtime>θ(1)</runtime>
        </member>
        <member name="M:Towel.DataStructures.QueueArray`1.#ctor(System.Int32)">
            <summary>Creates an instance of a ListArray, and sets it's minimum capacity.</summary>
            <param name="minimumCapacity">The initial and smallest array size allowed by this list.</param>
            <runtime>θ(1)</runtime>
        </member>
        <member name="P:Towel.DataStructures.QueueArray`1.Count">
            <summary>Gets the number of items in the list.</summary>
            <remarks>Runtime: O(1).</remarks>
        </member>
        <member name="P:Towel.DataStructures.QueueArray`1.CurrentCapacity">
            <summary>Gets the current capacity of the list.</summary>
            <remarks>Runtime: O(1).</remarks>
        </member>
        <member name="P:Towel.DataStructures.QueueArray`1.MinimumCapacity">
            <summary>Allows you to adjust the minimum capacity of this list.</summary>
            <remarks>Runtime: O(n), Omega(1).</remarks>
        </member>
        <member name="P:Towel.DataStructures.QueueArray`1.Newest">
            <summary>The newest item currently in the queue.</summary>
        </member>
        <member name="P:Towel.DataStructures.QueueArray`1.Oldest">
            <summary>The oldest item currently in the queue.</summary>
        </member>
        <member name="M:Towel.DataStructures.QueueArray`1.ToArray">
            <summary>Converts the list array into a standard array.</summary>
            <returns>A standard array of all the elements.</returns>
        </member>
        <member name="M:Towel.DataStructures.QueueArray`1.Clone">
            <summary>Creates a shallow clone of this data structure.</summary>
            <returns>A shallow clone of this data structure.</returns>
        </member>
        <member name="M:Towel.DataStructures.QueueArray`1.Enqueue(`0)">
            <summary>Adds an item to the end of the list.</summary>
            <param name="addition">The item to be added.</param>
            <remarks>Runtime: O(n), EstAvg(1). </remarks>
        </member>
        <member name="M:Towel.DataStructures.QueueArray`1.Dequeue">
            <summary>Removes the item at a specific index.</summary>
            <remarks>Runtime: Towel(n - index).</remarks>
        </member>
        <member name="M:Towel.DataStructures.QueueArray`1.Clear">
            <summary>Empties the list back and reduces it back to its original capacity.</summary>
            <remarks>Runtime: O(1).</remarks>
        </member>
        <member name="M:Towel.DataStructures.QueueArray`1.Stepper(Towel.Step{`0})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="step_function">The delegate to invoke on each item in the structure.</param>
        </member>
        <member name="M:Towel.DataStructures.QueueArray`1.Stepper(Towel.StepRef{`0})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="step_function">The delegate to invoke on each item in the structure.</param>
        </member>
        <member name="M:Towel.DataStructures.QueueArray`1.Stepper(Towel.StepBreak{`0})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="step_function">The delegate to invoke on each item in the structure.</param>
            <returns>The resulting status of the iteration.</returns>
        </member>
        <member name="M:Towel.DataStructures.QueueArray`1.Stepper(Towel.StepRefBreak{`0})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="step">The delegate to invoke on each item in the structure.</param>
            <returns>The resulting status of the iteration.</returns>
        </member>
        <member name="T:Towel.DataStructures.IRedBlackTree`1">
            <summary>A self sorting binary tree using the red-black tree algorithms.</summary>
            <typeparam name="T">The generic type of the structure.</typeparam>
        </member>
        <member name="P:Towel.DataStructures.IRedBlackTree`1.CurrentLeast">
            <summary>Gets the current least item in the avl tree.</summary>
        </member>
        <member name="P:Towel.DataStructures.IRedBlackTree`1.CurrentGreatest">
            <summary>Gets the current greated item in the avl tree.</summary>
        </member>
        <member name="M:Towel.DataStructures.IRedBlackTree`1.Contains``1(``0,Towel.Compare{`0,``0})">
            <summary>Determines if this structure contains a given item.</summary>
            <typeparam name="Key">The type of the key.</typeparam>
            <param name="key">The key of the item to check.</param>
            <param name="comparison">Comparison technique (must match the sorting technique of the structure).</param>
            <returns>True if contained, False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.IRedBlackTree`1.Get``1(``0,Towel.Compare{`0,``0})">
            <summary>Gets an item based on a given key.</summary>
            <typeparam name="Key">The type of the key.</typeparam>
            <param name="key">The key of the item to get.</param>
            <param name="comparison">Comparison technique (must match the sorting technique of the structure).</param>
            <returns>The found item.</returns>
        </member>
        <member name="M:Towel.DataStructures.IRedBlackTree`1.Remove``1(``0,Towel.Compare{`0,``0})">
            <summary>Removes and item based on a given key.</summary>
            <typeparam name="Key">The type of the key.</typeparam>
            <param name="key">The key of the item to be removed.</param>
            <param name="comparison">Comparison technique (must match the sorting technique of the structure).</param>
        </member>
        <member name="M:Towel.DataStructures.IRedBlackTree`1.StepperReverse(Towel.Step{`0})">
            <summary>Invokes a delegate for each entry in the data structure (right to left).</summary>
            <param name="step">The delegate to invoke on each item in the structure.</param>
        </member>
        <member name="M:Towel.DataStructures.IRedBlackTree`1.StepperReverse(Towel.StepRef{`0})">
            <summary>Invokes a delegate for each entry in the data structure (right to left).</summary>
            <param name="step">The delegate to invoke on each item in the structure.</param>
        </member>
        <member name="M:Towel.DataStructures.IRedBlackTree`1.StepperReverse(Towel.StepBreak{`0})">
            <summary>Invokes a delegate for each entry in the data structure (right to left).</summary>
            <param name="step">The delegate to invoke on each item in the structure.</param>
            <returns>The resulting status of the iteration.</returns>
        </member>
        <member name="M:Towel.DataStructures.IRedBlackTree`1.StepperReverse(Towel.StepRefBreak{`0})">
            <summary>Invokes a delegate for each entry in the data structure (right to left).</summary>
            <param name="step">The delegate to invoke on each item in the structure.</param>
            <returns>The resulting status of the iteration.</returns>
        </member>
        <member name="M:Towel.DataStructures.IRedBlackTree`1.Stepper(Towel.Step{`0},`0,`0)">
            <summary>Does an optimized step function (left to right) for sorted binary search trees.</summary>
            <param name="step">The step function.</param>
            <param name="minimum">The minimum step value.</param>
            <param name="maximum">The maximum step value.</param>
        </member>
        <member name="M:Towel.DataStructures.IRedBlackTree`1.Stepper(Towel.StepRef{`0},`0,`0)">
            <summary>Does an optimized step function (left to right) for sorted binary search trees.</summary>
            <param name="step">The step function.</param>
            <param name="minimum">The minimum step value.</param>
            <param name="maximum">The maximum step value.</param>
        </member>
        <member name="M:Towel.DataStructures.IRedBlackTree`1.Stepper(Towel.StepBreak{`0},`0,`0)">
            <summary>Does an optimized step function (left to right) for sorted binary search trees.</summary>
            <param name="step">The step function.</param>
            <param name="minimum">The minimum step value.</param>
            <param name="maximum">The maximum step value.</param>
            <returns>The result status of the stepper function.</returns>
        </member>
        <member name="M:Towel.DataStructures.IRedBlackTree`1.Stepper(Towel.StepRefBreak{`0},`0,`0)">
            <summary>Does an optimized step function (left to right) for sorted binary search trees.</summary>
            <param name="step">The step function.</param>
            <param name="minimum">The minimum step value.</param>
            <param name="maximum">The maximum step value.</param>
            <returns>The result status of the stepper function.</returns>
        </member>
        <member name="M:Towel.DataStructures.IRedBlackTree`1.StepperReverse(Towel.Step{`0},`0,`0)">
            <summary>Does an optimized step function (right to left) for sorted binary search trees.</summary>
            <param name="step">The step function.</param>
            <param name="minimum">The minimum step value.</param>
            <param name="maximum">The maximum step value.</param>
        </member>
        <member name="M:Towel.DataStructures.IRedBlackTree`1.StepperReverse(Towel.StepRef{`0},`0,`0)">
            <summary>Does an optimized step function (right to left) for sorted binary search trees.</summary>
            <param name="step">The step function.</param>
            <param name="minimum">The minimum step value.</param>
            <param name="maximum">The maximum step value.</param>
        </member>
        <member name="M:Towel.DataStructures.IRedBlackTree`1.StepperReverse(Towel.StepBreak{`0},`0,`0)">
            <summary>Does an optimized step function (right to left) for sorted binary search trees.</summary>
            <param name="step">The step function.</param>
            <param name="minimum">The minimum step value.</param>
            <param name="maximum">The maximum step value.</param>
            <returns>The result status of the stepper function.</returns>
        </member>
        <member name="M:Towel.DataStructures.IRedBlackTree`1.StepperReverse(Towel.StepRefBreak{`0},`0,`0)">
            <summary>Does an optimized step function (right to left) for sorted binary search trees.</summary>
            <param name="step">The step function.</param>
            <param name="minimum">The minimum step value.</param>
            <param name="maximum">The maximum step value.</param>
            <returns>The result status of the stepper function.</returns>
        </member>
        <member name="T:Towel.DataStructures.RedBlackTree">
            <summary>Contains extension methods for the RedBlackTree interface.</summary>
        </member>
        <member name="M:Towel.DataStructures.RedBlackTree.TryGet``2(Towel.DataStructures.IRedBlackTree{``0},``1,Towel.Compare{``0,``1},``0@)">
            <summary>Wrapper for the "Add" method to help with exceptions.</summary>
            <typeparam name="T">The generic type of the structure.</typeparam>
            <typeparam name="Key">The type of the key.</typeparam>
            <param name="redBlackTree">The structure.</param>
            <param name="get">The key of the item to get.</param>
            <param name="comparison">Comparison technique (must match the sorting technique of the structure).</param>
            <param name="item">The item if it was found.</param>
            <returns>True if successful, False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.RedBlackTree.TryRemove``2(Towel.DataStructures.IRedBlackTree{``0},``1,Towel.Compare{``0,``1})">
            <summary>Wrapper for the "Remove" method to help with exceptions.</summary>
            <typeparam name="T">The generic type of the structure.</typeparam>
            <typeparam name="Key">The type of the key.</typeparam>
            <param name="redBlackTree">The structure.</param>
            <param name="removal">The key of the item to remove.</param>
            <param name="comparison">Comparison technique (must match the sorting technique of the structure).</param>
            <returns>True if successful, False if not.</returns>
        </member>
        <member name="T:Towel.DataStructures.RedBlackTreeLinked`1">
            <summary>A self sorting binary tree using the red-black tree algorithms.</summary>
            <typeparam name="T">The generic type of the structure.</typeparam>
            <citation>
            This Red-Black Tree imlpementation was originally developed by 
            Roy Clem and hosted as an open source project on 
            CodeProject.com. However, it has been modified since its
            addition into the Towel framework.
            http://www.codeproject.com/Articles/8287/Red-Black-Trees-in-C
            </citation>
        </member>
        <member name="P:Towel.DataStructures.RedBlackTreeLinked`1.CurrentLeast">
            <summary>Gets the current least item in the avl tree.</summary>
        </member>
        <member name="P:Towel.DataStructures.RedBlackTreeLinked`1.CurrentGreatest">
            <summary>Gets the current greated item in the avl tree.</summary>
        </member>
        <member name="P:Towel.DataStructures.RedBlackTreeLinked`1.Count">
            <summary>The number of items in this data structure.</summary>
        </member>
        <member name="P:Towel.DataStructures.RedBlackTreeLinked`1.Compare">
            <summary>The sorting technique.</summary>
        </member>
        <member name="M:Towel.DataStructures.RedBlackTreeLinked`1.Clone">
            <summary>Creates a shallow clone of this data structure.</summary>
            <returns>A shallow clone of this data structure.</returns>
        </member>
        <member name="M:Towel.DataStructures.RedBlackTreeLinked`1.Stepper(Towel.Step{`0})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="step">The delegate to invoke on each item in the structure.</param>
            <remarks>Runtime: O(n * step).</remarks>
        </member>
        <member name="M:Towel.DataStructures.RedBlackTreeLinked`1.Stepper(Towel.StepRef{`0})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="step">The delegate to invoke on each item in the structure.</param>
            <remarks>Runtime: O(n * step).</remarks>
        </member>
        <member name="M:Towel.DataStructures.RedBlackTreeLinked`1.Stepper(Towel.StepBreak{`0})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="step">The delegate to invoke on each item in the structure.</param>
            <returns>The resulting status of the iteration.</returns>
            <remarks>Runtime: O(n * step).</remarks>
        </member>
        <member name="M:Towel.DataStructures.RedBlackTreeLinked`1.Stepper(Towel.StepRefBreak{`0})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="step">The delegate to invoke on each item in the structure.</param>
            <returns>The resulting status of the iteration.</returns>
            <remarks>Runtime: O(n * step).</remarks>
        </member>
        <member name="M:Towel.DataStructures.RedBlackTreeLinked`1.Stepper(Towel.Step{`0},`0,`0)">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="step">The delegate to invoke on each item in the structure.</param>
            <param name="minimum">The minimum value of the optimized stepper function.</param>
            <param name="maximum">The maximum value of the optimized stepper function.</param>
            <remarks>Runtime: O(n * step).</remarks>
        </member>
        <member name="M:Towel.DataStructures.RedBlackTreeLinked`1.Stepper(Towel.StepRef{`0},`0,`0)">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="step">The delegate to invoke on each item in the structure.</param>
            <param name="minimum">The minimum value of the optimized stepper function.</param>
            <param name="maximum">The maximum value of the optimized stepper function.</param>
            <remarks>Runtime: O(n * step).</remarks>
        </member>
        <member name="M:Towel.DataStructures.RedBlackTreeLinked`1.Stepper(Towel.StepBreak{`0},`0,`0)">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="step_function">The delegate to invoke on each item in the structure.</param>
            <param name="minimum">The minimum value of the optimized stepper function.</param>
            <param name="maximum">The maximum value of the optimized stepper function.</param>
            <remarks>Runtime: O(n * step).</remarks>
        </member>
        <member name="M:Towel.DataStructures.RedBlackTreeLinked`1.Stepper(Towel.StepRefBreak{`0},`0,`0)">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="step">The delegate to invoke on each item in the structure.</param>
            <param name="minimum">The minimum value of the optimized stepper function.</param>
            <param name="maximum">The maximum value of the optimized stepper function.</param>
            <remarks>Runtime: O(n * step).</remarks>
        </member>
        <member name="M:Towel.DataStructures.RedBlackTreeLinked`1.StepperReverse(Towel.Step{`0})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="step">The delegate to invoke on each item in the structure.</param>
            <remarks>Runtime: O(n * traversalFunction).</remarks>
        </member>
        <member name="M:Towel.DataStructures.RedBlackTreeLinked`1.StepperReverse(Towel.StepRef{`0})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="step">The delegate to invoke on each item in the structure.</param>
            <remarks>Runtime: O(n * traversalFunction).</remarks>
        </member>
        <member name="M:Towel.DataStructures.RedBlackTreeLinked`1.StepperReverse(Towel.StepBreak{`0})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="step">The delegate to invoke on each item in the structure.</param>
            <returns>The resulting status of the iteration.</returns>
            <remarks>Runtime: O(n * traversalFunction).</remarks>
        </member>
        <member name="M:Towel.DataStructures.RedBlackTreeLinked`1.StepperReverse(Towel.StepRefBreak{`0})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="step">The delegate to invoke on each item in the structure.</param>
            <returns>The resulting status of the iteration.</returns>
            <remarks>Runtime: O(n * traversalFunction).</remarks>
        </member>
        <member name="M:Towel.DataStructures.RedBlackTreeLinked`1.StepperReverse(Towel.Step{`0},`0,`0)">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="step">The delegate to invoke on each item in the structure.</param>
            <param name="minimum">The minimum value of the optimized stepper function.</param>
            <param name="maximum">The maximum value of the optimized stepper function.</param>
            <remarks>Runtime: O(n * traversalFunction).</remarks>
        </member>
        <member name="M:Towel.DataStructures.RedBlackTreeLinked`1.StepperReverse(Towel.StepRef{`0},`0,`0)">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="step">The delegate to invoke on each item in the structure.</param>
            <param name="minimum">The minimum value of the optimized stepper function.</param>
            <param name="maximum">The maximum value of the optimized stepper function.</param>
            <remarks>Runtime: O(n * traversalFunction).</remarks>
        </member>
        <member name="M:Towel.DataStructures.RedBlackTreeLinked`1.StepperReverse(Towel.StepBreak{`0},`0,`0)">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="step_function">The delegate to invoke on each item in the structure.</param>
            <param name="minimum">The minimum value of the optimized stepper function.</param>
            <param name="maximum">The maximum value of the optimized stepper function.</param>
            <remarks>Runtime: O(n * traversalFunction).</remarks>
        </member>
        <member name="M:Towel.DataStructures.RedBlackTreeLinked`1.StepperReverse(Towel.StepRefBreak{`0},`0,`0)">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="step">The delegate to invoke on each item in the structure.</param>
            <param name="minimum">The minimum value of the optimized stepper function.</param>
            <param name="maximum">The maximum value of the optimized stepper function.</param>
            <remarks>Runtime: O(n * step_function).</remarks>
        </member>
        <member name="M:Towel.DataStructures.RedBlackTreeLinked`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns the IEnumerator for this data structure.</summary>
            <returns>The IEnumerator for this data structure.</returns>
        </member>
        <member name="M:Towel.DataStructures.RedBlackTreeLinked`1.GetEnumerator">
            <summary>Returns the IEnumerator for this data structure.</summary>
            <returns>The IEnumerator for this data structure.</returns>
            <citation>
            This method was provided by user CyrusNajmabadi from GitHub.
            </citation>
        </member>
        <member name="T:Towel.DataStructures.ISet`1">
            <summary>An unsorted structure of unique items.</summary>
            <typeparam name="T">The generic type of the structure.</typeparam>
        </member>
        <member name="T:Towel.DataStructures.SetHashLinked`1">
            <summary>An unsorted structure of unique items.</summary>
            <typeparam name="T">The generic type of the structure.</typeparam>
        </member>
        <member name="M:Towel.DataStructures.SetHashLinked`1.#ctor">
            <summary>Constructs a new hash table instance.</summary>
            <remarks>Runtime: O(1).</remarks>
        </member>
        <member name="M:Towel.DataStructures.SetHashLinked`1.#ctor(System.Int32)">
            <summary>Constructs a new hash table instance.</summary>
            <remarks>Runtime: O(1).</remarks>
        </member>
        <member name="M:Towel.DataStructures.SetHashLinked`1.#ctor(Towel.Equate{`0},Towel.Hash{`0})">
            <summary>Constructs a new hash table instance.</summary>
            <remarks>Runtime: O(1).</remarks>
        </member>
        <member name="M:Towel.DataStructures.SetHashLinked`1.#ctor(Towel.Equate{`0},Towel.Hash{`0},System.Int32)">
            <summary>Constructs a new hash table instance.</summary>
            <remarks>Runtime: O(stepper).</remarks>
        </member>
        <member name="P:Towel.DataStructures.SetHashLinked`1.TableSize">
            <summary>Returns the current size of the actual table. You will want this if you 
            wish to multithread structure traversals.</summary>
            <remarks>Runtime: O(1).</remarks>
        </member>
        <member name="P:Towel.DataStructures.SetHashLinked`1.Count">
            <summary>Returns the current number of items in the structure.</summary>
            <remarks>Runetime: O(1).</remarks>
        </member>
        <member name="P:Towel.DataStructures.SetHashLinked`1.Hash">
            <summary>The function for calculating hash codes for this table.</summary>
        </member>
        <member name="P:Towel.DataStructures.SetHashLinked`1.Equate">
            <summary>The function for equating keys in this table.</summary>
        </member>
        <member name="M:Towel.DataStructures.SetHashLinked`1.Clone">
            <summary>Creates a shallow clone of this data structure.</summary>
            <returns>A shallow clone of this data structure.</returns>
        </member>
        <member name="M:Towel.DataStructures.SetHashLinked`1.Contains(`0)">
            <summary>Determines if this structure contains a given item.</summary>
            <param name="item">The item to see if theis structure contains.</param>
            <returns>True if the item is in the structure; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.SetHashLinked`1.Remove(`0)">
            <summary>Removes a value from the hash table.</summary>
            <param name="key">The key of the value to remove.</param>
            <remarks>Runtime: N/A. (I'm still editing this structure)</remarks>
        </member>
        <member name="M:Towel.DataStructures.SetHashLinked`1.RemoveWithoutTrim(`0)">
            <summary>Removes a value from the hash table.</summary>
            <param name="key">The key of the value to remove.</param>
            <remarks>Runtime: N/A. (I'm still editing this structure)</remarks>
        </member>
        <member name="M:Towel.DataStructures.SetHashLinked`1.Add(`0)">
            <summary>Adds a value to the hash table.</summary>
            <param name="key">The key value to use as the look-up reference in the hash table.</param>
            <remarks>Runtime: O(n), Omega(1).</remarks>
        </member>
        <member name="M:Towel.DataStructures.SetHashLinked`1.Stepper(Towel.Step{`0})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="function">The delegate to invoke on each item in the structure.</param>
        </member>
        <member name="M:Towel.DataStructures.SetHashLinked`1.Stepper(Towel.StepBreak{`0})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="function">The delegate to invoke on each item in the structure.</param>
            <returns>The resulting status of the iteration.</returns>
        </member>
        <member name="M:Towel.DataStructures.SetHashLinked`1.Remove_private(`0)">
            <summary>Removes a value from the hash table.</summary>
            <param name="key">The key of the value to remove.</param>
            <remarks>Runtime: N/A. (I'm still editing this structure)</remarks>
        </member>
        <member name="T:Towel.DataStructures.SetHashArray`1">
            <summary>An unsorted structure of unique items.</summary>
            <typeparam name="T">The generic type of the structure.</typeparam>
        </member>
        <member name="M:Towel.DataStructures.SetHashArray`1.#ctor(Towel.Equate{`0},Towel.Hash{`0})">
            <summary>Constructs a new hash table instance.</summary>
            <remarks>Runtime: O(1).</remarks>
        </member>
        <member name="P:Towel.DataStructures.SetHashArray`1.TableSize">
            <summary>Returns the current size of the actual table. You will want this if you 
            wish to multithread structure traversals.</summary>
            <remarks>Runtime: O(1).</remarks>
        </member>
        <member name="P:Towel.DataStructures.SetHashArray`1.Count">
            <summary>Returns the current number of items in the structure.</summary>
            <remarks>Runetime: O(1).</remarks>
        </member>
        <member name="P:Towel.DataStructures.SetHashArray`1.Hash">
            <summary>The function for calculating hash codes for this table.</summary>
        </member>
        <member name="P:Towel.DataStructures.SetHashArray`1.Equate">
            <summary>The function for equating keys in this table.</summary>
        </member>
        <member name="M:Towel.DataStructures.SetHashArray`1.Stepper(Towel.Step{`0})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="function">The delegate to invoke on each item in the structure.</param>
        </member>
        <member name="M:Towel.DataStructures.SetHashArray`1.Stepper(Towel.StepBreak{`0})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="function">The delegate to invoke on each item in the structure.</param>
            <returns>The resulting status of the iteration.</returns>
        </member>
        <member name="T:Towel.DataStructures.Set`2">
            <summary>An unsorted structure of unique items.</summary>
            <typeparam name="T">The generic type of the structure.</typeparam>
        </member>
        <member name="M:Towel.DataStructures.Set`2.#ctor">
            <summary>Constructs a new hash table instance.</summary>
            <remarks>Runtime: O(1).</remarks>
        </member>
        <member name="M:Towel.DataStructures.Set`2.#ctor(System.Int32)">
            <summary>Constructs a new hash table instance.</summary>
            <remarks>Runtime: O(1).</remarks>
        </member>
        <member name="M:Towel.DataStructures.Set`2.#ctor(Towel.Equate{`1},Towel.Hash{`1})">
            <summary>Constructs a new hash table instance.</summary>
            <remarks>Runtime: O(1).</remarks>
        </member>
        <member name="M:Towel.DataStructures.Set`2.#ctor(Towel.Equate{`1},Towel.Hash{`1},System.Int32)">
            <summary>Constructs a new hash table instance.</summary>
            <remarks>Runtime: O(stepper).</remarks>
        </member>
        <member name="P:Towel.DataStructures.Set`2.TableSize">
            <summary>Returns the current size of the actual table. You will want this if you 
            wish to multithread structure traversals.</summary>
            <remarks>Runtime: O(1).</remarks>
        </member>
        <member name="P:Towel.DataStructures.Set`2.Count">
            <summary>Returns the current number of items in the structure.</summary>
            <remarks>Runetime: O(1).</remarks>
        </member>
        <member name="P:Towel.DataStructures.Set`2.Hash">
            <summary>The function for calculating hash codes for this table.</summary>
        </member>
        <member name="P:Towel.DataStructures.Set`2.Equate">
            <summary>The function for equating keys in this table.</summary>
        </member>
        <member name="M:Towel.DataStructures.Set`2.Clone">
            <summary>Creates a shallow clone of this data structure.</summary>
            <returns>A shallow clone of this data structure.</returns>
        </member>
        <member name="M:Towel.DataStructures.Set`2.Contains(`1)">
            <summary>Determines if this structure contains a given item.</summary>
            <param name="item">The item to see if theis structure contains.</param>
            <returns>True if the item is in the structure; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.Set`2.Remove(`1)">
            <summary>Removes a value from the hash table.</summary>
            <param name="key">The key of the value to remove.</param>
            <remarks>Runtime: N/A. (I'm still editing this structure)</remarks>
        </member>
        <member name="M:Towel.DataStructures.Set`2.RemoveWithoutTrim(`1)">
            <summary>Removes a value from the hash table.</summary>
            <param name="key">The key of the value to remove.</param>
            <remarks>Runtime: N/A. (I'm still editing this structure)</remarks>
        </member>
        <member name="M:Towel.DataStructures.Set`2.Add(`1)">
            <summary>Adds a value to the hash table.</summary>
            <param name="key">The key value to use as the look-up reference in the hash table.</param>
            <remarks>Runtime: O(n), Omega(1).</remarks>
        </member>
        <member name="M:Towel.DataStructures.Set`2.Stepper(Towel.Step{`1})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="function">The delegate to invoke on each item in the structure.</param>
        </member>
        <member name="M:Towel.DataStructures.Set`2.Stepper(Towel.StepBreak{`1})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="function">The delegate to invoke on each item in the structure.</param>
            <returns>The resulting status of the iteration.</returns>
        </member>
        <member name="M:Towel.DataStructures.Set`2.Remove_private(`1)">
            <summary>Removes a value from the hash table.</summary>
            <param name="key">The key of the value to remove.</param>
            <remarks>Runtime: N/A. (I'm still editing this structure)</remarks>
        </member>
        <member name="T:Towel.DataStructures.SkipListLinked`1">
            <summary>Represents a collection of key-and-value pairs.</summary>
            <citation>
            This SkipList imlpementation was originally developed by 
            Leslie Sanford and hosted as an open source project on 
            CodeProject.com. However, it has been modified since its
            addition into the Towel framework.
            http://www.codeproject.com/Articles/4897/A-Skip-List-in-C
            Original Author:
             Created by: Leslie Sanford (08/27/2003)
             Contact: jabberdabber@hotmail.com
            </citation>
        </member>
        <member name="M:Towel.DataStructures.SkipListLinked`1.Node.#ctor(System.Int32)">
            <summary>Initializes an instant of a Node with its node level.</summary>
            <param name="level">The node level.</param>
        </member>
        <member name="M:Towel.DataStructures.SkipListLinked`1.Node.#ctor(System.Int32,System.Object,System.Object)">
            <summary>Initializes an instant of a Node with its node level and key/value pair.</summary>
            <param name="level">The node level.</param>
            <param name="key">The key for the node.</param>
            <param name="val">The value for the node.</param>
        </member>
        <member name="M:Towel.DataStructures.SkipListLinked`1.Node.Dispose">
            <summary>Disposes the Node.</summary>
        </member>
        <member name="M:Towel.DataStructures.SkipListLinked`1.#ctor(System.Collections.IComparer)">
            <summary>
            Initializes a new instance of the SkipList class that is empty and 
            is sorted according to the specified IComparer interface.
            </summary>
            <param name="comparer">
            The IComparer implementation to use when comparing keys. 
            </param>
            <remarks>
            The elements are sorted according to the specified IComparer 
            implementation. If comparer is a null reference, the IComparable 
            implementation of each key is used; therefore, each key must 
            implement the IComparable interface to be capable of comparisons 
            with every other key in the SkipList.
            </remarks>
        </member>
        <member name="T:Towel.DataStructures.SkipListLinked`1.SkipListEnumerator">
            <summary>Enumerates the elements of a skip list.</summary>
        </member>
        <member name="M:Towel.DataStructures.SkipListLinked`1.SkipListEnumerator.#ctor(Towel.DataStructures.SkipListLinked{`0})">
            <summary>Initializes an instance of a SkipListEnumerator.</summary>
            <param name="list"></param>
        </member>
        <member name="P:Towel.DataStructures.SkipListLinked`1.SkipListEnumerator.Entry">
            <summary>Gets both the key and the value of the current dictionary entry.</summary>
        </member>
        <member name="P:Towel.DataStructures.SkipListLinked`1.SkipListEnumerator.Key">
            <summary>Gets the key of the current dictionary entry.</summary>
        </member>
        <member name="P:Towel.DataStructures.SkipListLinked`1.SkipListEnumerator.Value">
            <summary>Gets the value of the current dictionary entry.</summary>
        </member>
        <member name="M:Towel.DataStructures.SkipListLinked`1.SkipListEnumerator.MoveNext">
            <summary>Advances the enumerator to the next element of the skip list.</summary>
            <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the skip list.</returns>
        </member>
        <member name="M:Towel.DataStructures.SkipListLinked`1.SkipListEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before 
            the first element in the skip list.
            </summary>
        </member>
        <member name="P:Towel.DataStructures.SkipListLinked`1.SkipListEnumerator.Current">
            <summary>Gets the current element in the skip list.</summary>
        </member>
        <member name="P:Towel.DataStructures.SkipListLinked`1.Item(System.Object)">
            <summary>Gets or sets the element with the specified key. This is the indexer for the SkipList.</summary>
        </member>
        <member name="P:Towel.DataStructures.SkipListLinked`1.Count">
            <summary>Gets the number of elements contained in the SkipList.</summary>
        </member>
        <member name="M:Towel.DataStructures.SkipListLinked`1.Add(System.Object,System.Object)">
            <summary>Adds an element with the provided key and value to the SkipList.</summary>
            <param name="key">The Object to use as the key of the element to add.</param>
            <param name="value">The Object to use as the value of the element to add.</param>
        </member>
        <member name="M:Towel.DataStructures.SkipListLinked`1.Clear">
            <summary>Removes all elements from the SkipList.</summary>
        </member>
        <member name="M:Towel.DataStructures.SkipListLinked`1.Contains(System.Object)">
            <summary>Determines whether the SkipList contains an element with the specified key.</summary>
            <param name="key">The key to locate in the SkipList.</param>
            <returns>true if the SkipList contains an element with the key; otherwise, false.</returns>
        </member>
        <member name="M:Towel.DataStructures.SkipListLinked`1.GetEnumerator">
            <summary>Returns an IDictionaryEnumerator for the SkipList.</summary>
            <returns>An IDictionaryEnumerator for the SkipList.</returns>
        </member>
        <member name="M:Towel.DataStructures.SkipListLinked`1.Remove(System.Object)">
            <summary>Removes the element with the specified key from the SkipList.</summary>
            <param name="key">The key of the element to remove.</param>
        </member>
        <member name="M:Towel.DataStructures.SkipListLinked`1.Stepper(Towel.Step{`0})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="function">The delegate to invoke on each item in the structure.</param>
        </member>
        <member name="M:Towel.DataStructures.SkipListLinked`1.Stepper(Towel.StepRef{`0})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="function">The delegate to invoke on each item in the structure.</param>
        </member>
        <member name="M:Towel.DataStructures.SkipListLinked`1.Stepper(Towel.StepBreak{`0})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="function">The delegate to invoke on each item in the structure.</param>
            <returns>The resulting status of the iteration.</returns>
        </member>
        <member name="M:Towel.DataStructures.SkipListLinked`1.Stepper(Towel.StepRefBreak{`0})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="function">The delegate to invoke on each item in the structure.</param>
            <returns>The resulting status of the iteration.</returns>
        </member>
        <member name="M:Towel.DataStructures.SkipListLinked`1.Clone">
            <summary>Creates a shallow clone of this data structure.</summary>
            <returns>A shallow clone of this data structure.</returns>
        </member>
        <member name="M:Towel.DataStructures.SkipListLinked`1.ToArray">
            <summary>Converts the structure into an array.</summary>
            <returns>An array containing all the item in the structure.</returns>
        </member>
        <member name="M:Towel.DataStructures.SkipListLinked`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that can iterate through the SkipList.</summary>
            <returns>An IEnumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Towel.DataStructures.SkipListLinked`1.Initialize">
            <summary>
            Initializes the SkipList.
            </summary>
        </member>
        <member name="M:Towel.DataStructures.SkipListLinked`1.GetNewLevel">
            <summary>
            Returns a level value for a new SkipList node.
            </summary>
            <returns>
            The level value for a new SkipList node.
            </returns>
        </member>
        <member name="M:Towel.DataStructures.SkipListLinked`1.Search(System.Object)">
            <summary>
            Searches for the specified key.
            </summary>
            <param name="key">
            The key to search for.
            </param>
            <returns>
            Returns true if the specified key is in the SkipList.
            </returns>
        </member>
        <member name="M:Towel.DataStructures.SkipListLinked`1.Search(System.Object,Towel.DataStructures.SkipListLinked{`0}.Node@)">
            <summary>
            Searches for the specified key.
            </summary>
            <param name="key">
            The key to search for.
            </param>
            <param name="curr">
            A SkipList node to hold the results of the search.
            </param>
            <returns>
            Returns true if the specified key is in the SkipList.
            </returns>
        </member>
        <member name="M:Towel.DataStructures.SkipListLinked`1.Search(System.Object,Towel.DataStructures.SkipListLinked{`0}.Node[])">
            <summary>	
            Searches for the specified key.
            </summary>
            <param name="key">
            The key to search for.
            </param>
            <param name="update">
            An array of nodes holding references to the places in the SkipList
            search in which the search dropped down one level.
            </param>
            <returns>
            Returns true if the specified key is in the SkipList.
            </returns>
        </member>
        <member name="M:Towel.DataStructures.SkipListLinked`1.Search(System.Object,Towel.DataStructures.SkipListLinked{`0}.Node@,Towel.DataStructures.SkipListLinked{`0}.Node[])">
            <summary>
            Searches for the specified key.
            </summary>
            <param name="key">
            The key to search for.
            </param>
            <param name="curr">
            A SkipList node to hold the results of the search.
            </param>
            <param name="update">
            An array of nodes holding references to the places in the SkipList
            search in which the search dropped down one level.
            </param>
            <returns>
            Returns true if the specified key is in the SkipList.
            </returns>
        </member>
        <member name="M:Towel.DataStructures.SkipListLinked`1.SearchWithComparer(System.Object,Towel.DataStructures.SkipListLinked{`0}.Node@,Towel.DataStructures.SkipListLinked{`0}.Node[])">
            <summary>
            Search for the specified key using a comparer.
            </summary>
            <param name="key">
            The key to search for.
            </param>
            <param name="curr">
            A SkipList node to hold the results of the search.
            </param>
            <param name="update">
            An array of nodes holding references to the places in the SkipList
            search in which the search dropped down one level.
            </param>
            <returns>
            Returns true if the specified key is in the SkipList.
            </returns>
        </member>
        <member name="M:Towel.DataStructures.SkipListLinked`1.SearchWithComparable(System.Object,Towel.DataStructures.SkipListLinked{`0}.Node@,Towel.DataStructures.SkipListLinked{`0}.Node[])">
            <summary>
            Search for the specified key using the IComparable interface 
            implemented by each key.
            </summary>
            <param name="key">
            The key to search for.
            </param>
            <param name="curr">
            A SkipList node to hold the results of the search.
            </param>
            <param name="update">
            An array of nodes holding references to the places in the SkipList
            search in which the search dropped down one level.
            </param>
            <returns>
            Returns true if the specified key is in the SkipList.
            </returns>
            <remarks>
            Assumes each key inserted into the SkipList implements the 
            IComparable interface.
            
            If the specified key is in the SkipList, the curr parameter will
            reference the node with the key. If the specified key is not in the
            SkipList, the curr paramater will either hold the node with the 
            first key value greater than the specified key or null indicating 
            that the search reached the end of the SkipList.
            </remarks>
        </member>
        <member name="M:Towel.DataStructures.SkipListLinked`1.Insert(System.Object,System.Object,Towel.DataStructures.SkipListLinked{`0}.Node[])">
            <summary>Inserts a key/value pair into the SkipList.</summary>
            <param name="key">The key to insert into the SkipList.</param>
            <param name="val">The value to insert into the SkipList.</param>
            <param name="update">
            An array of nodes holding references to places in the SkipList in 
            which the search for the place to insert the new key/value pair 
            dropped down one level.
            </param>
        </member>
        <member name="P:Towel.DataStructures.SkipListLinked`1.Keys">
            <summary>Gets an ICollection containing the keys of the SkipList.</summary>
        </member>
        <member name="P:Towel.DataStructures.SkipListLinked`1.Values">
            <summary>Gets an ICollection containing the values of the SkipList.</summary>
        </member>
        <member name="T:Towel.DataStructures.IStack`1">
            <summary>Implements a First-In-Last-Out stack data structure.</summary>
            <typeparam name="T">The generic type within the structure.</typeparam>
        </member>
        <member name="M:Towel.DataStructures.IStack`1.Push(`0)">
            <summary>Adds an item to the top of the stack.</summary>
            <param name="push">The item to add to the stack.</param>
        </member>
        <member name="M:Towel.DataStructures.IStack`1.Peek">
            <summary>Returns the most recent addition to the stack.</summary>
            <returns>The most recent addition to the stack.</returns>
        </member>
        <member name="M:Towel.DataStructures.IStack`1.Pop">
            <summary>Removes and returns the most recent addition to the stack.</summary>
            <returns>The most recent addition to the stack.</returns>
        </member>
        <member name="T:Towel.DataStructures.StackLinked`1">
            <summary>Implements a First-In-Last-Out stack data structure using a linked list.</summary>
            <typeparam name="T">The generic type within the structure.</typeparam>
        </member>
        <member name="M:Towel.DataStructures.StackLinked`1.#ctor">
            <summary>Creates an instance of a stack.</summary>
            <runtime>θ(1)</runtime>
        </member>
        <member name="P:Towel.DataStructures.StackLinked`1.Count">
            <summary>Returns the number of items in the stack.</summary>
            <runtime>θ(1)</runtime>
        </member>
        <member name="M:Towel.DataStructures.StackLinked`1.Clone">
            <summary>Creates a shallow clone of this data structure.</summary>
            <returns>A shallow clone of this data structure.</returns>
        </member>
        <member name="M:Towel.DataStructures.StackLinked`1.ToArray">
            <summary>Converts the structure into an array.</summary>
            <returns>An array containing all the item in the structure.</returns>
            <remarks>Runtime: Towel(n).</remarks>
        </member>
        <member name="M:Towel.DataStructures.StackLinked`1.Push(`0)">
            <summary>Adds an item to the top of the stack.</summary>
            <param name="addition">The item to add to the stack.</param>
            <runtime>O(1)</runtime>
        </member>
        <member name="M:Towel.DataStructures.StackLinked`1.Peek">
            <summary>Returns the most recent addition to the stack.</summary>
            <returns>The most recent addition to the stack.</returns>
            <remarks>Runtime: O(1).</remarks>
        </member>
        <member name="M:Towel.DataStructures.StackLinked`1.Pop">
            <summary>Removes and returns the most recent addition to the stack.</summary>
            <returns>The most recent addition to the stack.</returns>
            <remarks>Runtime: O(1).</remarks>
        </member>
        <member name="M:Towel.DataStructures.StackLinked`1.Clear">
            <summary>Clears the stack to an empty state.</summary>
            <remarks>Runtime: O(1). Note: causes considerable garbage collection.</remarks>
        </member>
        <member name="M:Towel.DataStructures.StackLinked`1.Stepper(Towel.Step{`0})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="step">The delegate to invoke on each item in the structure.</param>
        </member>
        <member name="M:Towel.DataStructures.StackLinked`1.Stepper(Towel.StepRef{`0})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="step">The delegate to invoke on each item in the structure.</param>
        </member>
        <member name="M:Towel.DataStructures.StackLinked`1.Stepper(Towel.StepBreak{`0})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="step">The delegate to invoke on each item in the structure.</param>
            <returns>The resulting status of the iteration.</returns>
        </member>
        <member name="M:Towel.DataStructures.StackLinked`1.Stepper(Towel.StepRefBreak{`0})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="function">The delegate to invoke on each item in the structure.</param>
            <returns>The resulting status of the iteration.</returns>
        </member>
        <member name="T:Towel.DataStructures.StackArray`1">
            <summary>Implements a First-In-Last-Out stack data structure using an array.</summary>
            <typeparam name="T">The generic type within the structure.</typeparam>
        </member>
        <member name="M:Towel.DataStructures.StackArray`1.#ctor">
            <summary>Creates an instance of a ListArray, and sets it's minimum capacity.</summary>
            <remarks>Runtime: O(1).</remarks>
        </member>
        <member name="M:Towel.DataStructures.StackArray`1.#ctor(System.Int32)">
            <summary>Creates an instance of a ListArray, and sets it's minimum capacity.</summary>
            <param name="minimumCapacity">The initial and smallest array size allowed by this list.</param>
            <remarks>Runtime: O(1).</remarks>
        </member>
        <member name="P:Towel.DataStructures.StackArray`1.CurrentCapacity">
            <summary>Gets the current capacity of the list.</summary>
            <remarks>Runtime: O(1).</remarks>
        </member>
        <member name="P:Towel.DataStructures.StackArray`1.MinimumCapacity">
            <summary>Allows you to adjust the minimum capacity of this list.</summary>
            <remarks>Runtime: O(n), Omega(1).</remarks>
        </member>
        <member name="P:Towel.DataStructures.StackArray`1.Count">
            <summary>Gets the number of items in the list.</summary>
            <remarks>Runtime: O(1).</remarks>
        </member>
        <member name="M:Towel.DataStructures.StackArray`1.Clone">
            <summary>Creates a shallow clone of this data structure.</summary>
            <returns>A shallow clone of this data structure.</returns>
        </member>
        <member name="M:Towel.DataStructures.StackArray`1.ToArray">
            <summary>Converts the list array into a standard array.</summary>
            <returns>A standard array of all the elements.</returns>
        </member>
        <member name="M:Towel.DataStructures.StackArray`1.Push(`0)">
            <summary>Adds an item to the end of the list.</summary>
            <param name="addition">The item to be added.</param>
            <remarks>Runtime: O(n), EstAvg(1). </remarks>
        </member>
        <member name="M:Towel.DataStructures.StackArray`1.Pop">
            <summary>Removes the item at a specific index.</summary>
            <remarks>Runtime: Towel(n - index).</remarks>
        </member>
        <member name="M:Towel.DataStructures.StackArray`1.Peek">
            <summary>Returns the most recent addition to the stack.</summary>
            <returns>The most recent addition to the stack.</returns>
            <remarks>Runtime: O(1).</remarks>
        </member>
        <member name="M:Towel.DataStructures.StackArray`1.Clear">
            <summary>Empties the list back and reduces it back to its original capacity.</summary>
            <remarks>Runtime: O(1).</remarks>
        </member>
        <member name="M:Towel.DataStructures.StackArray`1.Stepper(Towel.Step{`0})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="step">The delegate to invoke on each item in the structure.</param>
        </member>
        <member name="M:Towel.DataStructures.StackArray`1.Stepper(Towel.StepRef{`0})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="step">The delegate to invoke on each item in the structure.</param>
        </member>
        <member name="M:Towel.DataStructures.StackArray`1.Stepper(Towel.StepBreak{`0})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="step">The delegate to invoke on each item in the structure.</param>
            <returns>The resulting status of the iteration.</returns>
        </member>
        <member name="M:Towel.DataStructures.StackArray`1.Stepper(Towel.StepRefBreak{`0})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="step">The delegate to invoke on each item in the structure.</param>
            <returns>The resulting status of the iteration.</returns>
        </member>
        <member name="T:Towel.DataStructures.ITree`1">
            <summary>A generic tree data structure.</summary>
            <typeparam name="T">The generic type stored in this data structure.</typeparam>
        </member>
        <member name="P:Towel.DataStructures.ITree`1.Head">
            <summary>The head of the tree.</summary>
        </member>
        <member name="M:Towel.DataStructures.ITree`1.IsChildOf(`0,`0)">
            <summary>Determines if a node is the child of another node.</summary>
            <param name="node">The child to check the parent of.</param>
            <param name="parent">The parent to check the child of.</param>
            <returns>True if the node is a child of the parent; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.ITree`1.Children(`0,Towel.Step{`0})">
            <summary>Stepper function for the children of a given node.</summary>
            <param name="parent">The node to step through the children of.</param>
            <param name="step_function">The step function.</param>
        </member>
        <member name="M:Towel.DataStructures.ITree`1.Add(`0,`0)">
            <summary>Adds a node to the tree.</summary>
            <param name="addition">The node to be added.</param>
            <param name="parent">The parent of the node to be added.</param>
        </member>
        <member name="T:Towel.DataStructures.TreeMap`1">
            <summary>A generic tree data structure using a dictionary to store node data.</summary>
            <typeparam name="T">The generic type stored in this data structure.</typeparam>
        </member>
        <member name="P:Towel.DataStructures.TreeMap`1.Head">
            <summary>The head of the tree.</summary>
        </member>
        <member name="P:Towel.DataStructures.TreeMap`1.Hash">
            <summary>The hash function being used (was passed into the constructor).</summary>
        </member>
        <member name="P:Towel.DataStructures.TreeMap`1.Equate">
            <summary>The equate function being used (was passed into the constructor).</summary>
        </member>
        <member name="P:Towel.DataStructures.TreeMap`1.Count">
            <summary>The number of nodes in this tree.</summary>
        </member>
        <member name="M:Towel.DataStructures.TreeMap`1.IsChildOf(`0,`0)">
            <summary>Determines if a node is the child of another node.</summary>
            <param name="node">The child to check the parent of.</param>
            <param name="parent">The parent to check the child of.</param>
            <returns>True if the node is a child of the parent; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.TreeMap`1.Parent(`0)">
            <summary>Gets the parent of a given node.</summary>
            <param name="child">The child to get the parent of.</param>
            <returns>The parent of the given child.</returns>
        </member>
        <member name="M:Towel.DataStructures.TreeMap`1.Children(`0,Towel.Step{`0})">
            <summary>Stepper function for the children of a given node.</summary>
            <param name="parent">The node to step through the children of.</param>
            <param name="step_function">The step function.</param>
        </member>
        <member name="M:Towel.DataStructures.TreeMap`1.Add(`0,`0)">
            <summary>Adds a node to the tree.</summary>
            <param name="addition">The node to be added.</param>
            <param name="parent">The parent of the node to be added.</param>
        </member>
        <member name="M:Towel.DataStructures.TreeMap`1.Remove(`0)">
            <summary>Removes a node from the tree and all the child nodes.</summary>
            <param name="removal">The node to be removed.</param>
        </member>
        <member name="M:Towel.DataStructures.TreeMap`1.Stepper(Towel.Step{`0})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="step_function">The delegate to invoke on each item in the structure.</param>
        </member>
        <member name="M:Towel.DataStructures.TreeMap`1.Stepper(Towel.StepBreak{`0})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="step_function">The delegate to invoke on each item in the structure.</param>
            <returns>The resulting status of the iteration.</returns>
        </member>
        <member name="M:Towel.DataStructures.TreeMap`1.Clone">
            <summary>Creates a shallow clone of this data structure.</summary>
            <returns>A shallow clone of this data structure.</returns>
        </member>
        <member name="M:Towel.DataStructures.Trie_Linked`1.Clone">
            <summary>Creates a shallow clone of this data structure.</summary>
            <returns>A shallow clone of this data structure.</returns>
        </member>
        <member name="M:Towel.DataStructures.Trie_Linked`1.ToArray">
            <summary>Converts the structure into an array.</summary>
            <returns>An array containing all the item in the structure.</returns>
        </member>
        <member name="M:Towel.DataStructures.Trie_Linked`1.Stepper(Towel.Step{`0})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="function">The delegate to invoke on each item in the structure.</param>
        </member>
        <member name="M:Towel.DataStructures.Trie_Linked`1.Stepper(Towel.StepRef{`0})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="function">The delegate to invoke on each item in the structure.</param>
        </member>
        <member name="M:Towel.DataStructures.Trie_Linked`1.Stepper(Towel.StepBreak{`0})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="function">The delegate to invoke on each item in the structure.</param>
            <returns>The resulting status of the iteration.</returns>
        </member>
        <member name="M:Towel.DataStructures.Trie_Linked`1.Stepper(Towel.StepRefBreak{`0})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="function">The delegate to invoke on each item in the structure.</param>
            <returns>The resulting status of the iteration.</returns>
        </member>
        <member name="T:Towel.Equate`1">
            <summary>Delegate for equating two instances of the same type.</summary>
            <typeparam name="T">The types of the instances to compare.</typeparam>
            <param name="left">The left operand of the comparison.</param>
            <param name="right">The right operand of the comparison.</param>
            <returns>Whether the equate is valid (true) or not (false).</returns>
        </member>
        <member name="T:Towel.Equate_params`1">
            <summary>Delegate for equating multiple instances of the same type.</summary>
            <typeparam name="T">The types of the instances to compare.</typeparam>
            <param name="items">The items to be compared.</param>
            <returns>True if all the items are considered equal.</returns>
        </member>
        <member name="T:Towel.Equate`2">
            <summary>Delegate for equating two instances of different types.</summary>
            <typeparam name="L">The type of the left instance to compare.</typeparam>
            <typeparam name="R">The type of the right instance to compare.</typeparam>
            <param name="left">The left operand of the equating.</param>
            <param name="right">The right operand of the equating.</param>
            <returns>Whether the equate is valid (true) or not (false).</returns>
        </member>
        <member name="T:Towel.Equate">
            <summary>Static wrapper for the based "object.Equals" fuction.</summary>
        </member>
        <member name="M:Towel.Equate.Default``1(``0,``0)">
            <summary>Static wrapper for the based "object.Equals" fuction.</summary>
            <typeparam name="T">The generic type of this operation.</typeparam>
            <param name="a">The first item of the equate function.</param>
            <param name="b">The second item of the equate function.</param>
            <returns>True if deemed equal; False if not.</returns>
        </member>
        <member name="T:Towel.Equate_CompileTimeConstant`1">
            <summary>Used for optional parameters.</summary>
            <typeparam name="T">The generic type of the equality check.</typeparam>
        </member>
        <member name="T:Towel.EquateNot`1">
            <summary>Delegate for equating two instances of the same type.</summary>
            <typeparam name="T">The types of the instances to compare.</typeparam>
            <param name="left">The left operand of the comparison.</param>
            <param name="right">The right operand of the comparison.</param>
            <returns>Whether the equate is valid (true) or not (false).</returns>
        </member>
        <member name="T:Towel.EquateNot_params`1">
            <summary>Delegate for equating multiple instances of the same type.</summary>
            <typeparam name="T">The types of the instances to compare.</typeparam>
            <param name="items">The items to be compared.</param>
            <returns>True if all the items are considered equal.</returns>
        </member>
        <member name="T:Towel.EquateNot`2">
            <summary>Delegate for equating two instances of different types.</summary>
            <typeparam name="L">The type of the left instance to compare.</typeparam>
            <typeparam name="R">The type of the right instance to compare.</typeparam>
            <param name="left">The left operand of the equating.</param>
            <param name="right">The right operand of the equating.</param>
            <returns>Whether the equate is valid (true) or not (false).</returns>
        </member>
        <member name="T:Towel.EquateNot">
            <summary>Static wrapper for the based "object.Equals" fuction.</summary>
        </member>
        <member name="M:Towel.EquateNot.Default``1(``0,``0)">
            <summary>Static wrapper for the based "object.Equals" fuction.</summary>
            <typeparam name="T">The generic type of this operation.</typeparam>
            <param name="a">The first item of the equate function.</param>
            <param name="b">The second item of the equate function.</param>
            <returns>True if deemed equal; False if not.</returns>
        </member>
        <member name="T:Towel.EquateNot_CompileTimeConstant`1">
            <summary>Used for optional parameters.</summary>
            <typeparam name="T">The generic type of the equality check.</typeparam>
        </member>
        <member name="T:Towel.Fraction32">
            <summary>A fraction represented as two shorts (numerator / denomnator).</summary>
            <citation>
            This fraction imlpementation was originally developed by 
            Syed Mehroz Alam and posted as an open source project on 
            CodeProject.com. However, it has been modified since its
            addition shorto the Towel framework.
            http://www.codeproject.com/Articles/9078/Fraction-class-in-C
            
            Original Author:
            Author: Syed Mehroz Alam
            Email: smehrozalam@yahoo.com
            URL: Programming Home http://www.geocities.com/smehrozalam/
            Date: 6/15/2004
            Time: 10:54 AM
            </citation>
        </member>
        <member name="F:Towel.Fraction32.MaxValue">
            <summary>The maximum Fraction32 value.</summary>
        </member>
        <member name="F:Towel.Fraction32.MinValue">
            <summary>The minimum Fraction32 value.</summary>
        </member>
        <member name="P:Towel.Fraction32.Numerator">
            <summary>The numerator of the fraction.</summary>
        </member>
        <member name="P:Towel.Fraction32.Denominator">
            <summary>The denominator of the fraction.</summary>
        </member>
        <member name="M:Towel.Fraction32.#ctor(System.Int16)">
            <summary>Constructs a fraction from an short.</summary>
            <param name="@short">The short to represent as a fraction.</param>
        </member>
        <member name="M:Towel.Fraction32.#ctor(System.Double)">
            <summary>Constructs a fracion from a double.</summary>
            <param name="rational">The double to represent as a fraction.</param>
        </member>
        <member name="M:Towel.Fraction32.#ctor(System.Int16,System.Int16)">
            <summary>Makes a fraction given an shorteger and a denominator.</summary>
            <param name="numerator">The nmerator of the fraction.</param>
            <param name="deniminator">The denominator fo the fraction.</param>
        </member>
        <member name="M:Towel.Fraction32.#ctor(System.String)">
            <summary>Creates a fraction by parsing a string.</summary>
            <param name="literal">The literal representation fo the fraction.</param>
        </member>
        <member name="M:Towel.Fraction32.op_UnaryNegation(Towel.Fraction32)">
            <summary>Negates a fraction.</summary>
            <param name="fraction">The fraction to negate.</param>
            <returns>The result of the negation.</returns>
        </member>
        <member name="M:Towel.Fraction32.op_Addition(Towel.Fraction32,Towel.Fraction32)">
            <summary>Adds two operands together.</summary>
            <param name="left">The left operand of the addition.</param>
            <param name="right">The right operand of the addition.</param>
            <returns>The result of the addition.</returns>
        </member>
        <member name="M:Towel.Fraction32.op_Subtraction(Towel.Fraction32,Towel.Fraction32)">
            <summary>Subtracts two operands.</summary>
            <param name="left">The left operand of the subtraction.</param>
            <param name="right">The right operand of the subtraction.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:Towel.Fraction32.op_Multiply(Towel.Fraction32,Towel.Fraction32)">
            <summary>Multiplies two operands together.</summary>
            <param name="left">The left operand of the multiplication.</param>
            <param name="right">The right operand of the multiplication.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Fraction32.op_Division(Towel.Fraction32,Towel.Fraction32)">
            <summary>Divides two operands.</summary>
            <param name="left">The left operand of the division.</param>
            <param name="right">The right operand of the division.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:Towel.Fraction32.op_Equality(Towel.Fraction32,Towel.Fraction32)">
            <summary>Checks for equality between two fractions.</summary>
            <param name="left">The first operand of the equality check.</param>
            <param name="right">The second operand of the equality check.</param>
            <returns>The result of the equality check.</returns>
        </member>
        <member name="M:Towel.Fraction32.op_Inequality(Towel.Fraction32,Towel.Fraction32)">
            <summary>Checks for equality between two fractions.</summary>
            <param name="left">The first operand of the equality check.</param>
            <param name="right">The second operand of the equality check.</param>
            <returns>The result of the equality check.</returns>
        </member>
        <member name="M:Towel.Fraction32.op_LessThan(Towel.Fraction32,Towel.Fraction32)">
            <summary>Performs a less-than inquality between two operands.</summary>
            <param name="left">The left operand of the inequality.</param>
            <param name="right">The right operand of the inequality.</param>
            <returns>The value of the inequality.</returns>
        </member>
        <member name="M:Towel.Fraction32.op_GreaterThan(Towel.Fraction32,Towel.Fraction32)">
            <summary>Performs a greater-than inquality between two operands.</summary>
            <param name="left">The left operand of the inequality.</param>
            <param name="right">The right operand of the inequality.</param>
            <returns>The value of the inequality.</returns>
        </member>
        <member name="M:Towel.Fraction32.op_LessThanOrEqual(Towel.Fraction32,Towel.Fraction32)">
            <summary>Performs a less-than-or-equal inquality between two operands.</summary>
            <param name="left">The left operand of the inequality.</param>
            <param name="right">The right operand of the inequality.</param>
            <returns>The value of the inequality.</returns>
        </member>
        <member name="M:Towel.Fraction32.op_GreaterThanOrEqual(Towel.Fraction32,Towel.Fraction32)">
            <summary>Performs a greater-than-or-equal inquality between two operands.</summary>
            <param name="left">The left operand of the inequality.</param>
            <param name="right">The right operand of the inequality.</param>
            <returns>The value of the inequality.</returns>
        </member>
        <member name="M:Towel.Fraction32.op_Explicit(System.Double)~Towel.Fraction32">
            <summary>Converts a double to a fraction. Precision will be lost.</summary>
            <param name="rational">The double to convert to a fraction.</param>
            <returns>The resulting double of the conversion.</returns>
        </member>
        <member name="M:Towel.Fraction32.op_Explicit(System.Int32)~Towel.Fraction32">
            <summary>Implicitly converts an short shorto a fraction.</summary>
            <param name="integer">The integer to convert shorto a fraction.</param>
            <returns>The resulting fraction representation.</returns>
        </member>
        <member name="M:Towel.Fraction32.op_Implicit(System.Int16)~Towel.Fraction32">
            <summary>Implicitly converts an short shorto a fraction.</summary>
            <param name="shorteger">The shorteger to convert shorto a fraction.</param>
            <returns>The resulting fraction representation.</returns>
        </member>
        <member name="M:Towel.Fraction32.op_Explicit(System.String)~Towel.Fraction32">
            <summary>Implicitly converts an short shorto a fraction.</summary>
            <param name="literal">The shorteger to convert shorto a fraction.</param>
            <returns>The resulting fraction representation.</returns>
        </member>
        <member name="M:Towel.Fraction32.op_Implicit(Towel.Fraction32)~System.String">
            <summary>Implicitly converts an short shorto a fraction.</summary>
            <param name="fraction">The shorteger to convert shorto a fraction.</param>
            <returns>The resulting fraction representation.</returns>
        </member>
        <member name="M:Towel.Fraction32.op_Explicit(Towel.Fraction32)~System.Double">
            <summary>Implicitly converts an short shorto a fraction.</summary>
            <param name="fraction">The shorteger to convert shorto a fraction.</param>
            <returns>The resulting fraction representation.</returns>
        </member>
        <member name="M:Towel.Fraction32.Equals(Towel.Fraction32,Towel.Fraction32)">
            <summary>Check for equality by value.</summary>
            <param name="left">The left operand of the equality check.</param>
            <param name="right">The right operand of the equality check.</param>
            <returns>True if equal; false if not.</returns>
        </member>
        <member name="M:Towel.Fraction32.Equals(System.Object)">
            <summary>Checks for equality by value.</summary>
            <param name="obj">The right operand of the equality check.</param>
            <returns>True if equal; false if not.</returns>
        </member>
        <member name="M:Towel.Fraction32.GetHashCode">
            <summary>Computes a hash code for this fraction.</summary>
        </member>
        <member name="M:Towel.Fraction32.Negate(Towel.Fraction32)">
            <summary>Negates a fraction.</summary>
            <param name="frac1">The fraction to negate.</param>
            <returns>The result of the negation.</returns>
        </member>
        <member name="M:Towel.Fraction32.Add(Towel.Fraction32,Towel.Fraction32)">
            <summary>Compute the addition of two fracitons.</summary>
            <param name="frac1">The left operand of the addition.</param>
            <param name="frac2">The right operand of the addition.</param>
            <returns>The result of the addition.</returns>
        </member>
        <member name="M:Towel.Fraction32.Multiply(Towel.Fraction32,Towel.Fraction32)">
            <summary>Computes the multiplication of two fractions.</summary>
            <param name="frac1">The left operand of the multiplication.</param>
            <param name="frac2">The right operand of the multiplication.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Fraction32.ToString">
            <summary>Converts this fraction shorto a string "num/den".</summary>
            <returns>A string representation fo this fraction.</returns>
        </member>
        <member name="M:Towel.Fraction32.Parse(System.String)">
            <summary>
            The function takes an string as an argument and returns its corresponding reduced fraction32
            the string can be an in the form of and shorteger, double or fraction32.
            e.g it can be like "123" or "123.321" or "123/456"
            </summary>
        </member>
        <member name="M:Towel.Fraction32.ToFraction(System.Double)">
            <summary>
            The function takes a floating poshort number as an argument 
            and returns its corresponding reduced fraction32
            </summary>
        </member>
        <member name="M:Towel.Fraction32.Inverse(Towel.Fraction32)">
            <summary>The function returns the inverse of a Fraction object.</summary>
        </member>
        <member name="M:Towel.Fraction32.Reduce(Towel.Fraction32)">
            <summary>
            The function reduces(simplifies) a Fraction object by dividing both its numerator 
            and denominator by their GCD
            </summary>
        </member>
        <member name="T:Towel.Fraction64">
            <summary>A fraction represented as two integers (numerator / denomnator).</summary>
            <citation>
            This fraction imlpementation was originally developed by 
            Syed Mehroz Alam and posted as an open source project on 
            CodeProject.com. However, it has been modified since its
            addition into the Towel framework.
            http://www.codeproject.com/Articles/9078/Fraction-class-in-C
            
            Original Author:
            Author: Syed Mehroz Alam
            Email: smehrozalam@yahoo.com
            URL: Programming Home http://www.geocities.com/smehrozalam/
            Date: 6/15/2004
            Time: 10:54 AM
            </citation>
        </member>
        <member name="F:Towel.Fraction64.MaxValue">
            <summary>The maximum Fraction64 value.</summary>
        </member>
        <member name="F:Towel.Fraction64.MinValue">
            <summary>The minimum Fraction64 value.</summary>
        </member>
        <member name="P:Towel.Fraction64.Numerator">
            <summary>The numerator of the fraction.</summary>
        </member>
        <member name="P:Towel.Fraction64.Denominator">
            <summary>The denominator of the fraction.</summary>
        </member>
        <member name="M:Towel.Fraction64.#ctor(System.Int32)">
            <summary>Constructs a fraction from an int.</summary>
            <param name="integer">The int to represent as a fraction.</param>
        </member>
        <member name="M:Towel.Fraction64.#ctor(System.Double)">
            <summary>Constructs a fracion from a double.</summary>
            <param name="rational">The double to represent as a fraction.</param>
        </member>
        <member name="M:Towel.Fraction64.#ctor(System.Int32,System.Int32)">
            <summary>Makes a fraction given an integer and a denominator.</summary>
            <param name="numerator">The nmerator of the fraction.</param>
            <param name="deniminator">The denominator fo the fraction.</param>
        </member>
        <member name="M:Towel.Fraction64.#ctor(System.String)">
            <summary>Creates a fraction by parsing a string.</summary>
            <param name="literal">The literal representation fo the fraction.</param>
        </member>
        <member name="M:Towel.Fraction64.op_UnaryNegation(Towel.Fraction64)">
            <summary>Negates a fraction.</summary>
            <param name="fraction">The fraction to negate.</param>
            <returns>The result of the negation.</returns>
        </member>
        <member name="M:Towel.Fraction64.op_Addition(Towel.Fraction64,Towel.Fraction64)">
            <summary>Adds two operands together.</summary>
            <param name="left">The left operand of the addition.</param>
            <param name="right">The right operand of the addition.</param>
            <returns>The result of the addition.</returns>
        </member>
        <member name="M:Towel.Fraction64.op_Subtraction(Towel.Fraction64,Towel.Fraction64)">
            <summary>Subtracts two operands.</summary>
            <param name="left">The left operand of the subtraction.</param>
            <param name="right">The right operand of the subtraction.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:Towel.Fraction64.op_Multiply(Towel.Fraction64,Towel.Fraction64)">
            <summary>Multiplies two operands together.</summary>
            <param name="left">The left operand of the multiplication.</param>
            <param name="right">The right operand of the multiplication.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Fraction64.op_Division(Towel.Fraction64,Towel.Fraction64)">
            <summary>Divides two operands.</summary>
            <param name="left">The left operand of the division.</param>
            <param name="right">The right operand of the division.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:Towel.Fraction64.op_Equality(Towel.Fraction64,Towel.Fraction64)">
            <summary>Checks for equality between two fractions.</summary>
            <param name="left">The first operand of the equality check.</param>
            <param name="right">The second operand of the equality check.</param>
            <returns>The result of the equality check.</returns>
        </member>
        <member name="M:Towel.Fraction64.op_Inequality(Towel.Fraction64,Towel.Fraction64)">
            <summary>Checks for equality between two fractions.</summary>
            <param name="left">The first operand of the equality check.</param>
            <param name="right">The second operand of the equality check.</param>
            <returns>The result of the equality check.</returns>
        </member>
        <member name="M:Towel.Fraction64.op_LessThan(Towel.Fraction64,Towel.Fraction64)">
            <summary>Performs a less-than inquality between two operands.</summary>
            <param name="left">The left operand of the inequality.</param>
            <param name="right">The right operand of the inequality.</param>
            <returns>The value of the inequality.</returns>
        </member>
        <member name="M:Towel.Fraction64.op_GreaterThan(Towel.Fraction64,Towel.Fraction64)">
            <summary>Performs a greater-than inquality between two operands.</summary>
            <param name="left">The left operand of the inequality.</param>
            <param name="right">The right operand of the inequality.</param>
            <returns>The value of the inequality.</returns>
        </member>
        <member name="M:Towel.Fraction64.op_LessThanOrEqual(Towel.Fraction64,Towel.Fraction64)">
            <summary>Performs a less-than-or-equal inquality between two operands.</summary>
            <param name="left">The left operand of the inequality.</param>
            <param name="right">The right operand of the inequality.</param>
            <returns>The value of the inequality.</returns>
        </member>
        <member name="M:Towel.Fraction64.op_GreaterThanOrEqual(Towel.Fraction64,Towel.Fraction64)">
            <summary>Performs a greater-than-or-equal inquality between two operands.</summary>
            <param name="left">The left operand of the inequality.</param>
            <param name="right">The right operand of the inequality.</param>
            <returns>The value of the inequality.</returns>
        </member>
        <member name="M:Towel.Fraction64.op_Explicit(System.Double)~Towel.Fraction64">
            <summary>Converts a double to a fraction. Precision will be lost.</summary>
            <param name="rational">The double to convert to a fraction.</param>
            <returns>The resulting double of the conversion.</returns>
        </member>
        <member name="M:Towel.Fraction64.op_Implicit(System.Int32)~Towel.Fraction64">
            <summary>Implicitly converts an int into a fraction.</summary>
            <param name="integer">The integer to convert into a fraction.</param>
            <returns>The resulting fraction representation.</returns>
        </member>
        <member name="M:Towel.Fraction64.op_Explicit(System.String)~Towel.Fraction64">
            <summary>Implicitly converts an int into a fraction.</summary>
            <param name="literal">The integer to convert into a fraction.</param>
            <returns>The resulting fraction representation.</returns>
        </member>
        <member name="M:Towel.Fraction64.op_Implicit(Towel.Fraction64)~System.String">
            <summary>Implicitly converts an int into a fraction.</summary>
            <param name="fraction">The integer to convert into a fraction.</param>
            <returns>The resulting fraction representation.</returns>
        </member>
        <member name="M:Towel.Fraction64.op_Explicit(Towel.Fraction64)~System.Double">
            <summary>Implicitly converts an int into a fraction.</summary>
            <param name="fraction">The integer to convert into a fraction.</param>
            <returns>The resulting fraction representation.</returns>
        </member>
        <member name="M:Towel.Fraction64.Equals(Towel.Fraction64,Towel.Fraction64)">
            <summary>Check for equality by value.</summary>
            <param name="left">The left operand of the equality check.</param>
            <param name="right">The right operand of the equality check.</param>
            <returns>True if equal; false if not.</returns>
        </member>
        <member name="M:Towel.Fraction64.Equals(System.Object)">
            <summary>Checks for equality by value.</summary>
            <param name="obj">The right operand of the equality check.</param>
            <returns>True if equal; false if not.</returns>
        </member>
        <member name="M:Towel.Fraction64.GetHashCode">
            <summary>Computes a hash code for this fraction.</summary>
        </member>
        <member name="M:Towel.Fraction64.Negate(Towel.Fraction64)">
            <summary>Negates a fraction.</summary>
            <param name="frac1">The fraction to negate.</param>
            <returns>The result of the negation.</returns>
        </member>
        <member name="M:Towel.Fraction64.Add(Towel.Fraction64,Towel.Fraction64)">
            <summary>Compute the addition of two fracitons.</summary>
            <param name="frac1">The left operand of the addition.</param>
            <param name="frac2">The right operand of the addition.</param>
            <returns>The result of the addition.</returns>
        </member>
        <member name="M:Towel.Fraction64.Multiply(Towel.Fraction64,Towel.Fraction64)">
            <summary>Computes the multiplication of two fractions.</summary>
            <param name="frac1">The left operand of the multiplication.</param>
            <param name="frac2">The right operand of the multiplication.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Fraction64.ToString">
            <summary>Converts this fraction into a string "num/den".</summary>
            <returns>A string representation fo this fraction.</returns>
        </member>
        <member name="M:Towel.Fraction64.Parse(System.String)">
            <summary>
            The function takes an string as an argument and returns its corresponding reduced fraction64
            the string can be an in the form of and integer, double or fraction64.
            e.g it can be like "123" or "123.321" or "123/456"
            </summary>
        </member>
        <member name="M:Towel.Fraction64.ToFraction(System.Double)">
            <summary>
            The function takes a floating point number as an argument 
            and returns its corresponding reduced fraction64
            </summary>
        </member>
        <member name="M:Towel.Fraction64.Inverse(Towel.Fraction64)">
            <summary>The function returns the inverse of a Fraction object.</summary>
        </member>
        <member name="M:Towel.Fraction64.Reduce(Towel.Fraction64)">
            <summary>
            The function reduces(simplifies) a Fraction object by dividing both its numerator 
            and denominator by their GCD
            </summary>
        </member>
        <member name="T:Towel.Fraction128">
            <summary>A fraction represented as two longs (numerator / denomnator).</summary>
            <citation>
            This fraction imlpementation was originally developed by 
            Syed Mehroz Alam and posted as an open source project on 
            CodeProject.com. However, it has been modified since its
            addition into the Towel framework.
            http://www.codeproject.com/Articles/9078/Fraction-class-in-C
            
            Original Author:
            Author: Syed Mehroz Alam
            Email: smehrozalam@yahoo.com
            URL: Programming Home http://www.geocities.com/smehrozalam/
            Date: 6/15/2004
            Time: 10:54 AM
            </citation>
        </member>
        <member name="F:Towel.Fraction128.MaxValue">
            <summary>The maximum Fraction128 value.</summary>
        </member>
        <member name="F:Towel.Fraction128.MinValue">
            <summary>The minimum Fraction128 value.</summary>
        </member>
        <member name="P:Towel.Fraction128.Numerator">
            <summary>The numerator of the fraction.</summary>
        </member>
        <member name="P:Towel.Fraction128.Denominator">
            <summary>The denominator of the fraction.</summary>
        </member>
        <member name="M:Towel.Fraction128.op_UnaryNegation(Towel.Fraction128)">
            <summary>Negates a fraction.</summary>
            <param name="fraction">The fraction to negate.</param>
            <returns>The result of the negation.</returns>
        </member>
        <member name="M:Towel.Fraction128.op_Addition(Towel.Fraction128,Towel.Fraction128)">
            <summary>Adds two operands together.</summary>
            <param name="left">The left operand of the addition.</param>
            <param name="right">The right operand of the addition.</param>
            <returns>The result of the addition.</returns>
        </member>
        <member name="M:Towel.Fraction128.op_Subtraction(Towel.Fraction128,Towel.Fraction128)">
            <summary>Subtracts two operands.</summary>
            <param name="left">The left operand of the subtraction.</param>
            <param name="right">The right operand of the subtraction.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:Towel.Fraction128.op_Multiply(Towel.Fraction128,Towel.Fraction128)">
            <summary>Multiplies two operands together.</summary>
            <param name="left">The left operand of the multiplication.</param>
            <param name="right">The right operand of the multiplication.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Fraction128.op_Division(Towel.Fraction128,Towel.Fraction128)">
            <summary>Divides two operands.</summary>
            <param name="left">The left operand of the division.</param>
            <param name="right">The right operand of the division.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:Towel.Fraction128.op_Equality(Towel.Fraction128,Towel.Fraction128)">
            <summary>Checks for equality between two fractions.</summary>
            <param name="left">The first operand of the equality check.</param>
            <param name="right">The second operand of the equality check.</param>
            <returns>The result of the equality check.</returns>
        </member>
        <member name="M:Towel.Fraction128.op_Inequality(Towel.Fraction128,Towel.Fraction128)">
            <summary>Checks for equality between two fractions.</summary>
            <param name="left">The first operand of the equality check.</param>
            <param name="right">The second operand of the equality check.</param>
            <returns>The result of the equality check.</returns>
        </member>
        <member name="M:Towel.Fraction128.op_LessThan(Towel.Fraction128,Towel.Fraction128)">
            <summary>Performs a less-than inquality between two operands.</summary>
            <param name="left">The left operand of the inequality.</param>
            <param name="right">The right operand of the inequality.</param>
            <returns>The value of the inequality.</returns>
        </member>
        <member name="M:Towel.Fraction128.op_GreaterThan(Towel.Fraction128,Towel.Fraction128)">
            <summary>Performs a greater-than inquality between two operands.</summary>
            <param name="left">The left operand of the inequality.</param>
            <param name="right">The right operand of the inequality.</param>
            <returns>The value of the inequality.</returns>
        </member>
        <member name="M:Towel.Fraction128.op_LessThanOrEqual(Towel.Fraction128,Towel.Fraction128)">
            <summary>Performs a less-than-or-equal inquality between two operands.</summary>
            <param name="left">The left operand of the inequality.</param>
            <param name="right">The right operand of the inequality.</param>
            <returns>The value of the inequality.</returns>
        </member>
        <member name="M:Towel.Fraction128.op_GreaterThanOrEqual(Towel.Fraction128,Towel.Fraction128)">
            <summary>Performs a greater-than-or-equal inquality between two operands.</summary>
            <param name="left">The left operand of the inequality.</param>
            <param name="right">The right operand of the inequality.</param>
            <returns>The value of the inequality.</returns>
        </member>
        <member name="M:Towel.Fraction128.op_Explicit(System.Double)~Towel.Fraction128">
            <summary>Converts a double to a fraction. Precision will be lost.</summary>
            <param name="rational">The double to convert to a fraction.</param>
            <returns>The resulting double of the conversion.</returns>
        </member>
        <member name="M:Towel.Fraction128.op_Implicit(System.Int64)~Towel.Fraction128">
            <summary>Implicitly converts an long longo a fraction.</summary>
            <param name="longeger">The longeger to convert longo a fraction.</param>
            <returns>The resulting fraction representation.</returns>
        </member>
        <member name="M:Towel.Fraction128.op_Explicit(System.String)~Towel.Fraction128">
            <summary>Implicitly converts an long longo a fraction.</summary>
            <param name="literal">The longeger to convert longo a fraction.</param>
            <returns>The resulting fraction representation.</returns>
        </member>
        <member name="M:Towel.Fraction128.op_Implicit(Towel.Fraction128)~System.String">
            <summary>Implicitly converts an long longo a fraction.</summary>
            <param name="fraction">The longeger to convert longo a fraction.</param>
            <returns>The resulting fraction representation.</returns>
        </member>
        <member name="M:Towel.Fraction128.op_Explicit(Towel.Fraction128)~System.Double">
            <summary>Implicitly converts an long longo a fraction.</summary>
            <param name="fraction">The longeger to convert longo a fraction.</param>
            <returns>The resulting fraction representation.</returns>
        </member>
        <member name="M:Towel.Fraction128.Equals(System.Object)">
            <summary>Checks for equality with another object.</summary>
            <param name="obj">The object to equate with this.</param>
            <returns>The result of the equate.</returns>
        </member>
        <member name="M:Towel.Fraction128.GetHashCode">
            <summary>Returns a hash code for this Fraction128.</summary>
        </member>
        <member name="M:Towel.Fraction128.Negate(Towel.Fraction128)">
            <summary>
            longernal function for negation
            </summary>
        </member>
        <member name="M:Towel.Fraction128.Parse(System.String)">
            <summary>
            The function takes an string as an argument and returns its corresponding reduced fraction64
            the string can be an in the form of and longeger, double or fraction64.
            e.g it can be like "123" or "123.321" or "123/456"
            </summary>
        </member>
        <member name="M:Towel.Fraction128.ToFraction(System.Double)">
            <summary>
            The function takes a floating polong number as an argument 
            and returns its corresponding reduced fraction64
            </summary>
        </member>
        <member name="M:Towel.Fraction128.Inverse(Towel.Fraction128)">
            <summary>The function returns the inverse of a Fraction object.</summary>
        </member>
        <member name="M:Towel.Fraction128.Reduce(Towel.Fraction128)">
            <summary>
            The function reduces(simplifies) a Fraction object by dividing both its numerator 
            and denominator by their GCD
            </summary>
        </member>
        <member name="T:Towel.Hash`1">
            <summary>Delegate for hash code computation.</summary>
            <typeparam name="T">The type of this hash function.</typeparam>
            <param name="item">The instance to compute the hash of.</param>
            <returns>The computed hash of the given item.</returns>
        </member>
        <member name="T:Towel.Hash">
            <summary>Static wrapper for the based "object.GetHashCode" fuction.</summary>
        </member>
        <member name="M:Towel.Hash.Default``1(``0)">
            <summary>Static wrapper for the instance based "object.GetHashCode" fuction.</summary>
            <typeparam name="T">The generic type of the hash operation.</typeparam>
            <param name="item">The item to get the hash code of.</param>
            <returns>The computed hash code using the base GetHashCode instance method.</returns>
        </member>
        <member name="F:Towel.Hash.TableSizes">
            <summary>used for hash tables in this project. NOTE: CHANGING THESE VALUES MIGHT BREAK HASH TABLES</summary>
        </member>
        <member name="T:Towel.Hash.HashLinked`1">
            <summary>A base for all hash tables of linked lists.</summary>
            <typeparam name="NODE">The generic type of the structure.</typeparam>
        </member>
        <member name="M:Towel.Hash.HashLinked`1.#ctor">
            <summary>Constructs a new hash table instance.</summary>
            <remarks>Runtime: O(1).</remarks>
        </member>
        <member name="M:Towel.Hash.HashLinked`1.#ctor(System.Int32)">
            <summary>Constructs a new hash table instance.</summary>
            <remarks>Runtime: O(1).</remarks>
        </member>
        <member name="P:Towel.Hash.HashLinked`1.TableSize">
            <summary>Returns the current size of the actual table. You will want this if you 
            wish to multithread structure traversals.</summary>
            <remarks>Runtime: O(1).</remarks>
        </member>
        <member name="P:Towel.Hash.HashLinked`1.Count">
            <summary>Returns the current number of items in the structure.</summary>
            <remarks>Runetime: O(1).</remarks>
        </member>
        <member name="M:Towel.Hash.HashLinked`1.Clone">
            <summary>Creates a shallow clone of this data structure.</summary>
            <returns>A shallow clone of this data structure.</returns>
        </member>
        <member name="M:Towel.Hash.HashLinked`1.Contains(`0)">
            <summary>Determines if this structure contains a given item.</summary>
            <param name="item">The item to see if theis structure contains.</param>
            <returns>True if the item is in the structure; False if not.</returns>
        </member>
        <member name="M:Towel.Hash.HashLinked`1.Add(`0)">
            <summary>Adds a value to the hash table.</summary>
            <param name="key">The key value to use as the look-up reference in the hash table.</param>
            <remarks>Runtime: O(n), Omega(1).</remarks>
        </member>
        <member name="T:Towel.Mathematics.Compute">
            <summary>Static Generic Mathematics Computation.</summary>
        </member>
        <member name="T:Towel.Mathematics.Compute.MultiplyAddImplementation`1">
            <summary>a * b + c</summary>
        </member>
        <member name="M:Towel.Mathematics.Compute.Pi``1(System.Predicate{``0})">
            <summary>Computes the value of pi for the provided generic type.</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="predicate">The cancellation token for cutting off computation.</param>
            <returns>The computed value of pi.</returns>
        </member>
        <member name="M:Towel.Mathematics.Compute.Convert``2(``0)">
            <summary>Converts a value from one type to another.</summary>
            <typeparam name="A">The generic type to convert from.</typeparam>
            <typeparam name="B">The generic type to convert to.</typeparam>
            <param name="a">The value to convert.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Towel.Mathematics.Compute.Negate``1(``0)">
            <summary>Negates a numeric value [-a].</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="a">The value to negate.</param>
            <returns>The result of the negation.</returns>
        </member>
        <member name="M:Towel.Mathematics.Compute.Add``1(``0,``0)">
            <summary>Adds two numeric values [a + b].</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="a">The first operand of the addition.</param>
            <param name="b">The second operand of the addition.</param>
            <returns>The result of the addition.</returns>
        </member>
        <member name="M:Towel.Mathematics.Compute.Add``1(``0,``0,``0,``0[])">
            <summary>Adds multiple numeric values [a + b + c...].</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="a">The first operand of the addition.</param>
            <param name="b">The second operand of the addition.</param>
            <param name="c">The third operand of the addition.</param>
            <param name="d">The remaining operands of the addition.</param>
            <returns>The result of the addition.</returns>
        </member>
        <member name="M:Towel.Mathematics.Compute.Add``1(Towel.Stepper{``0})">
            <summary>Adds multiple numeric values [step_1 + step_2 + step_3...].</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="stepper">The stepper containing the values.</param>
            <returns>The result of the addition.</returns>
        </member>
        <member name="M:Towel.Mathematics.Compute.Subtract``1(``0,``0)">
            <summary>Subtracts two numeric values [a - b].</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="a">The first operand of the subtraction.</param>
            <param name="b">The second operand of the subtraction.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:Towel.Mathematics.Compute.Subtract``1(``0,``0,``0,``0[])">
            <summary>Subtracts multiple numeric values [a - b - c...].</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="a">The first operand of the subtraction.</param>
            <param name="b">The first second of the subtraction.</param>
            <param name="c">The first third of the subtraction.</param>
            <param name="d">The remaining values of the subtraction.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:Towel.Mathematics.Compute.Subtract``1(Towel.Stepper{``0})">
            <summary>Subtracts multiple numeric values [step_1 - step_2 - step_3...].</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="stepper">The stepper containing the values.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:Towel.Mathematics.Compute.Multiply``1(``0,``0)">
            <summary>Multiplies two numeric values [a * b].</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="a">The first operand of the multiplication.</param>
            <param name="b">The second operand of the multiplication.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Mathematics.Compute.Multiply``1(``0,``0,``0,``0[])">
            <summary>Multiplies multiple numeric values [a * b * c...].</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="a">The first operand of the multiplication.</param>
            <param name="b">The second operand of the multiplication.</param>
            <param name="c">The third operand of the multiplication.</param>
            <param name="d">The remaining values of the multiplication.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Mathematics.Compute.Multiply``1(Towel.Stepper{``0})">
            <summary>Multiplies multiple numeric values [step_1 * step_2 * step_3...].</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="stepper">The stepper containing the values.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Mathematics.Compute.Divide``1(``0,``0)">
            <summary>Divides two numeric values [a / b].</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="a">The first operand of the division.</param>
            <param name="b">The second operand of the division.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:Towel.Mathematics.Compute.Divide``1(``0,``0,``0,``0[])">
            <summary>Divides multiple numeric values [a / b / c...].</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="a">The first operand of the division.</param>
            <param name="b">The second operand of the division.</param>
            <param name="c">The third operand of the division.</param>
            <param name="d">The remaining values of the division.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:Towel.Mathematics.Compute.Divide``1(Towel.Stepper{``0})">
            <summary>Divides multiple numeric values [step_1 / step_2 / step_3...].</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="stepper">The stepper containing the values.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:Towel.Mathematics.Compute.Invert``1(``0)">
            <summary>Inverts a numeric value [1 / a].</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="a">The numeric value to invert.</param>
            <returns>The result of the inversion.</returns>
        </member>
        <member name="M:Towel.Mathematics.Compute.Modulo``1(``0,``0)">
            <summary>Modulos two numeric values [a % b].</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="a">The first operand of the modulation.</param>
            <param name="b">The second operand of the modulation.</param>
            <returns>The result of the modulation.</returns>
        </member>
        <member name="M:Towel.Mathematics.Compute.Modulo``1(``0,``0,``0,``0[])">
            <summary>Modulos multiple numeric values [a % b % c...].</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="a">The first operand of the modulation.</param>
            <param name="b">The second operand of the modulation.</param>
            <param name="c">The third operand of the modulation.</param>
            <param name="d">The remaining values of the modulation.</param>
            <returns>The result of the modulation.</returns>
        </member>
        <member name="M:Towel.Mathematics.Compute.Modulo``1(Towel.Stepper{``0})">
            <summary>Modulos multiple numeric values [step_1 % step_2 % step_3...].</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="stepper">The stepper containing the values.</param>
            <returns>The result of the modulation.</returns>
        </member>
        <member name="M:Towel.Mathematics.Compute.Power``1(``0,``0)">
            <summary>Powers two numeric values [a ^ b].</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="a">The first operand of the power.</param>
            <param name="b">The first operand of the power.</param>
            <returns>The result of the power.</returns>
        </member>
        <member name="M:Towel.Mathematics.Compute.Power``1(``0,``0,``0,``0[])">
            <summary>Powers multiple numeric values [a ^ b ^ c...].</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="a">The first operand of the power.</param>
            <param name="b">The second operand of the power.</param>
            <param name="c">The third operand of the power.</param>
            <param name="d">The remaining values of the power.</param>
            <returns>The result of the power.</returns>
        </member>
        <member name="M:Towel.Mathematics.Compute.Power``1(Towel.Stepper{``0})">
            <summary>Powers multiple numeric values [step_1 ^ step_2 ^ step_3...].</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="stepper">The stepper containing the values.</param>
            <returns>The result of the power.</returns>
        </member>
        <member name="M:Towel.Mathematics.Compute.SquareRoot``1(``0)">
            <summary>Square roots a numeric value [√a].</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="a">The numeric value to square root.</param>
            <returns>The result of the square root.</returns>
        </member>
        <member name="M:Towel.Mathematics.Compute.Root``1(``0,``0)">
            <summary>Roots two numeric values [a ^ (1 / b)].</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="a">The base of the root.</param>
            <param name="b">The root of the operation.</param>
            <returns>The result of the root.</returns>
        </member>
        <member name="M:Towel.Mathematics.Compute.IsInteger``1(``0)">
            <summary>Determines if a numerical value is an integer.</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="a">The value to determine integer status of.</param>
            <returns>Whether or not the value is an integer.</returns>
        </member>
        <member name="M:Towel.Mathematics.Compute.IsNonNegative``1(``0)">
            <summary>Determines if a numerical value is non-negative.</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="a">The value to determine non-negative status of.</param>
            <returns>Whether or not the value is non-negative.</returns>
        </member>
        <member name="M:Towel.Mathematics.Compute.IsNegative``1(``0)">
            <summary>Determines if a numerical value is negative.</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="a">The value to determine negative status of.</param>
            <returns>Whether or not the value is negative.</returns>
        </member>
        <member name="M:Towel.Mathematics.Compute.IsPositive``1(``0)">
            <summary>Determines if a numerical value is positive.</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="a">The value to determine positive status of.</param>
            <returns>Whether or not the value is positive.</returns>
        </member>
        <member name="M:Towel.Mathematics.Compute.IsEven``1(``0)">
            <summary>Determines if a numerical value is even.</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="a">The value to determine even status of.</param>
            <returns>Whether or not the value is even.</returns>
        </member>
        <member name="M:Towel.Mathematics.Compute.IsOdd``1(``0)">
            <summary>Determines if a numerical value is odd.</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="a">The value to determine odd status of.</param>
            <returns>Whether or not the value is odd.</returns>
        </member>
        <member name="M:Towel.Mathematics.Compute.IsPrime``1(``0)">
            <summary>Determines if a numerical value is prime.</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="a">The value to determine prime status of.</param>
            <returns>Whether or not the value is prime.</returns>
        </member>
        <member name="M:Towel.Mathematics.Compute.AbsoluteValue``1(``0)">
            <summary>Gets the absolute value of a value.</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="a">The value to get the absolute value of.</param>
            <returns>The absolute value of the provided value.</returns>
        </member>
        <member name="M:Towel.Mathematics.Compute.Maximum``1(``0,``0)">
            <summary>Computes the maximum of two numeric values.</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="a">The first operand of the maximum operation.</param>
            <param name="b">The second operand of the maximum operation.</param>
            <returns>The computed maximum of the provided values.</returns>
        </member>
        <member name="M:Towel.Mathematics.Compute.Maximum``1(``0,``0,``0,``0[])">
            <summary>Computes the maximum of multiple numeric values.</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="a">The first operand of the maximum operation.</param>
            <param name="b">The second operand of the maximum operation.</param>
            <param name="c">The third operand of the maximum operation.</param>
            <param name="d">The remaining operands of the maximum operation.</param>
            <returns>The computed maximum of the provided values.</returns>
        </member>
        <member name="M:Towel.Mathematics.Compute.Maximum``1(Towel.Stepper{``0})">
            <summary>Computes the maximum of multiple numeric values.</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="stepper">The set of data to compute the maximum of.</param>
            <returns>The computed maximum of the provided values.</returns>
        </member>
        <member name="M:Towel.Mathematics.Compute.Minimum``1(``0,``0)">
            <summary>Computes the minimum of two numeric values.</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="a">The first operand of the minimum operation.</param>
            <param name="b">The second operand of the minimum operation.</param>
            <returns>The computed minimum of the provided values.</returns>
        </member>
        <member name="M:Towel.Mathematics.Compute.Minimum``1(``0,``0,``0,``0[])">
            <summary>Computes the minimum of multiple numeric values.</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="a">The first operand of the minimum operation.</param>
            <param name="b">The second operand of the minimum operation.</param>
            <param name="c">The third operand of the minimum operation.</param>
            <param name="d">The remaining operands of the minimum operation.</param>
            <returns>The computed minimum of the provided values.</returns>
        </member>
        <member name="M:Towel.Mathematics.Compute.Minimum``1(Towel.Stepper{``0})">
            <summary>Computes the minimum of multiple numeric values.</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="stepper">The set of data to compute the minimum of.</param>
            <returns>The computed minimum of the provided values.</returns>
        </member>
        <member name="M:Towel.Mathematics.Compute.Clamp``1(``0,``0,``0)">
            <summary>Gets a value restricted to a minimum and maximum range.</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="value">The value to clamp.</param>
            <param name="minimum">The minimum of the range to clamp the value by.</param>
            <param name="maximum">The maximum of the range to clamp the value by.</param>
            <returns>The value restricted to the provided range.</returns>
        </member>
        <member name="M:Towel.Mathematics.Compute.EqualLeniency``1(``0,``0,``0)">
            <summary>Checks for equality between two numeric values with a range of possibly leniency.</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="a">The first operand of the equality check.</param>
            <param name="b">The second operand of the equality check.</param>
            <param name="leniency">The allowed distance between the values to still be considered equal.</param>
            <returns>True if the values are within the allowed leniency of each other. False if not.</returns>
        </member>
        <member name="M:Towel.Mathematics.Compute.Compare``1(``0,``0)">
            <summary>Compares two numeric values.</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="a">The first operand of the comparison.</param>
            <param name="b">The second operand of the comparison.</param>
            <returns>The result of the comparison.</returns>
        </member>
        <member name="M:Towel.Mathematics.Compute.Equal``1(``0,``0)">
            <summary>Checks two numeric values for equality [a == b].</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="a">The first operand of the equality check.</param>
            <param name="b">The second operand of the equality check.</param>
            <returns>The result of the equality check.</returns>
        </member>
        <member name="M:Towel.Mathematics.Compute.Equal``1(``0,``0,``0[])">
            <summary>Checks for equality among multiple numeric operands.</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="a">The first operand of the equality check.</param>
            <param name="b">The second operand of the equality check.</param>
            <param name="c">The remaining operands of the equality check.</param>
            <returns>True if all operand are equal. False if not.</returns>
        </member>
        <member name="M:Towel.Mathematics.Compute.Equal``1(Towel.Stepper{``0})">
            <summary>Checks for equality among multiple numeric operands.</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="stepper">The operands of the equality check.</param>
            <returns>True if all operand are equal. False if not.</returns>
        </member>
        <member name="M:Towel.Mathematics.Compute.NotEqual``1(``0,``0)">
            <summary>Checks two numeric values for inequality [a != b].</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="a">The first operand of the inequality check.</param>
            <param name="b">The second operand of the inequality check.</param>
            <returns>The result of the inequality check.</returns>
        </member>
        <member name="M:Towel.Mathematics.Compute.LessThan``1(``0,``0)">
            <summary>Checks that a numeric value is less than another.</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="a">The first operand of the less than check.</param>
            <param name="b">The second operand of the less than check.</param>
            <returns>The result of the less than check.</returns>
        </member>
        <member name="M:Towel.Mathematics.Compute.GreaterThan``1(``0,``0)">
            <summary>Checks that a numeric value is greater than another [a > b].</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="a">The first operand of the greater than check.</param>
            <param name="b">The second operand of the greater than check.</param>
            <returns>The result of the greater than check.</returns>
        </member>
        <member name="M:Towel.Mathematics.Compute.LessThanOrEqual``1(``0,``0)">
            <summary>Checks that a numeric value is less than or equal to another.</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="a">The first operand of the less than or equal to check.</param>
            <param name="b">The second operand of the less than or equal to check.</param>
            <returns>The result of the less than or equal to check.</returns>
        </member>
        <member name="M:Towel.Mathematics.Compute.GreaterThanOrEqual``1(``0,``0)">
            <summary>Checks that a numeric value is less greater or equal to another [a >= b].</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="a">The first operand of the greater than or equal to check.</param>
            <param name="b">The second operand of the greater than or equal to check.</param>
            <returns>The result of the greater than or equal to check.</returns>
        </member>
        <member name="M:Towel.Mathematics.Compute.Factorial``1(``0)">
            <summary>Computes the factorial of a numeric value [a!] == [a * (a - 1) * (a - 2) * ... * 1].</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="a">The integer factorial to computer the value of.</param>
            <returns>The computed factorial value.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the parameter is not an integer value.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the parameter is less than zero.</exception>
        </member>
        <member name="M:Towel.Mathematics.Compute.Mean``1(``0,``0[])">
            <summary>Computes the mean of a set of numerical values.</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="a">The first value of the set of data to compute the mean of.</param>
            <param name="b">The remaining values in the data set to compute the mean of.</param>
            <returns>The computed mean of the set of data.</returns>
        </member>
        <member name="M:Towel.Mathematics.Compute.Mean``1(Towel.Stepper{``0})">
            <summary>Computes the mean of a set of numerical values.</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="stepper">The set of data to compute the mean of.</param>
            <returns>The computed mean of the set of data.</returns>
        </member>
        <member name="M:Towel.Mathematics.Compute.Median``1(Towel.Compare{``0},``0[])">
            <summary>Computes the median of a set of data.</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="compare">The comparison algorithm to sort the data by.</param>
            <param name="values">The set of data to compute the median of.</param>
            <returns>The computed median value of the set of data.</returns>
        </member>
        <member name="M:Towel.Mathematics.Compute.Median``1(Towel.Compare{``0},Towel.Stepper{``0})">
            <summary>Computes the median of a set of data.</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="compare">The comparison algorithm to sort the data by.</param>
            <param name="stepper">The set of data to compute the median of.</param>
            <returns>The computed median value of the set of data.</returns>
        </member>
        <member name="M:Towel.Mathematics.Compute.Median``1(``0[])">
            <summary>Computes the median of a set of data.</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="values">The set of data to compute the median of.</param>
            <returns>The computed median value of the set of data.</returns>
        </member>
        <member name="M:Towel.Mathematics.Compute.Median``1(Towel.Stepper{``0})">
            <summary>Computes the median of a set of data.</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="stepper">The set of data to compute the median of.</param>
            <returns>The computed median value of the set of data.</returns>
        </member>
        <member name="M:Towel.Mathematics.Compute.Range``1(``0@,``0@,Towel.Stepper{``0})">
            <summary>Gets the range (minimum and maximum) of a set of data.</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            /// <param name="stepper">The set of data to get the range of.</param>
            <param name="minimum">The minimum of the set of data.</param>
            <param name="maximum">The maximum of the set of data.</param>
            <exception cref="T:System.ArgumentNullException">Throws when stepper is null.</exception>
            <exception cref="T:System.ArgumentException">Throws when stepper is empty.</exception>
        </member>
        <member name="M:Towel.Mathematics.Compute.Range``1(Towel.Stepper{``0},``0@,``0@)">
            <summary>Gets the range (minimum and maximum) of a set of data.</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            /// <param name="stepper">The set of data to get the range of.</param>
            <param name="minimum">The minimum of the set of data.</param>
            <param name="maximum">The maximum of the set of data.</param>
            <exception cref="T:System.ArgumentNullException">Throws when stepper is null.</exception>
            <exception cref="T:System.ArgumentException">Throws when stepper is empty.</exception>
        </member>
        <member name="M:Towel.Mathematics.Compute.Exponential``1(``0)">
            <summary>Computes: [ e ^ a ].</summary>
        </member>
        <member name="T:Towel.Mathematics.Compute.NaturalLogarithmImplementation`1">
            <summary>Computes (natrual log): [ ln(n) ].</summary>
        </member>
        <member name="M:Towel.Mathematics.Compute.SineTaylorSeries``1(Towel.Measurements.Angle{``0},System.Predicate{``0})">
            <summary>Computes the sine ratio of an angle using the relative talor series. Accurate but slow.</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="angle">The angle to compute the sine ratio of.</param>
            <param name="predicate">Determines if coputation should continue or is accurate enough.</param>
            <returns>The taylor series computed sine ratio of the provided angle.</returns>
        </member>
        <member name="M:Towel.Mathematics.Compute.SineSystem``1(Towel.Measurements.Angle{``0})">
            <summary>Computes the sine ratio of an angle using the system's sine function. WARNING! CONVERSION TO/FROM DOUBLE (possible loss of significant figures).</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="a">The angle to compute the sine ratio of.</param>
            <returns>The sine ratio of the provided angle.</returns>
            <remarks>WARNING! CONVERSION TO/FROM DOUBLE (possible loss of significant figures).</remarks>
        </member>
        <member name="M:Towel.Mathematics.Compute.SineQuadratic``1(Towel.Measurements.Angle{``0})">
            <summary>Estimates the sine ratio using piecewise quadratic equations. Fast but NOT very accurate.</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="a">The angle to compute the quadratic estimated sine ratio of.</param>
            <returns>The quadratic estimation of the sine ratio of the provided angle.</returns>
        </member>
        <member name="M:Towel.Mathematics.Compute.CosineTaylorSeries``1(Towel.Measurements.Angle{``0},System.Predicate{``0})">
            <summary>Computes the cosine ratio of an angle using the relative talor series. Accurate but slow.</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="angle">The angle to compute the cosine ratio of.</param>
            <param name="predicate">Determines if coputation should continue or is accurate enough.</param>
            <returns>The taylor series computed cosine ratio of the provided angle.</returns>
        </member>
        <member name="M:Towel.Mathematics.Compute.CosineSystem``1(Towel.Measurements.Angle{``0})">
            <summary>Computes the cosine ratio of an angle using the system's cosine function. WARNING! CONVERSION TO/FROM DOUBLE (possible loss of significant figures).</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="a">The angle to compute the cosine ratio of.</param>
            <returns>The cosine ratio of the provided angle.</returns>
            <remarks>WARNING! CONVERSION TO/FROM DOUBLE (possible loss of significant figures).</remarks>
        </member>
        <member name="M:Towel.Mathematics.Compute.CosineQuadratic``1(Towel.Measurements.Angle{``0})">
            <summary>Estimates the cosine ratio using piecewise quadratic equations. Fast but NOT very accurate.</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="a">The angle to compute the quadratic estimated cosine ratio of.</param>
            <returns>The quadratic estimation of the cosine ratio of the provided angle.</returns>
        </member>
        <member name="M:Towel.Mathematics.Compute.TangentTaylorSeries``1(Towel.Measurements.Angle{``0})">
            <summary>Computes the tangent ratio of an angle using the relative talor series. Accurate but slow.</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="angle">The angle to compute the tangent ratio of.</param>
            <returns>The taylor series computed tangent ratio of the provided angle.</returns>
        </member>
        <member name="M:Towel.Mathematics.Compute.TangentSystem``1(Towel.Measurements.Angle{``0})">
            <summary>Computes the tangent ratio of an angle using the system's tangent function. WARNING! CONVERSION TO/FROM DOUBLE (possible loss of significant figures).</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="a">The angle to compute the tangent ratio of.</param>
            <returns>The tangent ratio of the provided angle.</returns>
            <remarks>WARNING! CONVERSION TO/FROM DOUBLE (possible loss of significant figures).</remarks>
        </member>
        <member name="M:Towel.Mathematics.Compute.TangentQuadratic``1(Towel.Measurements.Angle{``0})">
            <summary>Estimates the tangent ratio using piecewise quadratic equations. Fast but NOT very accurate.</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="a">The angle to compute the quadratic estimated tangent ratio of.</param>
            <returns>The quadratic estimation of the tangent ratio of the provided angle.</returns>
        </member>
        <member name="M:Towel.Mathematics.Compute.CosecantSystem``1(Towel.Measurements.Angle{``0})">
            <summary>Computes the cosecant ratio of an angle using the system's sine function. WARNING! CONVERSION TO/FROM DOUBLE (possible loss of significant figures).</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="a">The angle to compute the cosecant ratio of.</param>
            <returns>The cosecant ratio of the provided angle.</returns>
            <remarks>WARNING! CONVERSION TO/FROM DOUBLE (possible loss of significant figures).</remarks>
        </member>
        <member name="M:Towel.Mathematics.Compute.CosecantQuadratic``1(Towel.Measurements.Angle{``0})">
            <summary>Estimates the cosecant ratio using piecewise quadratic equations. Fast but NOT very accurate.</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="a">The angle to compute the quadratic estimated cosecant ratio of.</param>
            <returns>The quadratic estimation of the cosecant ratio of the provided angle.</returns>
        </member>
        <member name="M:Towel.Mathematics.Compute.SecantSystem``1(Towel.Measurements.Angle{``0})">
            <summary>Computes the secant ratio of an angle using the system's cosine function. WARNING! CONVERSION TO/FROM DOUBLE (possible loss of significant figures).</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="a">The angle to compute the secant ratio of.</param>
            <returns>The secant ratio of the provided angle.</returns>
            <remarks>WARNING! CONVERSION TO/FROM DOUBLE (possible loss of significant figures).</remarks>
        </member>
        <member name="M:Towel.Mathematics.Compute.SecantQuadratic``1(Towel.Measurements.Angle{``0})">
            <summary>Estimates the secant ratio using piecewise quadratic equations. Fast but NOT very accurate.</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="a">The angle to compute the quadratic estimated secant ratio of.</param>
            <returns>The quadratic estimation of the secant ratio of the provided angle.</returns>
        </member>
        <member name="M:Towel.Mathematics.Compute.CotangentSystem``1(Towel.Measurements.Angle{``0})">
            <summary>Computes the cotangent ratio of an angle using the system's tangent function. WARNING! CONVERSION TO/FROM DOUBLE (possible loss of significant figures).</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="a">The angle to compute the cotangent ratio of.</param>
            <returns>The cotangent ratio of the provided angle.</returns>
            <remarks>WARNING! CONVERSION TO/FROM DOUBLE (possible loss of significant figures).</remarks>
        </member>
        <member name="M:Towel.Mathematics.Compute.CotangentQuadratic``1(Towel.Measurements.Angle{``0})">
            <summary>Estimates the cotangent ratio using piecewise quadratic equations. Fast but NOT very accurate.</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="a">The angle to compute the quadratic estimated cotangent ratio of.</param>
            <returns>The quadratic estimation of the cotangent ratio of the provided angle.</returns>
        </member>
        <member name="M:Towel.Mathematics.Compute.LinearRegression2D``1(Towel.Stepper{``0,``0},``0@,``0@)">
            <summary>Computes the best fit line from a set of points in 2D space [y = slope * x + y_intercept].</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="points">The points to compute the best fit line of.</param>
            <param name="slope">The slope of the computed best fit line [y = slope * x + y_intercept].</param>
            <param name="y_intercept">The y intercept of the computed best fit line [y = slope * x + y_intercept].</param>
        </member>
        <member name="M:Towel.Mathematics.Compute.FactorPrimes``1(``0,Towel.Step{``0})">
            <summary>Factors the primes numbers of a numeric integer value.</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="a">The value to factor the prime numbers of.</param>
            <param name="step">The action to perform on all the prime factors.</param>
        </member>
        <member name="T:Towel.Mathematics.Constant`1">
            <summary>Contains generic static numerical constant values.</summary>
            <typeparam name="T">The generic numeric type of the constants.</typeparam>
        </member>
        <member name="F:Towel.Mathematics.Constant`1.Zero">
            <summary>Zero [0]</summary>
        </member>
        <member name="F:Towel.Mathematics.Constant`1.One">
            <summary>One [1]</summary>
        </member>
        <member name="F:Towel.Mathematics.Constant`1.Two">
            <summary>Two [2]</summary>
        </member>
        <member name="F:Towel.Mathematics.Constant`1.Three">
            <summary>Three [3]</summary>
        </member>
        <member name="F:Towel.Mathematics.Constant`1.Four">
            <summary>Four [4]</summary>
        </member>
        <member name="F:Towel.Mathematics.Constant`1.Ten">
            <summary>Ten [10]</summary>
        </member>
        <member name="F:Towel.Mathematics.Constant`1.NegativeOne">
            <summary>Negative One [-1]</summary>
        </member>
        <member name="F:Towel.Mathematics.Constant`1.Pi">
            <summary>π [3.14...]</summary>
        </member>
        <member name="F:Towel.Mathematics.Constant`1.π">
            <summary>π [3.14...]</summary>
        </member>
        <member name="F:Towel.Mathematics.Constant`1.Pi2">
            <summary>2π [6.28...]</summary>
        </member>
        <member name="F:Towel.Mathematics.Constant`1.π2">
            <summary>2π [6.28...]</summary>
        </member>
        <member name="F:Towel.Mathematics.Constant`1.PiOver2">
            <summary>π / 2</summary>
        </member>
        <member name="F:Towel.Mathematics.Constant`1.πOver2">
            <summary>π / 2</summary>
        </member>
        <member name="F:Towel.Mathematics.Constant`1.Pi3Over2">
            <summary>3π/2</summary>
        </member>
        <member name="F:Towel.Mathematics.Constant`1.π3Over2">
            <summary>3π/2</summary>
        </member>
        <member name="F:Towel.Mathematics.Constant`1.FourOverPiSquared">
            <summary>4/(π^2)</summary>
        </member>
        <member name="F:Towel.Mathematics.Constant`1.FourOverπSquared">
            <summary>4/(π^2)</summary>
        </member>
        <member name="F:Towel.Mathematics.Constant`1.Negative4OverPiSquared">
            <summary>-4/(π^2)</summary>
        </member>
        <member name="F:Towel.Mathematics.Constant`1.Negative4OverπSquared">
            <summary>-4/(π^2)</summary>
        </member>
        <member name="T:Towel.Mathematics.MathematicsDelegates.Sine`1">
            <summary>Computes the sine ratio of an angle.</summary>
            <typeparam name="T">The numeric type of the opertion.</typeparam>
            <param name="angle">The angle to compute the sine ratio of.</param>
            <returns>The sine ratio of the angle.</returns>
        </member>
        <member name="T:Towel.Mathematics.MathematicsDelegates.Cosine`1">
            <summary>Computes the cosine ratio of an angle.</summary>
            <typeparam name="T">The numeric type of the opertion.</typeparam>
            <param name="angle">The angle to compute the cosine ratio of.</param>
            <returns>The cosine ratio of the angle.</returns>
        </member>
        <member name="T:Towel.Mathematics.MathematicsDelegates.Tangent`1">
            <summary>Computes the cosine ratio of an angle.</summary>
            <typeparam name="T">The numeric type of the opertion.</typeparam>
            <param name="angle">The angle to compute the tangent ratio of.</param>
            <returns>The cosine ratio of the angle.</returns>
        </member>
        <member name="T:Towel.Mathematics.MathematicsDelegates.InverseSine`1">
            <summary>Computes the angle measurement from a sine ratio.</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="ratio">The sine ratio to compute the angle of.</param>
            <returns>The angle of the sine ratio.</returns>
        </member>
        <member name="T:Towel.Mathematics.MathematicsDelegates.InverseCosine`1">
            <summary>Computes the angle measurement from a cosine ratio.</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="ratio">The cosine ratio to compute the angle of.</param>
            <returns>The angle of the cosine ratio.</returns>
        </member>
        <member name="T:Towel.Mathematics.MathematicsDelegates.InverseTangent`1">
            <summary>Computes the angle measurement from a tangent ratio.</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="ratio">The tangent ratio to compute the angle of.</param>
            <returns>The angle of the tangent ratio.</returns>
        </member>
        <member name="T:Towel.Mathematics.MathematicsException">
            <summary>Represents an exception in mathematical computation.</summary>
        </member>
        <member name="M:Towel.Mathematics.MathematicsException.#ctor">
            <summary>Represents an exception in mathematical computation.</summary>
        </member>
        <member name="M:Towel.Mathematics.MathematicsException.#ctor(System.String)">
            <summary>Represents an exception in mathematical computation.</summary>
            <param name="message">The message of the exception.</param>
        </member>
        <member name="M:Towel.Mathematics.MathematicsException.#ctor(System.String,System.Exception)">
            <summary>Represents an exception in mathematical computation.</summary>
            <param name="message">The message of the exception.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:Towel.Mathematics.Matrix`1">
            <summary>A matrix of arbitrary dimensions implemented as a flattened array.</summary>
            <typeparam name="T">The numeric type of this Matrix.</typeparam>
        </member>
        <member name="P:Towel.Mathematics.Matrix`1.Rows">
            <summary>The number of rows in the matrix.</summary>
        </member>
        <member name="P:Towel.Mathematics.Matrix`1.Columns">
            <summary>The number of columns in the matrix.</summary>
        </member>
        <member name="P:Towel.Mathematics.Matrix`1.IsSquare">
            <summary>Determines if the matrix is square.</summary>
        </member>
        <member name="P:Towel.Mathematics.Matrix`1.IsVector">
            <summary>Determines if the matrix is a vector.</summary>
        </member>
        <member name="P:Towel.Mathematics.Matrix`1.Is2x1">
            <summary>Determines if the matrix is a 2 component vector.</summary>
        </member>
        <member name="P:Towel.Mathematics.Matrix`1.Is3x1">
            <summary>Determines if the matrix is a 3 component vector.</summary>
        </member>
        <member name="P:Towel.Mathematics.Matrix`1.Is4x1">
            <summary>Determines if the matrix is a 4 component vector.</summary>
        </member>
        <member name="P:Towel.Mathematics.Matrix`1.Is2x2">
            <summary>Determines if the matrix is a 2 square matrix.</summary>
        </member>
        <member name="P:Towel.Mathematics.Matrix`1.Is3x3">
            <summary>Determines if the matrix is a 3 square matrix.</summary>
        </member>
        <member name="P:Towel.Mathematics.Matrix`1.Is4x4">
            <summary>Determines if the matrix is a 4 square matrix.</summary>
        </member>
        <member name="P:Towel.Mathematics.Matrix`1.Item(System.Int32,System.Int32)">
            <summary>Standard row-major matrix indexing.</summary>
            <param name="row">The row index.</param>
            <param name="column">The column index.</param>
            <returns>The value at the given indeces.</returns>
        </member>
        <member name="P:Towel.Mathematics.Matrix`1.Item(System.Int32)">
            <summary>Indexing of the flattened array representing the matrix.</summary>
            <param name="flatIndex">The flattened index of the matrix.</param>
            <returns>The value at the given flattened index.</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.#ctor(System.Int32,System.Int32)">
            <summary>Constructs a new default matrix of the given dimensions.</summary>
            <param name="rows">The number of row dimensions.</param>
            <param name="columns">The number of column dimensions.</param>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.#ctor(System.Int32,System.Int32,System.Func{System.Int32,System.Int32,`0})">
            <summary>Constructs a new matrix and initializes it via function.</summary>
            <param name="rows">The number of rows to construct.</param>
            <param name="columns">The number of columns to construct.</param>
            <param name="function">The initialization function.</param>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.#ctor(System.Int32,System.Int32,`0[])">
            <summary>
            Creates a new matrix using ROW MAJOR ORDER. The data will be referenced to, so 
            changes to it will modify the constructed matrix.
            </summary>
            <param name="rows">The number of rows to construct.</param>
            <param name="columns">The number of columns to construct.</param>
            <param name="data">The data of the matrix in ROW MAJOR ORDER.</param>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.FactoryZero(System.Int32,System.Int32)">
            <summary>Constructs a new zero-matrix of the given dimensions.</summary>
            <param name="rows">The number of rows of the matrix.</param>
            <param name="columns">The number of columns of the matrix.</param>
            <returns>The newly constructed zero-matrix.</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.FactoryIdentity(System.Int32,System.Int32)">
            <summary>Constructs a new identity-matrix of the given dimensions.</summary>
            <param name="rows">The number of rows of the matrix.</param>
            <param name="columns">The number of columns of the matrix.</param>
            <returns>The newly constructed identity-matrix.</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.FactoryUniform(System.Int32,System.Int32,`0)">
            <summary>Constructs a new matrix where every entry is the same uniform value.</summary>
            <param name="rows">The number of rows of the matrix.</param>
            <param name="columns">The number of columns of the matrix.</param>
            <param name="value">The value to assign every spot in the matrix.</param>
            <returns>The newly constructed matrix filled with the uniform value.</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.GetIsSymetric(Towel.Mathematics.Matrix{`0})">
            <summary>Determines if the matrix is symetric.</summary>
            <param name="a">The matrix to determine if symetric.</param>
            <returns>True if the matrix is symetric; false if not.</returns>
        </member>
        <member name="P:Towel.Mathematics.Matrix`1.IsSymetric">
            <summary>Determines if the matrix is symetric.</summary>
            <returns>True if the matrix is symetric; false if not.</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Negate(Towel.Mathematics.Matrix{`0},Towel.Mathematics.Matrix{`0}@)">
            <summary>Negates all the values in a matrix.</summary>
            <param name="a">The matrix to have its values negated.</param>
            <param name="b">The resulting matrix after the negation.</param>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Negate(Towel.Mathematics.Matrix{`0})">
            <summary>Negates all the values in a matrix.</summary>
            <param name="a">The matrix to have its values negated.</param>
            <returns>The resulting matrix after the negation.</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.op_UnaryNegation(Towel.Mathematics.Matrix{`0})">
            <summary>Negates all the values in a matrix.</summary>
            <param name="a">The matrix to have its values negated.</param>
            <returns>The resulting matrix after the negation.</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Negate(Towel.Mathematics.Matrix{`0}@)">
            <summary>Negates all the values in a matrix.</summary>
            <param name="b">The resulting matrix after the negation.</param>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Negate">
            <summary>Negates all the values in this matrix.</summary>
            <returns>The resulting matrix after the negation.</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Add(Towel.Mathematics.Matrix{`0},Towel.Mathematics.Matrix{`0},Towel.Mathematics.Matrix{`0}@)">
            <summary>Does standard addition of two matrices.</summary>
            <param name="a">The left matrix of the addition.</param>
            <param name="b">The right matrix of the addition.</param>
            <param name="c">The resulting matrix after the addition.</param>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Add(Towel.Mathematics.Matrix{`0},Towel.Mathematics.Matrix{`0})">
            <summary>Does standard addition of two matrices.</summary>
            <param name="a">The left matrix of the addition.</param>
            <param name="b">The right matrix of the addition.</param>
            <returns>The resulting matrix after the addition.</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.op_Addition(Towel.Mathematics.Matrix{`0},Towel.Mathematics.Matrix{`0})">
            <summary>Does a standard matrix addition.</summary>
            <param name="a">The left matrix of the addition.</param>
            <param name="b">The right matrix of the addition.</param>
            <returns>The resulting matrix after teh addition.</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Add(Towel.Mathematics.Matrix{`0},Towel.Mathematics.Matrix{`0}@)">
            <summary>Does standard addition of two matrices.</summary>
            <param name="b">The right matrix of the addition.</param>
            <param name="c">The resulting matrix after the addition.</param>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Add(Towel.Mathematics.Matrix{`0})">
            <summary>Does a standard matrix addition.</summary>
            <param name="b">The matrix to add to this matrix.</param>
            <returns>The resulting matrix after the addition.</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Subtract(Towel.Mathematics.Matrix{`0},Towel.Mathematics.Matrix{`0},Towel.Mathematics.Matrix{`0}@)">
            <summary>Does a standard matrix subtraction.</summary>
            <param name="a">The left matrix of the subtraction.</param>
            <param name="b">The right matrix of the subtraction.</param>
            <param name="c">The resulting matrix after the subtraction.</param>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Subtract(Towel.Mathematics.Matrix{`0},Towel.Mathematics.Matrix{`0})">
            <summary>Does a standard matrix subtraction.</summary>
            <param name="a">The left matrix of the subtraction.</param>
            <param name="b">The right matrix of the subtraction.</param>
            <returns>The resulting matrix after the subtraction.</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.op_Subtraction(Towel.Mathematics.Matrix{`0},Towel.Mathematics.Matrix{`0})">
            <summary>Does a standard matrix subtraction.</summary>
            <param name="a">The left matrix of the subtraction.</param>
            <param name="b">The right matrix of the subtraction.</param>
            <returns>The resulting matrix after the subtraction.</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Subtract(Towel.Mathematics.Matrix{`0},Towel.Mathematics.Matrix{`0}@)">
            <summary>Does a standard matrix subtraction.</summary>
            <param name="b">The right matrix of the subtraction.</param>
            <param name="c">The resulting matrix after the subtraction.</param>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Subtract(Towel.Mathematics.Matrix{`0})">
            <summary>Does a standard matrix subtraction.</summary>
            <param name="b">The right matrix of the subtraction.</param>
            <returns>The resulting matrix after the subtraction.</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Multiply(Towel.Mathematics.Matrix{`0},Towel.Mathematics.Matrix{`0},Towel.Mathematics.Matrix{`0}@)">
            <summary>Does a standard (triple for looped) multiplication between matrices.</summary>
            <param name="a">The left matrix of the multiplication.</param>
            <param name="b">The right matrix of the multiplication.</param>
            <param name="c">The resulting matrix of the multiplication.</param>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Multiply(Towel.Mathematics.Matrix{`0},Towel.Mathematics.Matrix{`0})">
            <summary>Does a standard (triple for looped) multiplication between matrices.</summary>
            <param name="a">The left matrix of the multiplication.</param>
            <param name="b">The right matrix of the multiplication.</param>
            <returns>The resulting matrix of the multiplication.</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.op_Multiply(Towel.Mathematics.Matrix{`0},Towel.Mathematics.Matrix{`0})">
            <summary>Does a standard (triple for looped) multiplication between matrices.</summary>
            <param name="a">The left matrix of the multiplication.</param>
            <param name="b">The right matrix of the multiplication.</param>
            <returns>The resulting matrix of the multiplication.</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Multiply(Towel.Mathematics.Matrix{`0},Towel.Mathematics.Matrix{`0}@)">
            <summary>Does a standard (triple for looped) multiplication between matrices.</summary>
            <param name="b">The right matrix of the multiplication.</param>
            <param name="c">The resulting matrix of the multiplication.</param>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Multiply(Towel.Mathematics.Matrix{`0})">
            <summary>Does a standard (triple for looped) multiplication between matrices.</summary>
            <param name="b">The right matrix of the multiplication.</param>
            <returns>The resulting matrix of the multiplication.</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Multiply(Towel.Mathematics.Matrix{`0},Towel.Mathematics.Vector{`0},Towel.Mathematics.Vector{`0}@)">
            <summary>Does a matrix-vector multiplication.</summary>
            <param name="a">The left matrix of the multiplication.</param>
            <param name="b">The right vector of the multiplication.</param>
            <param name="c">The resulting vector of the multiplication.</param>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Multiply(Towel.Mathematics.Matrix{`0},Towel.Mathematics.Vector{`0})">
            <summary>Does a matrix-vector multiplication.</summary>
            <param name="a">The left matrix of the multiplication.</param>
            <param name="b">The right vector of the multiplication.</param>
            <returns>The resulting vector of the multiplication.</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.op_Multiply(Towel.Mathematics.Matrix{`0},Towel.Mathematics.Vector{`0})">
            <summary>Does a matrix-vector multiplication.</summary>
            <param name="a">The left matrix of the multiplication.</param>
            <param name="b">The right vector of the multiplication.</param>
            <returns>The resulting vector of the multiplication.</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Multiply(Towel.Mathematics.Vector{`0},Towel.Mathematics.Vector{`0}@)">
            <summary>Does a matrix-vector multiplication.</summary>
            <param name="b">The right vector of the multiplication.</param>
            <param name="c">The resulting vector of the multiplication.</param>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Multiply(Towel.Mathematics.Vector{`0})">
            <summary>Does a matrix-vector multiplication.</summary>
            <param name="b">The right vector of the multiplication.</param>
            <returns>The resulting vector of the multiplication.</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Multiply(Towel.Mathematics.Matrix{`0},`0,Towel.Mathematics.Matrix{`0}@)">
            <summary>Multiplies all the values in a matrix by a scalar.</summary>
            <param name="a">The matrix to have the values multiplied.</param>
            <param name="b">The scalar to multiply the values by.</param>
            <param name="c">The resulting matrix after the multiplications.</param>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Multiply(Towel.Mathematics.Matrix{`0},`0)">
            <summary>Multiplies all the values in a matrix by a scalar.</summary>
            <param name="a">The matrix to have the values multiplied.</param>
            <param name="b">The scalar to multiply the values by.</param>
            <returns>The resulting matrix after the multiplications.</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Multiply(`0,Towel.Mathematics.Matrix{`0})">
            <summary>Multiplies all the values in a matrix by a scalar.</summary>
            <param name="b">The scalar to multiply the values by.</param>
            <param name="a">The matrix to have the values multiplied.</param>
            <returns>The resulting matrix after the multiplications.</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.op_Multiply(Towel.Mathematics.Matrix{`0},`0)">
            <summary>Multiplies all the values in a matrix by a scalar.</summary>
            <param name="a">The matrix to have the values multiplied.</param>
            <param name="b">The scalar to multiply the values by.</param>
            <returns>The resulting matrix after the multiplications.</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.op_Multiply(`0,Towel.Mathematics.Matrix{`0})">
            <summary>Multiplies all the values in a matrix by a scalar.</summary>
            <param name="b">The scalar to multiply the values by.</param>
            <param name="a">The matrix to have the values multiplied.</param>
            <returns>The resulting matrix after the multiplications.</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Multiply(`0,Towel.Mathematics.Matrix{`0}@)">
            <summary>Multiplies all the values in a matrix by a scalar.</summary>
            <param name="b">The scalar to multiply the values by.</param>
            <param name="c">The resulting matrix after the multiplications.</param>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Multiply(`0)">
            <summary>Multiplies all the values in a matrix by a scalar.</summary>
            <param name="b">The scalar to multiply the values by.</param>
            <returns>The resulting matrix after the multiplications.</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Divide(Towel.Mathematics.Matrix{`0},`0,Towel.Mathematics.Matrix{`0}@)">
            <summary>Divides all the values in the matrix by a scalar.</summary>
            <param name="a">The matrix to divide the values of.</param>
            <param name="b">The scalar to divide all the matrix values by.</param>
            <param name="c">The resulting matrix after the division.</param>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Divide(Towel.Mathematics.Matrix{`0},`0)">
            <summary>Divides all the values in the matrix by a scalar.</summary>
            <param name="a">The matrix to divide the values of.</param>
            <param name="b">The scalar to divide all the matrix values by.</param>
            <returns>The resulting matrix after the division.</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.op_Division(Towel.Mathematics.Matrix{`0},`0)">
            <summary>Divides all the values in the matrix by a scalar.</summary>
            <param name="a">The matrix to divide the values of.</param>
            <param name="b">The scalar to divide all the matrix values by.</param>
            <returns>The resulting matrix after the division.</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Divide(`0,Towel.Mathematics.Matrix{`0}@)">
            <summary>Divides all the values in the matrix by a scalar.</summary>
            <param name="b">The scalar to divide all the matrix values by.</param>
            <param name="c">The resulting matrix after the division.</param>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Divide(`0)">
            <summary>Divides all the values in the matrix by a scalar.</summary>
            <param name="b">The scalar to divide all the matrix values by.</param>
            <returns>The resulting matrix after the division.</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Power(Towel.Mathematics.Matrix{`0},System.Int32,Towel.Mathematics.Matrix{`0}@)">
            <summary>Applies a power to a square matrix.</summary>
            <param name="a">The matrix to be powered by.</param>
            <param name="b">The power to apply to the matrix.</param>
            <param name="c">The resulting matrix of the power operation.</param>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Power(Towel.Mathematics.Matrix{`0},System.Int32)">
            <summary>Applies a power to a square matrix.</summary>
            <param name="a">The matrix to be powered by.</param>
            <param name="b">The power to apply to the matrix.</param>
            <returns>The resulting matrix of the power operation.</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.op_ExclusiveOr(Towel.Mathematics.Matrix{`0},System.Int32)">
            <summary>Applies a power to a square matrix.</summary>
            <param name="a">The matrix to be powered by.</param>
            <param name="b">The power to apply to the matrix.</param>
            <returns>The resulting matrix of the power operation.</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Power(System.Int32,Towel.Mathematics.Matrix{`0}@)">
            <summary>Applies a power to a square matrix.</summary>
            <param name="b">The power to apply to the matrix.</param>
            <param name="c">The resulting matrix of the power operation.</param>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Power(System.Int32)">
            <summary>Applies a power to a square matrix.</summary>
            <param name="b">The power to apply to the matrix.</param>
            <returns>The resulting matrix of the power operation.</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Determinent(Towel.Mathematics.Matrix{`0})">
            <summary>Computes the determinent of a square matrix.</summary>
            <param name="a">The matrix to compute the determinent of.</param>
            <returns>The computed determinent.</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Determinent">
            <summary>Computes the determinent of a square matrix.</summary>
            <returns>The computed determinent.</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Trace(Towel.Mathematics.Matrix{`0})">
            <summary>Computes the trace of a square matrix.</summary>
            <param name="a">The matrix to compute the trace of.</param>
            <returns>The computed trace.</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Trace">
            <summary>Computes the trace of a square matrix.</summary>
            <returns>The computed trace.</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Minor(Towel.Mathematics.Matrix{`0},System.Int32,System.Int32,Towel.Mathematics.Matrix{`0}@)">
            <summary>Gets the minor of a matrix.</summary>
            <param name="a">The matrix to get the minor of.</param>
            <param name="row">The restricted row to form the minor.</param>
            <param name="column">The restricted column to form the minor.</param>
            <param name="b">The minor of the matrix.</param>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Minor(Towel.Mathematics.Matrix{`0},System.Int32,System.Int32)">
            <summary>Gets the minor of a matrix.</summary>
            <param name="a">The matrix to get the minor of.</param>
            <param name="row">The restricted row to form the minor.</param>
            <param name="column">The restricted column to form the minor.</param>
            <returns>The minor of the matrix.</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Minor(System.Int32,System.Int32,Towel.Mathematics.Matrix{`0}@)">
            <summary>Gets the minor of a matrix.</summary>
            <param name="row">The restricted row to form the minor.</param>
            <param name="column">The restricted column to form the minor.</param>
            <param name="b">The minor of the matrix.</param>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Minor(System.Int32,System.Int32)">
            <summary>Gets the minor of a matrix.</summary>
            <param name="row">The restricted row to form the minor.</param>
            <param name="column">The restricted column to form the minor.</param>
            <returns>The minor of the matrix.</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.ConcatenateRowWise(Towel.Mathematics.Matrix{`0},Towel.Mathematics.Matrix{`0},Towel.Mathematics.Matrix{`0}@)">
            <summary>Combines two matrices from left to right 
            (result.Rows = left.Rows AND result.Columns = left.Columns + right.Columns).</summary>
            <param name="a">The left matrix of the concatenation.</param>
            <param name="b">The right matrix of the concatenation.</param>
            <param name="c">The resulting matrix of the concatenation.</param>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.ConcatenateRowWise(Towel.Mathematics.Matrix{`0},Towel.Mathematics.Matrix{`0})">
            <summary>Combines two matrices from left to right 
            (result.Rows = left.Rows AND result.Columns = left.Columns + right.Columns).</summary>
            <param name="a">The left matrix of the concatenation.</param>
            <param name="b">The right matrix of the concatenation.</param>
            <returns>The resulting matrix of the concatenation.</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.ConcatenateRowWise(Towel.Mathematics.Matrix{`0},Towel.Mathematics.Matrix{`0}@)">
            <summary>Combines two matrices from left to right 
            (result.Rows = left.Rows AND result.Columns = left.Columns + right.Columns).</summary>
            <param name="b">The right matrix of the concatenation.</param>
            <param name="c">The resulting matrix of the concatenation.</param>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.ConcatenateRowWise(Towel.Mathematics.Matrix{`0})">
            <summary>Combines two matrices from left to right 
            (result.Rows = left.Rows AND result.Columns = left.Columns + right.Columns).</summary>
            <param name="b">The right matrix of the concatenation.</param>
            <returns>The resulting matrix of the concatenation.</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Echelon(Towel.Mathematics.Matrix{`0},Towel.Mathematics.Matrix{`0}@)">
            <summary>Calculates the echelon of a matrix (aka REF).</summary>
            <param name="a">The matrix to calculate the echelon of (aka REF).</param>
            <param name="b">The echelon of the matrix (aka REF).</param>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Echelon(Towel.Mathematics.Matrix{`0})">
            <summary>Calculates the echelon of a matrix (aka REF).</summary>
            <param name="a">The matrix to calculate the echelon of (aka REF).</param>
            <returns>The echelon of the matrix (aka REF).</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Echelon(Towel.Mathematics.Matrix{`0}@)">
            <summary>Calculates the echelon of a matrix (aka REF).</summary>
            <param name="b">The echelon of the matrix (aka REF).</param>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Echelon">
            <summary>Calculates the echelon of a matrix (aka REF).</summary>
            <returns>The echelon of the matrix (aka REF).</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.ReducedEchelon(Towel.Mathematics.Matrix{`0},Towel.Mathematics.Matrix{`0}@)">
            <summary>Calculates the echelon of a matrix and reduces it (aka RREF).</summary>
            <param name="a">The matrix matrix to calculate the reduced echelon of (aka RREF).</param>
            <param name="b">The reduced echelon of the matrix (aka RREF).</param>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.ReducedEchelon(Towel.Mathematics.Matrix{`0})">
            <summary>Calculates the echelon of a matrix and reduces it (aka RREF).</summary>
            <param name="a">The matrix matrix to calculate the reduced echelon of (aka RREF).</param>
            <returns>The reduced echelon of the matrix (aka RREF).</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.ReducedEchelon(Towel.Mathematics.Matrix{`0}@)">
            <summary>Calculates the echelon of a matrix and reduces it (aka RREF).</summary>
            <param name="b">The reduced echelon of the matrix (aka RREF).</param>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.ReducedEchelon">
            <summary>Matrixs the reduced echelon form of this matrix (aka RREF).</summary>
            <returns>The computed reduced echelon form of this matrix (aka RREF).</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Inverse(Towel.Mathematics.Matrix{`0},Towel.Mathematics.Matrix{`0}@)">
            <summary>Calculates the inverse of a matrix.</summary>
            <param name="a">The matrix to calculate the inverse of.</param>
            <param name="b">The inverse of the matrix.</param>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Inverse(Towel.Mathematics.Matrix{`0})">
            <summary>Calculates the inverse of a matrix.</summary>
            <param name="a">The matrix to calculate the inverse of.</param>
            <returns>The inverse of the matrix.</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Inverse">
            <summary>Matrixs the inverse of this matrix.</summary>
            <returns>The inverse of this matrix.</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Adjoint(Towel.Mathematics.Matrix{`0},Towel.Mathematics.Matrix{`0}@)">
            <summary>Calculates the adjoint of a matrix.</summary>
            <param name="a">The matrix to calculate the adjoint of.</param>
            <param name="b">The adjoint of the matrix.</param>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Adjoint(Towel.Mathematics.Matrix{`0})">
            <summary>Calculates the adjoint of a matrix.</summary>
            <param name="a">The matrix to calculate the adjoint of.</param>
            <returns>The adjoint of the matrix.</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Adjoint(Towel.Mathematics.Matrix{`0}@)">
            <summary>Calculates the adjoint of a matrix.</summary>
            <param name="b">The adjoint of the matrix.</param>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Adjoint">
            <summary>Calculates the adjoint of a matrix.</summary>
            <returns>The adjoint of the matrix.</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Transpose(Towel.Mathematics.Matrix{`0},Towel.Mathematics.Matrix{`0}@)">
            <summary>Returns the transpose of a matrix.</summary>
            <param name="a">The matrix to transpose.</param>
            <param name="b">The transpose of the matrix.</param>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Transpose(Towel.Mathematics.Matrix{`0})">
            <summary>Returns the transpose of a matrix.</summary>
            <param name="a">The matrix to transpose.</param>
            <returns>The transpose of the matrix.</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Transpose(Towel.Mathematics.Matrix{`0}@)">
            <summary>Returns the transpose of a matrix.</summary>
            <param name="b">The transpose of the matrix.</param>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Transpose">
            <summary>Returns the transpose of a matrix.</summary>
            <returns>The transpose of the matrix.</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.DecomposeLowerUpper(Towel.Mathematics.Matrix{`0},Towel.Mathematics.Matrix{`0}@,Towel.Mathematics.Matrix{`0}@)">
            <summary>Decomposes a matrix into lower-upper reptresentation.</summary>
            <param name="matrix">The matrix to decompose.</param>
            <param name="lower">The computed lower triangular matrix.</param>
            <param name="upper">The computed upper triangular matrix.</param>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.DecomposeLowerUpper(Towel.Mathematics.Matrix{`0}@,Towel.Mathematics.Matrix{`0}@)">
            <summary>Decomposes a matrix into lower-upper reptresentation.</summary>
            <param name="lower">The computed lower triangular matrix.</param>
            <param name="upper">The computed upper triangular matrix.</param>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Rotate4x4(Towel.Mathematics.Matrix{`0},Towel.Measurements.Angle{`0},Towel.Mathematics.Vector{`0})">
            <summary>Rotates a 4x4 matrix around an 3D axis by a specified angle.</summary>
            /// <param name="matrix">The 4x4 matrix to rotate.</param>
            <param name="angle">The angle of rotation around the axis.</param>
            <param name="axis">The 3D axis to rotate the matrix around.</param>
            <returns>The rotated matrix.</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Equal(Towel.Mathematics.Matrix{`0},Towel.Mathematics.Matrix{`0})">
            <summary>Does a value equality check.</summary>
            <param name="a">The first matrix to check for equality.</param>
            <param name="b">The second matrix to check for equality.</param>
            <returns>True if values are equal, false if not.</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.op_Equality(Towel.Mathematics.Matrix{`0},Towel.Mathematics.Matrix{`0})">
            <summary>Does a value equality check.</summary>
            <param name="a">The first matrix to check for equality.</param>
            <param name="b">The second matrix to check for equality.</param>
            <returns>True if values are equal, false if not.</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.op_Inequality(Towel.Mathematics.Matrix{`0},Towel.Mathematics.Matrix{`0})">
            <summary>Does a value non-equality check.</summary>
            <param name="a">The first matrix to check for non-equality.</param>
            <param name="b">The second matrix to check for non-equality.</param>
            <returns>True if values are not equal, false if not.</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Equal(Towel.Mathematics.Matrix{`0})">
            <summary>Does a value equality check.</summary>
            <param name="b">The second matrix to check for equality.</param>
            <returns>True if values are equal, false if not.</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Equal(Towel.Mathematics.Matrix{`0},Towel.Mathematics.Matrix{`0},`0)">
            <summary>Does a value equality check with leniency.</summary>
            <param name="a">The first matrix to check for equality.</param>
            <param name="b">The second matrix to check for equality.</param>
            <param name="leniency">How much the values can vary but still be considered equal.</param>
            <returns>True if values are equal, false if not.</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Equal(Towel.Mathematics.Matrix{`0},`0)">
            <summary>Does a value equality check with leniency.</summary>
            <param name="b">The second matrix to check for equality.</param>
            <param name="leniency">How much the values can vary but still be considered equal.</param>
            <returns>True if values are equal, false if not.</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Clone(Towel.Mathematics.Matrix{`0})">
            <summary>Creates a copy of a matrix.</summary>
            <param name="a">The matrix to copy.</param>
            <returns>The copy of this matrix.</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Clone">
            <summary>Copies this matrix.</summary>
            <returns>The copy of this matrix.</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.op_Explicit(`0[0:,0:])~Towel.Mathematics.Matrix{`0}">
            <summary>Converts a T[,] into a matrix.</summary>
            <param name="a">The T[,] to convert to a matrix.</param>
            <returns>The resulting matrix after conversion.</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.op_Explicit(Towel.Mathematics.Matrix{`0})~`0[0:,0:]">
            <summary>Converts a matrix into a T[,].</summary>
            <param name="a">The matrix toconvert to a T[,].</param>
            <returns>The resulting T[,] after conversion.</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Stepper(Towel.Step{`0})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="step">The delegate to invoke on each item in the structure.</param>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Stepper(Towel.StepRef{`0})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="step">The delegate to invoke on each item in the structure.</param>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Stepper(Towel.StepBreak{`0})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="step">The delegate to invoke on each item in the structure.</param>
            <returns>The resulting status of the iteration.</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Stepper(Towel.StepRefBreak{`0})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="step">The delegate to invoke on each item in the structure.</param>
            <returns>The resulting status of the iteration.</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.ToString">
            <summary>Prints out a string representation of this matrix.</summary>
            <returns>A string representing this matrix.</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.GetHashCode">
            <summary>Matrixs a hash code from the values of this matrix.</summary>
            <returns>A hash code for the matrix.</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Equals(System.Object)">
            <summary>Does an equality check by value.</summary>
            <param name="b">The object to compare to.</param>
            <returns>True if the references are equal, false if not.</returns>
        </member>
        <member name="T:Towel.Mathematics.Quaternion`1">
            <summary>Standard 4-component quaternion [x, y, z, w]. W is the rotation ammount.</summary>
            <typeparam name="T">The numeric type of this Quaternion.</typeparam>
        </member>
        <member name="P:Towel.Mathematics.Quaternion`1.Identity">
            <summary>Returns an identity quaternion (no rotation).</summary>
        </member>
        <member name="P:Towel.Mathematics.Quaternion`1.X">
            <summary>The X component of the quaternion. (axis, NOT rotation ammount)</summary>
        </member>
        <member name="P:Towel.Mathematics.Quaternion`1.Y">
            <summary>The Y component of the quaternion. (axis, NOT rotation ammount)</summary>
        </member>
        <member name="P:Towel.Mathematics.Quaternion`1.Z">
            <summary>The Z component of the quaternion. (axis, NOT rotation ammount)</summary>
        </member>
        <member name="P:Towel.Mathematics.Quaternion`1.W">
            <summary>The W component of the quaternion. (rotation ammount, NOT axis)</summary>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.#ctor(`0,`0,`0,`0)">
            <summary>Constructs a quaternion.</summary>
            <param name="x">The x component of the quaternion.</param>
            <param name="y">The y component of the quaternion.</param>
            <param name="z">The z component of the quaternion.</param>
            <param name="w">The w component of the quaternion.</param>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.GetHasZeroMagnitude(Towel.Mathematics.Quaternion{`0})">
            <summary>Checks quaternion for zero magnitude.</summary>
            <param name="a">The quaternion to check for zero magnitude.</param>
            <returns>True if the quaternion has zero magnitude. False if not.</returns>
        </member>
        <member name="P:Towel.Mathematics.Quaternion`1.HasZeroMagnitude">
            <summary>Checks quaternion for zero magnitude.</summary>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.GetMagnitude(Towel.Mathematics.Quaternion{`0})">
            <summary>Computes the magnitude of this quaternion.</summary>
            <returns>The magnitude of this quaternion.</returns>
        </member>
        <member name="P:Towel.Mathematics.Quaternion`1.Magnitude">
            <summary>Computes the magnitude of this quaternion.</summary>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.GetMagnitudeSquared(Towel.Mathematics.Quaternion{`0})">
            <summary>Computes the magnitude of this quaternion, but doesn't square root it for 
            possible optimization purposes.</summary>
            <returns>The squared length of the quaternion.</returns>
        </member>
        <member name="P:Towel.Mathematics.Quaternion`1.MagnitudeSquared">
            <summary>Computes the magnitude of this quaternion, but doesn't square root it for 
            possible optimization purposes.</summary>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.Add(Towel.Mathematics.Quaternion{`0},Towel.Mathematics.Quaternion{`0},Towel.Mathematics.Quaternion{`0}@)">
            <summary>Adds two quaternions together.</summary>
            <param name="a">The first quaternion of the addition.</param>
            <param name="b">The second quaternion of the addiiton.</param>
            <param name="c">The result of the addition.</param>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.Add(Towel.Mathematics.Quaternion{`0},Towel.Mathematics.Quaternion{`0})">
            <summary>Adds two quaternions together.</summary>
            <param name="a">The first vector of the addition.</param>
            <param name="b">The second vector of the addiiton.</param>
            <returns>The result of the addition.</returns>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.op_Addition(Towel.Mathematics.Quaternion{`0},Towel.Mathematics.Quaternion{`0})">
            <summary>Adds two quaternions together.</summary>
            <param name="a">The first quaternion of the addition.</param>
            <param name="b">The second quaternion of the addition.</param>
            <returns>The result of the addition.</returns>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.Add(Towel.Mathematics.Quaternion{`0},Towel.Mathematics.Quaternion{`0}@)">
            <summary>Adds two quaternions together.</summary>
            <param name="b">The second quaternion of the addititon.</param>
            <param name="c">The result of the addition.</param>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.Add(Towel.Mathematics.Quaternion{`0})">
            <summary>Adds two quaternions together.</summary>
            <param name="b">The quaternion to add to this one.</param>
            <returns>The result of the addition.</returns>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.Subtract(Towel.Mathematics.Quaternion{`0},Towel.Mathematics.Quaternion{`0},Towel.Mathematics.Quaternion{`0}@)">
            <summary>Subtracts two quaternions.</summary>
            <param name="a">The first quaternion of the subtraction.</param>
            <param name="b">The second quaternion of the subtraction.</param>
            <param name="c">The result of the subtraction.</param>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.Subtract(Towel.Mathematics.Quaternion{`0},Towel.Mathematics.Quaternion{`0})">
            <summary>Subtracts two quaternions.</summary>
            <param name="a">The first vector of the subtraction.</param>
            <param name="b">The second vector of the subtraction.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.op_Subtraction(Towel.Mathematics.Quaternion{`0},Towel.Mathematics.Quaternion{`0})">
            <summary>Subtracts two quaternions.</summary>
            <param name="a">The first quaternion of the subtraction.</param>
            <param name="b">The second quaternion of the subtraction.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.Subtract(Towel.Mathematics.Quaternion{`0},Towel.Mathematics.Quaternion{`0}@)">
            <summary>Subtracts two quaternions.</summary>
            <param name="b">The second quaternion of the subtraction.</param>
            <param name="c">The result of the subtraction.</param>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.Subtract(Towel.Mathematics.Quaternion{`0})">
            <summary>Subtracts two quaternions together.</summary>
            <param name="b">The second quaternion of the subtraction.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.Multiply(Towel.Mathematics.Quaternion{`0},Towel.Mathematics.Quaternion{`0},Towel.Mathematics.Quaternion{`0}@)">
            <summary>Multiplies two quaternions.</summary>
            <param name="a">The first quaternion of the multiplication.</param>
            <param name="b">The second quaternion of the multiplication.</param>
            <param name="c">The resulting quaternion after the multiplication.</param>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.Multiply(Towel.Mathematics.Quaternion{`0},Towel.Mathematics.Quaternion{`0})">
            <summary>Multiplies two quaternions.</summary>
            <param name="a">The first quaternion of the multiplication.</param>
            <param name="b">The second quaternion of the multiplication.</param>
            <returns>The resulting quaternion after the multiplication.</returns>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.op_Multiply(Towel.Mathematics.Quaternion{`0},Towel.Mathematics.Quaternion{`0})">
            <summary>Multiplies two quaternions.</summary>
            <param name="a">The first quaternion of the multiplication.</param>
            <param name="b">The second quaternion of the multiplication.</param>
            <returns>The resulting quaternion after the multiplication.</returns>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.Multiply(Towel.Mathematics.Quaternion{`0},Towel.Mathematics.Quaternion{`0}@)">
            <summary>Multiplies two quaternions.</summary>
            <param name="b">The second quaternion of the multiplication.</param>
            <param name="c">The resulting quaternion after the multiplication.</param>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.Multiply(Towel.Mathematics.Quaternion{`0})">
            <summary>Multiplies two quaternions.</summary>
            <param name="b">The second quaternion of the multiplication.</param>
            <returns>The resulting quaternion after the multiplication.</returns>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.Multiply(Towel.Mathematics.Quaternion{`0},Towel.Mathematics.Vector{`0},Towel.Mathematics.Quaternion{`0}@)">
            <summary>Multiplies a quaternion and a vector.</summary>
            <param name="a">The quaternion of the multiplication.</param>
            <param name="b">The vector of the multiplication.</param>
            <param name="c">The resulting quaternion after the multiplication.</param>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.Multiply(Towel.Mathematics.Quaternion{`0},Towel.Mathematics.Vector{`0})">
            <summary>Multiplies a quaternion and a vector.</summary>
            <param name="a">The quaternion of the multiplication.</param>
            <param name="b">The vector of the multiplication.</param>
            <returns>The resulting quaternion after the multiplication.</returns>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.op_Multiply(Towel.Mathematics.Quaternion{`0},Towel.Mathematics.Vector{`0})">
            <summary>Multiplies a quaternion and a vector.</summary>
            <param name="a">The quaternion of the multiplication.</param>
            <param name="b">The vector of the multiplication.</param>
            <returns>The resulting quaternion after the multiplication.</returns>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.Multiply(Towel.Mathematics.Vector{`0},Towel.Mathematics.Quaternion{`0}@)">
            <summary>Multiplies a quaternion and a vector.</summary>
            <param name="b">The vector of the multiplication.</param>
            <param name="c">The resulting quaternion after the multiplication.</param>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.Multiply(Towel.Mathematics.Vector{`0})">
            <summary>Multiplies a quaternion and a vector.</summary>
            <param name="b">The vector of the multiplication.</param>
            <returns>The resulting quaternion after the multiplication.</returns>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.Multiply(Towel.Mathematics.Quaternion{`0},`0,Towel.Mathematics.Quaternion{`0}@)">
            <summary>Multiplies all the values in a quaternion by a scalar.</summary>
            <param name="a">The quaternion to have the values multiplied.</param>
            <param name="b">The scalar to multiply the values by.</param>
            <param name="c">The resulting quaternion after the multiplications.</param>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.Multiply(Towel.Mathematics.Quaternion{`0},`0)">
            <summary>Multiplies all the values in a matrix by a scalar.</summary>
            <param name="a">The matrix to have the values multiplied.</param>
            <param name="b">The scalar to multiply the values by.</param>
            <returns>The resulting quaternion after the multiplications.</returns>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.Multiply(`0,Towel.Mathematics.Quaternion{`0})">
            <summary>Multiplies all the values in a matrix by a scalar.</summary>
            <param name="b">The scalar to multiply the values by.</param>
            <param name="a">The quaternion to have the values multiplied.</param>
            <returns>The resulting quaternion after the multiplications.</returns>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.op_Multiply(Towel.Mathematics.Quaternion{`0},`0)">
            <summary>Multiplies all the values in a matrix by a scalar.</summary>
            <param name="a">The quaternion to have the values multiplied.</param>
            <param name="b">The scalar to multiply the values by.</param>
            <returns>The resulting quaternion after the multiplications.</returns>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.op_Multiply(`0,Towel.Mathematics.Quaternion{`0})">
            <summary>Multiplies all the values in a matrix by a scalar.</summary>
            <param name="b">The scalar to multiply the values by.</param>
            <param name="a">The quaternion to have the values multiplied.</param>
            <returns>The resulting quaternion after the multiplications.</returns>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.Multiply(`0,Towel.Mathematics.Quaternion{`0}@)">
            <summary>Multiplies all the values in a matrix by a scalar.</summary>
            <param name="b">The scalar to multiply the values by.</param>
            <param name="c">The resulting quaternion after the multiplications.</param>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.Multiply(`0)">
            <summary>Multiplies all the values in a matrix by a scalar.</summary>
            <param name="b">The scalar to multiply the values by.</param>
            <returns>The resulting matrix after the multiplications.</returns>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.Rotate(Towel.Mathematics.Quaternion{`0},Towel.Mathematics.Vector{`0},Towel.Mathematics.Vector{`0}@)">
            <summary>Rotates a vector by a quaternion rotation [v' = qvq'].</summary>
            <param name="a">The quaternion rotation to rotate the vector by.</param>
            <param name="b">The vector to rotate.</param>
            <param name="c">The result of the rotation.</param>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.Rotate(Towel.Mathematics.Quaternion{`0},Towel.Mathematics.Vector{`0})">
            <summary>Rotates a vector by a quaternion rotation [v' = qvq'].</summary>
            <param name="a">The quaternion rotation to rotate the vector by.</param>
            <param name="b">The vector to rotate.</param>
            <returns>The result of the rotation.</returns>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.Rotate(Towel.Mathematics.Vector{`0},Towel.Mathematics.Vector{`0}@)">
            <summary>Rotates a vector by a quaternion rotation [v' = qvq'].</summary>
            <param name="b">The vector to rotate.</param>
            <param name="c">The result of the rotation.</param>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.Rotate(Towel.Mathematics.Vector{`0})">
            <summary>Rotates a vector by a quaternion rotation [v' = qvq'].</summary>
            <param name="b">The vector to rotate.</param>
            <returns>The result of the rotation.</returns>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.Conjugate(Towel.Mathematics.Quaternion{`0},Towel.Mathematics.Quaternion{`0}@)">
            <summary>Conjugates a quaternion.</summary>
            <param name="a">The quaternion to conjugate.</param>
            <param name="b">The result of the conjugation.</param>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.Conjugate(Towel.Mathematics.Quaternion{`0})">
            <summary>Conjugates a quaternion.</summary>
            <param name="a">The quaternion to conjugate.</param>
            <returns>The result of the conjugation.</returns>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.Conjugate(Towel.Mathematics.Quaternion{`0}@)">
            <summary>Conjugates a quaternion.</summary>
            <param name="b">The result of the conjugation.</param>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.Conjugate">
            <summary>Conjugates a quaternion.</summary>
            <returns>The result of the conjugation.</returns>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.Normalize(Towel.Mathematics.Quaternion{`0},Towel.Mathematics.Quaternion{`0}@)">
            <summary>Normalizes a quaternion.</summary>
            <param name="a">The quaternion to normalize.</param>
            <param name="b">The result of the normalization.</param>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.Normalize(Towel.Mathematics.Quaternion{`0})">
            <summary>Normalizes a quaternion.</summary>
            <param name="a">The quaternion to normalize.</param>
            <returns>The result of the normalization.</returns>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.Normalize(Towel.Mathematics.Quaternion{`0}@)">
            <summary>Normalizes a quaternion.</summary>
            <param name="a">The quaternion to normalize.</param>
            <param name="b">The result of the normalization.</param>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.Normalize">
            <summary>Normalizes a quaternion.</summary>
            <param name="a">The quaternion to normalize.</param>
            <returns>The result of the normalization.</returns>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.Invert(Towel.Mathematics.Quaternion{`0},Towel.Mathematics.Quaternion{`0}@)">
            <summary>Inverts a quaternion.</summary>
            <param name="a">The quaternion to invert.</param>
            <param name="b">The result of the inversion.</param>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.Invert(Towel.Mathematics.Quaternion{`0})">
            <summary>Inverts a quaternion.</summary>
            <param name="a">The quaternion to invert.</param>
            <returns>The result of the inversion.</returns>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.Invert(Towel.Mathematics.Quaternion{`0}@)">
            <summary>Inverts a quaternion.</summary>
            <param name="b">The result of the inversion.</param>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.Invert">
            <summary>Inverts a quaternion.</summary>
            <returns>The result of the inversion.</returns>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.LinearInterpolation(Towel.Mathematics.Quaternion{`0},Towel.Mathematics.Quaternion{`0},`0,Towel.Mathematics.Quaternion{`0}@)">
            <summary>Linear interpolation for quaternions.</summary>
            <param name="a">The min of the interpolation.</param>
            <param name="b">The max of the interpolation.</param>
            <param name="blend">The blending point of the interpolation.</param>
            <param name="c">The result of the linear interpolation.</param>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.LinearInterpolation(Towel.Mathematics.Quaternion{`0},Towel.Mathematics.Quaternion{`0},`0)">
            <summary>Linear interpolation for quaternions.</summary>
            <param name="a">The min of the interpolation.</param>
            <param name="b">The max of the interpolation.</param>
            <param name="blend">The blending point of the interpolation.</param>
            <returns>The result of the linear interpolation.</returns>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.LinearInterpolation(Towel.Mathematics.Quaternion{`0},`0,Towel.Mathematics.Quaternion{`0}@)">
            <summary>Linear interpolation for quaternions.</summary>
            <param name="b">The max of the interpolation.</param>
            <param name="blend">The blending point of the interpolation.</param>
            <param name="c">The result of the linear interpolation.</param>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.LinearInterpolation(Towel.Mathematics.Quaternion{`0},`0)">
            <summary>Linear interpolation for quaternions.</summary>
            <param name="b">The max of the interpolation.</param>
            <param name="blend">The blending point of the interpolation.</param>
            <returns>The result of the linear interpolation.</returns>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.SphericalInterpolation(Towel.Mathematics.Quaternion{`0},Towel.Mathematics.Quaternion{`0},`0,Towel.Mathematics.Quaternion{`0}@)">
            <summary>Spherical interpolation for quaternions.</summary>
            <param name="a">The min of the interpolation.</param>
            <param name="b">The max of the interpolation.</param>
            <param name="blend">The blending point of the interpolation.</param>
            <param name="c">The result of the spherical interpolation.</param>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.SphericalInterpolation(Towel.Mathematics.Quaternion{`0},Towel.Mathematics.Quaternion{`0},`0)">
            <summary>Spherical interpolation for quaternions.</summary>
            <param name="a">The min of the interpolation.</param>
            <param name="b">The max of the interpolation.</param>
            <param name="blend">The blending point of the interpolation.</param>
            <returns>The result of the spherical interpolation.</returns>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.SphericalInterpolation(Towel.Mathematics.Quaternion{`0},`0,Towel.Mathematics.Quaternion{`0}@)">
            <summary>Spherical interpolation for quaternions.</summary>
            <param name="b">The max of the interpolation.</param>
            <param name="blend">The blending point of the interpolation.</param>
            <param name="c">The result of the spherical interpolation.</param>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.SphericalInterpolation(Towel.Mathematics.Quaternion{`0},`0)">
            <summary>Spherical interpolation for quaternions.</summary>
            <param name="b">The max of the interpolation.</param>
            <param name="blend">The blending point of the interpolation.</param>
            <returns>The result of the spherical interpolation.</returns>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.ToMatrix3x3(Towel.Mathematics.Quaternion{`0})">
            <summary>Converts a quaternion into a 3x3 matrix.</summary>
            <param name="quaternion">The quaternion of the conversion.</param>
            <returns>The resulting 3x3 matrix.</returns>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.Equal(Towel.Mathematics.Quaternion{`0},Towel.Mathematics.Quaternion{`0})">
            <summary>Does a value equality check.</summary>
            <param name="a">The first quaternion to check for equality.</param>
            <param name="b">The second quaternion to check for equality.</param>
            <returns>True if values are equal, false if not.</returns>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.op_Equality(Towel.Mathematics.Quaternion{`0},Towel.Mathematics.Quaternion{`0})">
            <summary>Does a value equality check.</summary>
            <param name="a">The first quaternion to check for equality.</param>
            <param name="b">The second quaternion to check for equality.</param>
            <returns>True if values are equal, false if not.</returns>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.op_Inequality(Towel.Mathematics.Quaternion{`0},Towel.Mathematics.Quaternion{`0})">
            <summary>Does a value non-equality check.</summary>
            <param name="a">The first quaternion to check for non-equality.</param>
            <param name="b">The second quaternion to check for non-equality.</param>
            <returns>True if values are not equal, false if not.</returns>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.Equal(Towel.Mathematics.Quaternion{`0})">
            <summary>Does a value equality check.</summary>
            <param name="b">The second quaternion to check for equality.</param>
            <returns>True if values are equal, false if not.</returns>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.Equal(Towel.Mathematics.Quaternion{`0},Towel.Mathematics.Quaternion{`0},`0)">
            <summary>Does a value equality check with leniency.</summary>
            <param name="a">The first quaternion to check for equality.</param>
            <param name="b">The second quaternion to check for equality.</param>
            <param name="leniency">How much the values can vary but still be considered equal.</param>
            <returns>True if values are equal, false if not.</returns>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.Equal(Towel.Mathematics.Quaternion{`0},`0)">
            <summary>Does a value equality check with leniency.</summary>
            <param name="b">The second quaternion to check for equality.</param>
            <param name="leniency">How much the values can vary but still be considered equal.</param>
            <returns>True if values are equal, false if not.</returns>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.Clone(Towel.Mathematics.Quaternion{`0})">
            <summary>Creates a copy of a quaternion.</summary>
            <param name="a">The quaternion to copy.</param>
            <returns>The copy of this quaternion.</returns>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.Clone">
            <summary>Copies this matrix.</summary>
            <returns>The copy of this matrix.</returns>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.ToString">
            <summary>Converts the quaternion into a string.</summary>
            <returns>The resulting string after the conversion.</returns>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.GetHashCode">
            <summary>Computes a hash code from the values in this quaternion.</summary>
            <returns>The computed hash code.</returns>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.Equals(System.Object)">
            <summary>Does a reference equality check.</summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="T:Towel.Mathematics.Symbolics">
            <summary>Contains definitions necessary for the generic Symbolics class.</summary>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.ParseAndSimplifyToConstant``1(System.String,Towel.Mathematics.Symbolics.TryParseNumeric{``0})">
            <summary>Parses a symbolic methematics expression with the assumption that it will simplify to a constant.</summary>
            <typeparam name="T">The generic numerical type to recieve as the outputted type.</typeparam>
            <param name="string">The string to be parse.</param>
            <param name="tryParsingFunction">A function for parsing numerical values into the provided generic type.</param>
            <returns>The parsed expression simplified down to a constant value.</returns>
        </member>
        <member name="T:Towel.Mathematics.Symbolics.TryParseNumeric`1">
            <summary>A try-parsing function to parse a string that represents a numerical value.</summary>
            <typeparam name="T">The type that the numeric value will be parsed into.</typeparam>
            <param name="string">The string to parse.</param>
            <param name="parsedValue">The parsed numeric value if successful.</param>
            <returns>Whether or not the parsing attempt was successful or not.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Parse``1(System.String,Towel.Mathematics.Symbolics.TryParseNumeric{``0})">
            <summary>Parses a string into a Towel.Mathematics.Symbolics expression tree.</summary>
            <typeparam name="T">The type to convert any constants into (ex: float, double, etc).</typeparam>
            <param name="string">The expression string to parse.</param>
            <param name="parsingFunction">A parsing function for the provided generic type. This is optional, but highly recommended.</param>
            <returns>The parsed Towel.Mathematics.Symbolics expression tree.</returns>
        </member>
        <member name="T:Towel.Mathematics.Vector`1">
            <summary>Represents a vector with an arbitrary number of components of a generic type.</summary>
            <typeparam name="T">The numeric type of this Vector.</typeparam>
        </member>
        <member name="P:Towel.Mathematics.Vector`1.X">
            <summary>Index 0</summary>
        </member>
        <member name="P:Towel.Mathematics.Vector`1.Y">
            <summary>Index 1</summary>
        </member>
        <member name="P:Towel.Mathematics.Vector`1.Z">
            <summary>Index 2</summary>
        </member>
        <member name="P:Towel.Mathematics.Vector`1.Dimensions">
            <summary>The number of components in this vector.</summary>
        </member>
        <member name="P:Towel.Mathematics.Vector`1.Item(System.Int32)">
            <summary>Allows indexed access to this vector.</summary>
            <param name="index">The index to access.</param>
            <returns>The value of the given index.</returns>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.#ctor(System.Int32)">
            <summary>Creates a new vector with the given number of components.</summary>
            <param name="dimensions">The number of dimensions this vector will have.</param>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.#ctor(`0[])">
            <summary>Creates a vector out of the given values.</summary>
            <param name="vector">The values to initialize the vector to.</param>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.#ctor(System.Int32,System.Func{System.Int32,`0})">
            <summary>Creates a new vector and initializes it via function.</summary>
            <param name="dimensions">The number of dimensions of the vector to construct.</param>
            <param name="function">The function to initialize the values of the vector.</param>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.FactoryZero(System.Int32)">
            <summary>Creates a vector with the given number of components with the values initialized to zeroes.</summary>
            <param name="dimensions">The number of components in the vector.</param>
            <returns>The newly constructed vector.</returns>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.FactoryOne(System.Int32)">
            <summary>Creates a vector with the given number of components with the values initialized to ones.</summary>
            <param name="dimensions">The number of components in the vector.</param>
            <returns>The newly constructed vector.</returns>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.GetMagnitude(Towel.Mathematics.Vector{`0})">
            <summary>Computes the length of this vector.</summary>
            <returns>The length of this vector.</returns>
        </member>
        <member name="P:Towel.Mathematics.Vector`1.Magnitude">
            <summary>Computes the length of this vector.</summary>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.GetMagnitudeSquared(Towel.Mathematics.Vector{`0})">
            <summary>Computes the length of this vector, but doesn't square root it for 
            possible optimization purposes.</summary>
            <returns>The squared length of the vector.</returns>
        </member>
        <member name="P:Towel.Mathematics.Vector`1.MagnitudeSquared">
            <summary>Computes the length of this vector, but doesn't square root it for 
            possible optimization purposes.</summary>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.Negate(Towel.Mathematics.Vector{`0},Towel.Mathematics.Vector{`0}@)">
            <summary>Negates all the values in a vector.</summary>
            <param name="a">The vector to have its values negated.</param>
            <param name="b">The result of the negations.</param>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.Negate(Towel.Mathematics.Vector{`0})">
            <summary>Negates all the values in a vector.</summary>
            <param name="a">The vector to have its values negated.</param>
            <returns>The result of the negations.</returns>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.op_UnaryNegation(Towel.Mathematics.Vector{`0})">
            <summary>Negates a vector.</summary>
            <param name="vector">The vector to negate.</param>
            <returns>The result of the negation.</returns>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.Negate(Towel.Mathematics.Vector{`0}@)">
            <summary>Negates all the values in a vector.</summary>
            <param name="b">The result of the negations.</param>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.Negate">
            <summary>Negates this vector.</summary>
            <returns>The result of the negation.</returns>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.Add(Towel.Mathematics.Vector{`0},Towel.Mathematics.Vector{`0},Towel.Mathematics.Vector{`0}@)">
            <summary>Adds two vectors together.</summary>
            <param name="a">The first vector of the addition.</param>
            <param name="b">The second vector of the addiiton.</param>
            <param name="c">The result of the addition.</param>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.Add(Towel.Mathematics.Vector{`0},Towel.Mathematics.Vector{`0})">
            <summary>Adds two vectors together.</summary>
            <param name="a">The first vector of the addition.</param>
            <param name="b">The second vector of the addiiton.</param>
            <returns>The result of the addition.</returns>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.op_Addition(Towel.Mathematics.Vector{`0},Towel.Mathematics.Vector{`0})">
            <summary>Adds two vectors together.</summary>
            <param name="a">The first vector of the addition.</param>
            <param name="b">The second vector of the addition.</param>
            <returns>The result of the addition.</returns>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.Add(Towel.Mathematics.Vector{`0},Towel.Mathematics.Vector{`0}@)">
            <summary>Adds two vectors together.</summary>
            <param name="b">The second vector of the addition.</param>
            <param name="c">The result of the addition.</param>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.Add(Towel.Mathematics.Vector{`0})">
            <summary>Adds two vectors together.</summary>
            <param name="b">The vector to add to this one.</param>
            <returns>The result of the addition.</returns>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.Subtract(Towel.Mathematics.Vector{`0},Towel.Mathematics.Vector{`0},Towel.Mathematics.Vector{`0}@)">
            <summary>Subtracts two vectors.</summary>
            <param name="a">The left vector of the subtraction.</param>
            <param name="b">The right vector of the subtraction.</param>
            <param name="c">The result of the vector subtracton.</param>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.Subtract(Towel.Mathematics.Vector{`0},Towel.Mathematics.Vector{`0})">
            <summary>Subtracts two vectors.</summary>
            <param name="a">The left vector of the subtraction.</param>
            <param name="b">The right vector of the subtraction.</param>
            <returns>The result of the vector subtracton.</returns>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.op_Subtraction(Towel.Mathematics.Vector{`0},Towel.Mathematics.Vector{`0})">
            <summary>Subtracts two vectors.</summary>
            <param name="a">The left operand of the subtraction.</param>
            <param name="b">The right operand of the subtraction.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.Subtract(Towel.Mathematics.Vector{`0},Towel.Mathematics.Vector{`0}@)">
            <summary>Subtracts two vectors.</summary>
            <param name="b">The right vector of the subtraction.</param>
            <param name="c">The result of the vector subtracton.</param>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.Subtract(Towel.Mathematics.Vector{`0})">
            <summary>Subtracts another vector from this one.</summary>
            <param name="b">The vector to subtract from this one.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.Multiply(Towel.Mathematics.Vector{`0},`0,Towel.Mathematics.Vector{`0}@)">
            <summary>Multiplies all the values in a vector by a scalar.</summary>
            <param name="a">The vector to have all its values multiplied.</param>
            <param name="b">The scalar to multiply all the vector values by.</param>
            <param name="c">The result of the multiplication.</param>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.Multiply(Towel.Mathematics.Vector{`0},`0)">
            <summary>Multiplies all the values in a vector by a scalar.</summary>
            <param name="a">The vector to have all its values multiplied.</param>
            <param name="b">The scalar to multiply all the vector values by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.op_Multiply(Towel.Mathematics.Vector{`0},`0)">
            <summary>Multiplies all the values in a vector by a scalar.</summary>
            <param name="a">The vector to have all its values multiplied.</param>
            <param name="b">The scalar to multiply all the vector values by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.op_Multiply(`0,Towel.Mathematics.Vector{`0})">
            <summary>Multiplies all the values in a vector by a scalar.</summary>
            <param name="a">The scalar to multiply all the vector values by.</param>
            <param name="b">The vector to have all its values multiplied.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.Multiply(`0,Towel.Mathematics.Vector{`0}@)">
            <summary>Multiplies all the values in a vector by a scalar.</summary>
            <param name="b">The scalar to multiply all the vector values by.</param>
            <param name="c">The result of the multiplication.</param>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.Multiply(`0)">
            <summary>Multiplies the values in this vector by a scalar.</summary>
            <param name="b">The scalar to multiply these values by.</param>
            <returns>The result of the multiplications</returns>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.Divide(Towel.Mathematics.Vector{`0},`0,Towel.Mathematics.Vector{`0}@)">
            <summary>Divides all the components of a vector by a scalar.</summary>
            <param name="a">The vector to have the components divided by.</param>
            <param name="b">The scalar to divide the vector components by.</param>
            <param name="c">The resulting vector after teh divisions.</param>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.Divide(Towel.Mathematics.Vector{`0},`0)">
            <summary>Divides all the components of a vector by a scalar.</summary>
            <param name="a">The vector to have the components divided by.</param>
            <param name="b">The scalar to divide the vector components by.</param>
            <returns>The resulting vector after teh divisions.</returns>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.op_Division(Towel.Mathematics.Vector{`0},`0)">
            <summary>Divides all the values in the vector by a scalar.</summary>
            <param name="a">The vector to have its values divided.</param>
            <param name="b">The scalar to divide all the vectors values by.</param>
            <returns>The vector after the divisions.</returns>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.Divide(`0,Towel.Mathematics.Vector{`0}@)">
            <summary>Divides all the components of a vector by a scalar.</summary>
            <param name="b">The scalar to divide the vector components by.</param>
            <param name="c">The resulting vector after teh divisions.</param>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.Divide(`0)">
            <summary>Divides all the values in this vector by a scalar.</summary>
            <param name="b">The scalar to divide the values of the vector by.</param>
            <returns>The resulting vector after teh divisions.</returns>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.DotProduct(Towel.Mathematics.Vector{`0},Towel.Mathematics.Vector{`0})">
            <summary>Computes the dot product between two vectors.</summary>
            <param name="a">The first vector of the dot product operation.</param>
            <param name="b">The second vector of the dot product operation.</param>
            <returns>The result of the dot product operation.</returns>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.DotProduct(Towel.Mathematics.Vector{`0})">
            <summary>Computes the dot product between this vector and another.</summary>
            <param name="right">The second vector of the dot product operation.</param>
            <returns>The result of the dot product.</returns>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.CrossProduct(Towel.Mathematics.Vector{`0},Towel.Mathematics.Vector{`0},Towel.Mathematics.Vector{`0}@)">
            <summary>Computes teh cross product of two vectors.</summary>
            <param name="a">The first vector of the cross product operation.</param>
            <param name="b">The second vector of the cross product operation.</param>
            <param name="c">The result of the cross product operation.</param>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.CrossProduct(Towel.Mathematics.Vector{`0},Towel.Mathematics.Vector{`0})">
            <summary>Computes teh cross product of two vectors.</summary>
            <param name="a">The first vector of the cross product operation.</param>
            <param name="b">The second vector of the cross product operation.</param>
            <returns>The result of the cross product operation.</returns>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.CrossProduct(Towel.Mathematics.Vector{`0},Towel.Mathematics.Vector{`0}@)">
            <summary>Computes teh cross product of two vectors.</summary>
            <param name="b">The second vector of the cross product operation.</param>
            <param name="c">The result of the cross product operation.</param>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.CrossProduct(Towel.Mathematics.Vector{`0})">
            <summary>Computes teh cross product of two vectors.</summary>
            <param name="b">The second vector of the dot product operation.</param>
            <returns>The result of the dot product operation.</returns>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.Normalize(Towel.Mathematics.Vector{`0},Towel.Mathematics.Vector{`0}@)">
            <summary>Normalizes a vector.</summary>
            <param name="a">The vector to normalize.</param>
            <param name="b">The result of the normalization.</param>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.Normalize(Towel.Mathematics.Vector{`0})">
            <summary>Normalizes a vector.</summary>
            <param name="a">The vector to normalize.</param>
            <returns>The result of the normalization.</returns>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.Normalize(Towel.Mathematics.Vector{`0}@)">
            <summary>Normalizes a vector.</summary>
            <param name="b">The result of the normalization.</param>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.Normalize">
            <summary>Normalizes this vector.</summary>
            <returns>The result of the normalization.</returns>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.Angle(Towel.Mathematics.Vector{`0},Towel.Mathematics.Vector{`0},Towel.Mathematics.MathematicsDelegates.InverseCosine{`0})">
            <summary>Computes the angle between two vectors.</summary>
            <param name="a">The first vector to determine the angle between.</param>
            <param name="b">The second vector to determine the angle between.</param>
            <param name="arccos">A delegate for how to compute the inverse of a cosine ratio.</param>
            <returns>The angle between the two vectors in radians.</returns>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.Angle(Towel.Mathematics.Vector{`0},Towel.Mathematics.MathematicsDelegates.InverseCosine{`0})">
            <summary>Computes the angle between two vectors.</summary>
            <param name="b">The second vector to determine the angle between.</param>
            <param name="arccos">A delegate for how to compute the inverse of a cosine ratio.</param>
            <returns>The angle between the two vectors in radians.</returns>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.Projection(Towel.Mathematics.Vector{`0},Towel.Mathematics.Vector{`0},Towel.Mathematics.Vector{`0}@)">
            <summary>Computes teh cross product of two vectors.</summary>
            <param name="a">The first vector of the cross product operation.</param>
            <param name="b">The second vector of the cross product operation.</param>
            <param name="c">The result of the cross product operation.</param>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.Projection(Towel.Mathematics.Vector{`0},Towel.Mathematics.Vector{`0})">
            <summary>Computes teh cross product of two vectors.</summary>
            <param name="a">The first vector of the cross product operation.</param>
            <param name="b">The second vector of the cross product operation.</param>
            <returns>The result of the cross product operation.</returns>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.Projection(Towel.Mathematics.Vector{`0},Towel.Mathematics.Vector{`0}@)">
            <summary>Computes teh cross product of two vectors.</summary>
            <param name="b">The second vector of the cross product operation.</param>
            <param name="c">The result of the cross product operation.</param>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.Projection(Towel.Mathematics.Vector{`0})">
            <summary>Computes teh cross product of two vectors.</summary>
            <param name="b">The second vector of the dot product operation.</param>
            <returns>The result of the dot product operation.</returns>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.RotateBy(Towel.Mathematics.Vector{`0},Towel.Measurements.Angle{`0},`0,`0,`0)">
            <summary>Rotates a vector by the specified axis and rotation values.</summary>
            <param name="vector">The vector to rotate.</param>
            <param name="angle">The angle of the rotation.</param>
            <param name="x">The x component of the axis vector to rotate about.</param>
            <param name="y">The y component of the axis vector to rotate about.</param>
            <param name="z">The z component of the axis vector to rotate about.</param>
            <returns>The result of the rotation.</returns>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.RotateBy(Towel.Measurements.Angle{`0},`0,`0,`0)">
            <summary>Rotates this vector by quaternon values.</summary>
            <param name="angle">The amount of rotation about the axis.</param>
            <param name="x">The x component deterniming the axis of rotation.</param>
            <param name="y">The y component determining the axis of rotation.</param>
            <param name="z">The z component determining the axis of rotation.</param>
            <returns>The resulting vector after the rotation.</returns>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.RotateBy(Towel.Mathematics.Vector{`0},Towel.Mathematics.Quaternion{`0},Towel.Mathematics.Vector{`0}@)">
            <summary>Rotates a vector by a quaternion.</summary>
            <param name="vector">The vector to rotate.</param>
            <param name="rotation">The quaternion to rotate the 3-component vector by.</param>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.RotateBy(Towel.Mathematics.Vector{`0},Towel.Mathematics.Quaternion{`0})">
            <summary>Rotates a vector by a quaternion.</summary>
            <param name="vector">The vector to rotate.</param>
            <param name="rotation">The quaternion to rotate the 3-component vector by.</param>
            <returns>The result of the rotation.</returns>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.RotateBy(Towel.Mathematics.Quaternion{`0})">
            <summary>Rotates a vector by a quaternion.</summary>
            <param name="b">The quaternion to rotate the 3-component vector by.</param>
            <returns>The result of the rotation.</returns>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.LinearInterpolation(Towel.Mathematics.Vector{`0},Towel.Mathematics.Vector{`0},`0,Towel.Mathematics.Vector{`0}@)">
            <summary>Computes the linear interpolation between two vectors.</summary>
            <param name="a">The starting vector of the interpolation.</param>
            <param name="b">The ending vector of the interpolation.</param>
            <param name="blend">The ratio 0.0 to 1.0 of the interpolation between the start and end.</param>
            <param name="c">The result of the interpolation.</param>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.LinearInterpolation(Towel.Mathematics.Vector{`0},Towel.Mathematics.Vector{`0},`0)">
            <summary>Computes the linear interpolation between two vectors.</summary>
            <param name="a">The starting vector of the interpolation.</param>
            <param name="b">The ending vector of the interpolation.</param>
            <param name="blend">The ratio 0.0 to 1.0 of the interpolation between the start and end.</param>
            <returns>The result of the interpolation.</returns>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.LinearInterpolation(Towel.Mathematics.Vector{`0},`0,Towel.Mathematics.Vector{`0}@)">
            <summary>Computes the linear interpolation between two vectors.</summary>
            <param name="b">The ending vector of the interpolation.</param>
            <param name="blend">The ratio 0.0 to 1.0 of the interpolation between the start and end.</param>
            <param name="c">The result of the interpolation.</param>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.LinearInterpolation(Towel.Mathematics.Vector{`0},`0)">
            <summary>Computes the linear interpolation between two vectors.</summary>
            <param name="b">The ending vector of the interpolation.</param>
            <param name="blend">The ratio 0.0 to 1.0 of the interpolation between the start and end.</param>
            <returns>The result of the interpolation.</returns>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.SphericalInterpolation(Towel.Mathematics.Vector{`0},Towel.Mathematics.Vector{`0},`0,Towel.Mathematics.Vector{`0}@)">
            <summary>Spherically interpolates between two vectors.</summary>
            <param name="a">The starting vector of the interpolation.</param>
            <param name="b">The ending vector of the interpolation.</param>
            <param name="blend">The ratio 0.0 to 1.0 defining the interpolation distance between the two vectors.</param>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.SphericalInterpolation(Towel.Mathematics.Vector{`0},Towel.Mathematics.Vector{`0},`0)">
            <summary>Spherically interpolates between two vectors.</summary>
            <param name="a">The starting vector of the interpolation.</param>
            <param name="b">The ending vector of the interpolation.</param>
            <param name="blend">The ratio 0.0 to 1.0 defining the interpolation distance between the two vectors.</param>
            <returns>The result of the slerp operation.</returns>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.SphericalInterpolation(Towel.Mathematics.Vector{`0},`0)">
            <summary>Sphereically interpolates between two vectors.</summary>
            <param name="b">The ending vector of the interpolation.</param>
            <param name="blend">The ratio 0.0 to 1.0 defining the interpolation distance between the two vectors.</param>
            <returns>The result of the slerp operation.</returns>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.BarycentricInterpolation(Towel.Mathematics.Vector{`0},Towel.Mathematics.Vector{`0},Towel.Mathematics.Vector{`0},`0,`0,Towel.Mathematics.Vector{`0}@)">
            <summary>Interpolates between three vectors using barycentric coordinates.</summary>
            <param name="a">The first vector of the interpolation.</param>
            <param name="b">The second vector of the interpolation.</param>
            <param name="c">The thrid vector of the interpolation.</param>
            <param name="u">The "U" value of the barycentric interpolation equation.</param>
            <param name="v">The "V" value of the barycentric interpolation equation.</param>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.BarycentricInterpolation(Towel.Mathematics.Vector{`0},Towel.Mathematics.Vector{`0},Towel.Mathematics.Vector{`0},`0,`0)">
            <summary>Interpolates between three vectors using barycentric coordinates.</summary>
            <param name="a">The first vector of the interpolation.</param>
            <param name="b">The second vector of the interpolation.</param>
            <param name="c">The thrid vector of the interpolation.</param>
            <param name="u">The "U" value of the barycentric interpolation equation.</param>
            <param name="v">The "V" value of the barycentric interpolation equation.</param>
            <returns>The resulting vector of the barycentric interpolation.</returns>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.BarycentricInterpolation(Towel.Mathematics.Vector{`0},Towel.Mathematics.Vector{`0},`0,`0)">
            <summary>Interpolates between three vectors using barycentric coordinates.</summary>
            <param name="a">The first vector of the interpolation.</param>
            <param name="b">The second vector of the interpolation.</param>
            <param name="c">The thrid vector of the interpolation.</param>
            <param name="u">The "U" value of the barycentric interpolation equation.</param>
            <param name="v">The "V" value of the barycentric interpolation equation.</param>
            <returns>The resulting vector of the barycentric interpolation.</returns>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.Equal(Towel.Mathematics.Vector{`0},Towel.Mathematics.Vector{`0})">
            <summary>Does a value equality check.</summary>
            <param name="a">The first vector to check for equality.</param>
            <param name="b">The second vector	to check for equality.</param>
            <returns>True if values are equal, false if not.</returns>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.NotEqual(Towel.Mathematics.Vector{`0},Towel.Mathematics.Vector{`0})">
            <summary>Does a value non-equality check.</summary>
            <param name="a">The first vector to check for non-equality.</param>
            <param name="b">The second vector	to check for non-equality.</param>
            <returns>True if values are not equal, false if not.</returns>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.op_Equality(Towel.Mathematics.Vector{`0},Towel.Mathematics.Vector{`0})">
            <summary>Does an equality check by value. (warning for float errors)</summary>
            <param name="a">The first vector of the equality check.</param>
            <param name="b">The second vector of the equality check.</param>
            <returns>true if the values are equal, false if not.</returns>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.op_Inequality(Towel.Mathematics.Vector{`0},Towel.Mathematics.Vector{`0})">
            <summary>Does an anti-equality check by value. (warning for float errors)</summary>
            <param name="a">The first vector of the anit-equality check.</param>
            <param name="b">The second vector of the anti-equality check.</param>
            <returns>true if the values are not equal, false if they are.</returns>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.Equal(Towel.Mathematics.Vector{`0})">
            <summary>Check for equality by value.</summary>
            <param name="b">The other vector of the equality check.</param>
            <returns>true if the values were equal, false if not.</returns>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.NotEqual(Towel.Mathematics.Vector{`0})">
            <summary>Check for non-equality by value.</summary>
            <param name="b">The other vector of the non-equality check.</param>
            <returns>true if the values were not equal, false if not.</returns>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.Equal(Towel.Mathematics.Vector{`0},Towel.Mathematics.Vector{`0},`0)">
            <summary>Does a value equality check with leniency.</summary>
            <param name="a">The first vector to check for equality.</param>
            <param name="b">The second vector to check for equality.</param>
            <param name="leniency">How much the values can vary but still be considered equal.</param>
            <returns>True if values are equal, false if not.</returns>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.Equal(Towel.Mathematics.Vector{`0},`0)">
            <summary>Checks for equality by value with some leniency.</summary>
            <param name="right">The other vector of the equality check.</param>
            <param name="leniency">The ammount the values can differ but still be considered equal.</param>
            <returns>true if the values were cinsidered equal, false if not.</returns>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.Clone(Towel.Mathematics.Vector{`0})">
            <summary>Creates a copy of a vector.</summary>
            <param name="a">The vector to copy.</param>
            <returns>The copy of this vector.</returns>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.Clone">
            <summary>Copies this vector.</summary>
            <returns>The copy of this vector.</returns>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.op_Implicit(Towel.Mathematics.Vector{`0})~`0[]">
            <summary>Implicit conversions from Vector to T[].</summary>
            <param name="vector">The Vector to be converted to a T[].</param>
            <returns>The T[] of the vector.</returns>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.op_Implicit(`0[])~Towel.Mathematics.Vector{`0}">
            <summary>Implicit conversions from Vector to T[].</summary>
            <param name="array">The Vector to be converted to a T[].</param>
            <returns>The T[] of the vector.</returns>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.op_Explicit(Towel.Mathematics.Vector{`0})~Towel.Mathematics.Matrix{`0}">
            <summary>Converts a vector into a matrix.</summary>
            <param name="vector">The vector to convert.</param>
            <returns>The resulting matrix.</returns>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.op_Explicit(`0)~Towel.Mathematics.Vector{`0}">
            <summary>Implicitly converts a scalar into a one dimensional vector.</summary>
            <param name="scalar">The scalar value.</param>
            <returns>The one dimensional vector </returns>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.Stepper(Towel.Step{`0})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="step">The delegate to invoke on each item in the structure.</param>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.Stepper(Towel.StepRef{`0})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="step">The delegate to invoke on each item in the structure.</param>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.Stepper(Towel.StepBreak{`0})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="step">The delegate to invoke on each item in the structure.</param>
            <returns>The resulting status of the iteration.</returns>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.Stepper(Towel.StepRefBreak{`0})">
            <summary>Invokes a delegate for each entry in the data structure.</summary>
            <param name="step">The delegate to invoke on each item in the structure.</param>
            <returns>The resulting status of the iteration.</returns>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.GetHashCode">
            <summary>Computes a hash code from the values of this matrix.</summary>
            <returns>A hash code for the matrix.</returns>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.Equals(System.Object)">
            <summary>Does an equality check by reference.</summary>
            <param name="right">The object to compare to.</param>
            <returns>True if the references are equal, false if not.</returns>
        </member>
        <member name="T:Towel.Measurements.Acceleration">
            <summary>Contains unit types and conversion factors for the generic Acceleration struct.</summary>
        </member>
        <member name="T:Towel.Measurements.Acceleration.Units">
            <summary>Units for acceleration measurements.</summary>
        </member>
        <member name="M:Towel.Measurements.Acceleration.Map(Towel.Measurements.Acceleration.Units,Towel.Measurements.Length.Units@,Towel.Measurements.Time.Units@,Towel.Measurements.Time.Units@)">
            <summary>Maps a units to relative base units.</summary>
        </member>
        <member name="T:Towel.Measurements.Acceleration`1">
            <summary>An Acceleration measurement.</summary>
            <typeparam name="T">The generic numeric type used to store the Acceleration measurement.</typeparam>
        </member>
        <member name="M:Towel.Measurements.Acceleration`1.#ctor(`0,Towel.Measurements.MeasurementUnitsSyntaxTypes.AccelerationUnits)">
            <summary>Constructs an Acceleration with the specified measurement and units.</summary>
            <param name="measurement">The value of the measurement.</param>
            <param name="units">The units of the measurement.</param>
        </member>
        <member name="M:Towel.Measurements.Acceleration`1.#ctor(`0,Towel.Measurements.Acceleration.Units)">
            <summary>Constructs an Acceleration with the specified measurement and units.</summary>
            <param name="measurement">The value of the measurement.</param>
            <param name="units">The units of the measurement.</param>
        </member>
        <member name="M:Towel.Measurements.Acceleration`1.#ctor(`0,Towel.Measurements.Length.Units,Towel.Measurements.Time.Units,Towel.Measurements.Time.Units)">
            <summary>Constructs an Acceleration with the specified measurement and units.</summary>
            <param name="measurement">The value of the measurement.</param>
            <param name="lengthUnits">The length [A] component of the units: Length[A] / Time1[B] / Time2[C].</param>
            <param name="timeUnits1">The first time [B] component of the units: Length[A] / Time1[B] / Time2[C].</param>
            <param name="timeUnits2">The second time [C] component of the units: Length[A] / Time1[B] / Time2[C].</param>
        </member>
        <member name="P:Towel.Measurements.Acceleration`1.LengthUnits">
            <summary>The length [A] component of the units: Length[A] / Time1[B] / Time2[C].</summary>
        </member>
        <member name="P:Towel.Measurements.Acceleration`1.TimeUnits1">
            <summary>The first time [B] component of the units: Length[A] / Time1[B] / Time2[C].</summary>
        </member>
        <member name="P:Towel.Measurements.Acceleration`1.TimeUnits2">
            <summary>The second time [C] component of the units: Length[A] / Time1[B] / Time2[C].</summary>
        </member>
        <member name="P:Towel.Measurements.Acceleration`1.Item(Towel.Measurements.MeasurementUnitsSyntaxTypes.AccelerationUnits)">
            <summary>Gets the measurement value in the specified units.</summary>
            <param name="units">The units to get the measurement value in.</param>
            <returns>The measurment value in the specified units.</returns>
        </member>
        <member name="P:Towel.Measurements.Acceleration`1.Item(Towel.Measurements.Acceleration.Units)">
            <summary>Gets the measurement value in the specified units.</summary>
            <param name="units">The units to get the measurement value in.</param>
            <returns>The measurment value in the specified units.</returns>
        </member>
        <member name="P:Towel.Measurements.Acceleration`1.Item(Towel.Measurements.Length.Units,Towel.Measurements.Time.Units,Towel.Measurements.Time.Units)">
            <summary>Gets the measurement value in the specified units.</summary>
            <param name="lengthUnits">The length [A] component of the units: Length[A] / Time1[B] / Time2[C].</param>
            <param name="timeUnits1">The first time [B] component of the units: Length[A] / Time1[B] / Time2[C].</param>
            <param name="timeUnits2">The second time [C] component of the units: Length[A] / Time1[B] / Time2[C].</param>
            <returns>The measurment value in the specified units.</returns>
        </member>
        <member name="M:Towel.Measurements.Acceleration`1.Add(Towel.Measurements.Acceleration{`0},Towel.Measurements.Acceleration{`0})">
            <summary>Adds two acceleration measurements.</summary>
            <param name="a">The first operand of the addition.</param>
            <param name="b">The second operand of the addition.</param>
            <returns>The result of the addition operation.</returns>
        </member>
        <member name="M:Towel.Measurements.Acceleration`1.op_Addition(Towel.Measurements.Acceleration{`0},Towel.Measurements.Acceleration{`0})">
            <summary>Adds two acceleration measurements.</summary>
            <param name="a">The first operand of the addition.</param>
            <param name="b">The second operand of the addition.</param>
            <returns>The result of the addition operation.</returns>
        </member>
        <member name="M:Towel.Measurements.Acceleration`1.Add(Towel.Measurements.Acceleration{`0})">
            <summary>Adds two acceleration measurements.</summary>
            <param name="b">The second operand of the addition.</param>
            <returns>The result of the addition operation.</returns>
        </member>
        <member name="M:Towel.Measurements.Acceleration`1.Subtract(Towel.Measurements.Acceleration{`0},Towel.Measurements.Acceleration{`0})">
            <summary>Subtracts two acceleration measurements.</summary>
            <param name="a">The first operand of the subtraction.</param>
            <param name="b">The second operand of the subtraction.</param>
            <returns>The result of the addition subtraction.</returns>
        </member>
        <member name="M:Towel.Measurements.Acceleration`1.op_Subtraction(Towel.Measurements.Acceleration{`0},Towel.Measurements.Acceleration{`0})">
            <summary>Subtracts two acceleration measurements.</summary>
            <param name="a">The first operand of the subtraction.</param>
            <param name="b">The second operand of the subtraction.</param>
            <returns>The result of the addition subtraction.</returns>
        </member>
        <member name="M:Towel.Measurements.Acceleration`1.Subtract(Towel.Measurements.Acceleration{`0})">
            <summary>Subtracts two acceleration measurements.</summary>
            <param name="b">The second operand of the subtraction.</param>
            <returns>The result of the addition subtraction.</returns>
        </member>
        <member name="M:Towel.Measurements.Acceleration`1.Multiply(Towel.Measurements.Acceleration{`0},`0)">
            <summary>Multiplies an acceleration by a scalar numeric value.</summary>
            <param name="a">The acceleration measurement to multiply.</param>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Acceleration`1.Multiply(`0,Towel.Measurements.Acceleration{`0})">
            <summary>Multiplies an acceleration by a scalar numeric value.</summary>
            <param name="a">The acceleration measurement to multiply.</param>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Acceleration`1.op_Multiply(Towel.Measurements.Acceleration{`0},`0)">
            <summary>Multiplies an acceleration by a scalar numeric value.</summary>
            <param name="a">The acceleration measurement to multiply.</param>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Acceleration`1.op_Multiply(`0,Towel.Measurements.Acceleration{`0})">
            <summary>Multiplies an acceleration by a scalar numeric value.</summary>
            <param name="a">The acceleration measurement to multiply.</param>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Acceleration`1.Add(`0)">
            <summary>Multiplies an acceleration by a scalar numeric value.</summary>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Acceleration`1.Multiply(Towel.Measurements.Acceleration{`0},Towel.Measurements.Time{`0})">
            <summary>Multiplies an Accleration measurement by a Time measurement resulting in a Speed measurement.</summary>
            <param name="a">The Acceleration measurement to multiply by a Time measurement.</param>
            <param name="b">The Time measurement to multiply by an Acceleration measurement.</param>
            <returns>The Speed measurement result from the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Acceleration`1.Multiply(Towel.Measurements.Time{`0},Towel.Measurements.Acceleration{`0})">
            <summary>Multiplies an Accleration measurement by a Time measurement resulting in a Speed measurement.</summary>
            <param name="a">The Acceleration measurement to multiply by a Time measurement.</param>
            <param name="b">The Time measurement to multiply by an Acceleration measurement.</param>
            <returns>The Speed measurement result from the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Acceleration`1.op_Multiply(Towel.Measurements.Acceleration{`0},Towel.Measurements.Time{`0})">
            <summary>Multiplies an Accleration measurement by a Time measurement resulting in a Speed measurement.</summary>
            <param name="a">The Acceleration measurement to multiply by a Time measurement.</param>
            <param name="b">The Time measurement to multiply by an Acceleration measurement.</param>
            <returns>The Speed measurement result from the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Acceleration`1.op_Multiply(Towel.Measurements.Time{`0},Towel.Measurements.Acceleration{`0})">
            <summary>Multiplies an Accleration measurement by a Time measurement resulting in a Speed measurement.</summary>
            <param name="a">The Acceleration measurement to multiply by a Time measurement.</param>
            <param name="b">The Time measurement to multiply by an Acceleration measurement.</param>
            <returns>The Speed measurement result from the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Acceleration`1.Multiply(Towel.Measurements.Time{`0})">
            <summary>Multiplies an Accleration measurement by a Time measurement resulting in a Speed measurement.</summary>
            <param name="b">The Time measurement to multiply by an Acceleration measurement.</param>
            <returns>The Speed measurement result from the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Acceleration`1.Multiply(Towel.Measurements.Mass{`0},Towel.Measurements.Acceleration{`0})">
            <summary>Multiplies an Accleration measurement by a Mass measurement resulting in a Force measurement.</summary>
            <param name="mass">The Mass measurement to multiply the Acceleration measurement by.</param>
            <param name="acceleration">The Acceleration measurement to multiply the Mass measurement by.</param>
            <returns>The Force measurement result from the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Acceleration`1.Multiply(Towel.Measurements.Acceleration{`0},Towel.Measurements.Mass{`0})">
            <summary>Multiplies an Accleration measurement by a Mass measurement resulting in a Force measurement.</summary>
            <param name="mass">The Mass measurement to multiply the Acceleration measurement by.</param>
            <param name="acceleration">The Acceleration measurement to multiply the Mass measurement by.</param>
            <returns>The Force measurement result from the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Acceleration`1.op_Multiply(Towel.Measurements.Mass{`0},Towel.Measurements.Acceleration{`0})">
            <summary>Multiplies an Accleration measurement by a Mass measurement resulting in a Force measurement.</summary>
            <param name="mass">The Mass measurement to multiply the Acceleration measurement by.</param>
            <param name="acceleration">The Acceleration measurement to multiply the Mass measurement by.</param>
            <returns>The Force measurement result from the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Acceleration`1.op_Multiply(Towel.Measurements.Acceleration{`0},Towel.Measurements.Mass{`0})">
            <summary>Multiplies an Accleration measurement by a Mass measurement resulting in a Force measurement.</summary>
            <param name="mass">The Mass measurement to multiply the Acceleration measurement by.</param>
            <param name="acceleration">The Acceleration measurement to multiply the Mass measurement by.</param>
            <returns>The Force measurement result from the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Acceleration`1.Multiply(Towel.Measurements.Mass{`0})">
            <summary>Multiplies an Accleration measurement by a Mass measurement resulting in a Force measurement.</summary>
            <param name="mass">The Mass measurement to multiply the Acceleration measurement by.</param>
            <returns>The Force measurement result from the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Acceleration`1.Divide(Towel.Measurements.Acceleration{`0},`0)">
            <summary>Divides this acceleration measurement by a numaric scalar value.</summary>
            <param name="a">The acceleration measurement to divide.</param>
            <param name="b">The numeric scalar to divide by.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Acceleration`1.op_Division(Towel.Measurements.Acceleration{`0},`0)">
            <summary>Divides this acceleration measurement by a numaric scalar value.</summary>
            <param name="a">The acceleration measurement to divide.</param>
            <param name="b">The numeric scalar to divide by.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Acceleration`1.Divide(`0)">
            <summary>Divides this acceleration measurement by a numaric scalar value.</summary>
            <param name="b">The numeric scalar to divide by.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Acceleration`1.Divide(Towel.Measurements.Acceleration{`0},Towel.Measurements.Acceleration{`0})">
            <summary>Divides an Acceleration measurement by another Acceleration measurement resulting in a scalar numeric value.</summary>
            <param name="a">The first operand of the division operation.</param>
            <param name="b">The second operand of the division operation.</param>
            <returns>The scalar numeric value result from the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Acceleration`1.op_Division(Towel.Measurements.Acceleration{`0},Towel.Measurements.Acceleration{`0})">
            <summary>Divides an Acceleration measurement by another Acceleration measurement resulting in a scalar numeric value.</summary>
            <param name="a">The first operand of the division operation.</param>
            <param name="b">The second operand of the division operation.</param>
            <returns>The scalar numeric value result from the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Acceleration`1.Divide(Towel.Measurements.Acceleration{`0})">
            <summary>Divides an Acceleration measurement by another Acceleration measurement resulting in a scalar numeric value.</summary>
            <param name="b">The second operand of the division operation.</param>
            <returns>The scalar numeric value result from the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Acceleration`1.LessThan(Towel.Measurements.Acceleration{`0},Towel.Measurements.Acceleration{`0})">
            <summary>Determines if an Acceleration measurement is less than another Acceleration measurement.</summary>
            <param name="a">The first operand of the less than operation.</param>
            <param name="b">The second operand of the less than operation.</param>
            <returns>True if the first operand is less than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Acceleration`1.op_LessThan(Towel.Measurements.Acceleration{`0},Towel.Measurements.Acceleration{`0})">
            <summary>Determines if an Acceleration measurement is less than another Acceleration measurement.</summary>
            <param name="a">The first operand of the less than operation.</param>
            <param name="b">The second operand of the less than operation.</param>
            <returns>True if the first operand is less than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Acceleration`1.LessThan(Towel.Measurements.Acceleration{`0})">
            <summary>Determines if an Acceleration measurement is less than another Acceleration measurement.</summary>
            <param name="b">The second operand of the less than operation.</param>
            <returns>True if the first operand is less than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Acceleration`1.GreaterThan(Towel.Measurements.Acceleration{`0},Towel.Measurements.Acceleration{`0})">
            <summary>Determines if an Acceleration measurement is greater than another Acceleration measurement.</summary>
            <param name="a">The first operand of the greater than operation.</param>
            <param name="b">The second operand of the greater than operation.</param>
            <returns>True if the first operand is greater than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Acceleration`1.op_GreaterThan(Towel.Measurements.Acceleration{`0},Towel.Measurements.Acceleration{`0})">
            <summary>Determines if an Acceleration measurement is greater than another Acceleration measurement.</summary>
            <param name="a">The first operand of the greater than operation.</param>
            <param name="b">The second operand of the greater than operation.</param>
            <returns>True if the first operand is greater than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Acceleration`1.GreaterThan(Towel.Measurements.Acceleration{`0})">
            <summary>Determines if an Acceleration measurement is greater than another Acceleration measurement.</summary>
            <param name="b">The second operand of the greater than operation.</param>
            <returns>True if the first operand is greater than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Acceleration`1.LessThanOrEqual(Towel.Measurements.Acceleration{`0},Towel.Measurements.Acceleration{`0})">
            <summary>Determines if an Acceleration measurement is less than or equal to another Acceleration measurement.</summary>
            <param name="a">The first operand of the less than or equal to operation.</param>
            <param name="b">The second operand of the less than or equal to operation.</param>
            <returns>True if the first operand is less than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Acceleration`1.op_LessThanOrEqual(Towel.Measurements.Acceleration{`0},Towel.Measurements.Acceleration{`0})">
            <summary>Determines if an Acceleration measurement is less than or equal to another Acceleration measurement.</summary>
            <param name="a">The first operand of the less than or equal to operation.</param>
            <param name="b">The second operand of the less than or equal to operation.</param>
            <returns>True if the first operand is less than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Acceleration`1.LessThanOrEqual(Towel.Measurements.Acceleration{`0})">
            <summary>Determines if an Acceleration measurement is less than or equal to another Acceleration measurement.</summary>
            <param name="b">The second operand of the less than or equal to operation.</param>
            <returns>True if the first operand is less than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Acceleration`1.GreaterThanOrEqual(Towel.Measurements.Acceleration{`0},Towel.Measurements.Acceleration{`0})">
            <summary>Determines if an Acceleration measurement is greater than or equal to another Acceleration measurement.</summary>
            <param name="a">The first operand of the greater than or equal to operation.</param>
            <param name="b">The second operand of the greater than or equal to operation.</param>
            <returns>True if the first operand is greater than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Acceleration`1.op_GreaterThanOrEqual(Towel.Measurements.Acceleration{`0},Towel.Measurements.Acceleration{`0})">
            <summary>Determines if an Acceleration measurement is greater than or equal to another Acceleration measurement.</summary>
            <param name="a">The first operand of the greater than or equal to operation.</param>
            <param name="b">The second operand of the greater than or equal to operation.</param>
            <returns>True if the first operand is greater than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Acceleration`1.GreaterThanOrEqual(Towel.Measurements.Acceleration{`0})">
            <summary>Determines if an Acceleration measurement is greater than or equal to another Acceleration measurement.</summary>
            <param name="b">The second operand of the greater than or equal to operation.</param>
            <returns>True if the first operand is greater than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Acceleration`1.Equal(Towel.Measurements.Acceleration{`0},Towel.Measurements.Acceleration{`0})">
            <summary>Determines if an Acceleration measurement is equal to another Acceleration measurement.</summary>
            <param name="a">The first operand of the equal to operation.</param>
            <param name="b">The second operand of the equal to operation.</param>
            <returns>True if the first operand is equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Acceleration`1.op_Equality(Towel.Measurements.Acceleration{`0},Towel.Measurements.Acceleration{`0})">
            <summary>Determines if an Acceleration measurement is equal to another Acceleration measurement.</summary>
            <param name="a">The first operand of the equal to operation.</param>
            <param name="b">The second operand of the equal to operation.</param>
            <returns>True if the first operand is equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Acceleration`1.Equal(Towel.Measurements.Acceleration{`0})">
            <summary>Determines if an Acceleration measurement is equal to another Acceleration measurement.</summary>
            <param name="b">The second operand of the equal to operation.</param>
            <returns>True if the first operand is equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Acceleration`1.NotEqual(Towel.Measurements.Acceleration{`0},Towel.Measurements.Acceleration{`0})">
            <summary>Determines if an Acceleration measurement is not equal to another Acceleration measurement.</summary>
            <param name="a">The first operand of the not equal to operation.</param>
            <param name="b">The second operand of the not equal to operation.</param>
            <returns>True if the first operand is not equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Acceleration`1.op_Inequality(Towel.Measurements.Acceleration{`0},Towel.Measurements.Acceleration{`0})">
            <summary>Determines if an Acceleration measurement is not equal to another Acceleration measurement.</summary>
            <param name="a">The first operand of the not equal to operation.</param>
            <param name="b">The second operand of the not equal to operation.</param>
            <returns>True if the first operand is not equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Acceleration`1.NotEqual(Towel.Measurements.Acceleration{`0})">
            <summary>Determines if an Acceleration measurement is not equal to another Acceleration measurement.</summary>
            <param name="b">The second operand of the not equal to operation.</param>
            <returns>True if the first operand is not equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Acceleration`1.ToString">
            <summary>Converts the Acceleration measurement to a string represenation.</summary>
            <returns>The string representation of the measurement.</returns>
        </member>
        <member name="M:Towel.Measurements.Acceleration`1.Equals(System.Object)">
            <summary>Base Equals override that performs a type and value equality check.</summary>
            <param name="obj">The object to check for equality with.</param>
            <returns>True if the types and values equal. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Acceleration`1.GetHashCode">
            <summary>Base hashing function for Acceleration measurements.</summary>
            <returns>Computed hash code for this instance.</returns>
        </member>
        <member name="T:Towel.Measurements.Angle">
            <summary>Contains unit types and conversion factors for the generic Angle struct.</summary>
        </member>
        <member name="T:Towel.Measurements.Angle.Units">
            <summary>Units for angle measurements.</summary>
        </member>
        <member name="F:Towel.Measurements.Angle.Units.Gradians">
            <summary>Units of an angle measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.Angle.Units.Degrees">
            <summary>Units of an angle measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.Angle.Units.Radians">
            <summary>Units of an angle measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.Angle.Units.Revolutions">
            <summary>Units of an angle measurement.</summary>
        </member>
        <member name="T:Towel.Measurements.Angle`1">
            <summary>An Angle measurement.</summary>
            <typeparam name="T">The generic numeric type used to store the Angle measurement.</typeparam>
        </member>
        <member name="M:Towel.Measurements.Angle`1.#ctor(`0,Towel.Measurements.Angle.Units)">
            <summary>Constructs an Angle with the specified measurement and units.</summary>
            <param name="measurement">The measurement of the Angle.</param>
            <param name="units">The units of the Angle.</param>
        </member>
        <member name="P:Towel.Measurements.Angle`1.Units">
            <summary>The current units used to represent the Angle.</summary>
        </member>
        <member name="P:Towel.Measurements.Angle`1.Item(Towel.Measurements.Angle.Units)">
            <summary>Gets the measurement in the desired units.</summary>
            <param name="units">The units you want the measurement to be in.</param>
            <returns>The measurement in the specified units.</returns>
        </member>
        <member name="T:Towel.Measurements.AngularAcceleration">
            <summary>Contains unit types and conversion factors for the generic AngularAcceleration struct.</summary>
        </member>
        <member name="T:Towel.Measurements.AngularAcceleration.Units">
            <summary>Units for angularAcceleration measurements.</summary>
        </member>
        <member name="M:Towel.Measurements.AngularAcceleration.Map(Towel.Measurements.AngularAcceleration.Units,Towel.Measurements.Angle.Units@,Towel.Measurements.Time.Units@,Towel.Measurements.Time.Units@)">
            <summary>Maps a units to relative base units.</summary>
        </member>
        <member name="T:Towel.Measurements.AngularAcceleration`1">
            <summary>An AngularAcceleration measurement.</summary>
            <typeparam name="T">The generic numeric type used to store the AngularAcceleration measurement.</typeparam>
        </member>
        <member name="M:Towel.Measurements.AngularAcceleration`1.#ctor(`0,Towel.Measurements.AngularAcceleration.Units)">
            <summary>Constructs an AngularAcceleration with the specified measurement and units.</summary>
            <param name="measurement">The measurement of the AngularAcceleration.</param>
            <param name="units">The units of the AngularAcceleration.</param>
        </member>
        <member name="T:Towel.Measurements.AngularSpeed">
            <summary>Contains unit types and conversion factors for the generic AngularSpeed struct.</summary>
        </member>
        <member name="T:Towel.Measurements.AngularSpeed.Units">
            <summary>Units for AngularSpeed measurements.</summary>
        </member>
        <member name="M:Towel.Measurements.AngularSpeed.Map(Towel.Measurements.AngularSpeed.Units,Towel.Measurements.Angle.Units@,Towel.Measurements.Time.Units@)">
            <summary>Maps a units to relative base units.</summary>
        </member>
        <member name="T:Towel.Measurements.AngularSpeed`1">
            <summary>An AngularSpeed measurement.</summary>
            <typeparam name="T">The generic numeric type used to store the AngularSpeed measurement.</typeparam>
        </member>
        <member name="M:Towel.Measurements.AngularSpeed`1.#ctor(`0,Towel.Measurements.AngularSpeed.Units)">
            <summary>Constructs an AngularSpeed with the specified measurement and units.</summary>
            <param name="measurement">The measurement of the AngularSpeed.</param>
            <param name="units">The units of the AngularSpeed.</param>
        </member>
        <member name="P:Towel.Measurements.AngularSpeed`1.Item(Towel.Measurements.AngularSpeed.Units)">
            <summary>Gets the measurement in the desired units.</summary>
            <param name="units">The units you want the measurement to be in.</param>
            <returns>The measurement in the specified units.</returns>
        </member>
        <member name="T:Towel.Measurements.Area">
            <summary>Contains unit types and conversion factors for the generic Volumne struct.</summary>
        </member>
        <member name="T:Towel.Measurements.Area.Units">
            <summary>Units for Volumne measurements.</summary>
        </member>
        <member name="M:Towel.Measurements.Area.Map(Towel.Measurements.Area.Units,Towel.Measurements.Length.Units@,Towel.Measurements.Length.Units@)">
            <summary>Maps a units to relative base units.</summary>
        </member>
        <member name="T:Towel.Measurements.Area`1">
            <summary>An Area measurement.</summary>
            <typeparam name="T">The generic numeric type used to store the Area measurement.</typeparam>
        </member>
        <member name="M:Towel.Measurements.Area`1.#ctor(`0,Towel.Measurements.Length.Units,Towel.Measurements.Length.Units)">
            <summary>Constructs an Area with the specified measurement and units.</summary>
            <param name="measurement">The measurement of the Area.</param>
            <param name="units">The units of the Area.</param>
        </member>
        <member name="P:Towel.Measurements.Area`1.Item(Towel.Measurements.Length.Units,Towel.Measurements.Length.Units)">
            <summary>Gets the measurement in the desired units.</summary>
            <param name="units">The units you want the measurement to be in.</param>
            <returns>The measurement in the specified units.</returns>
        </member>
        <member name="T:Towel.Measurements.AreaDensity">
            <summary>Contains unit types and conversion factors for the generic AreaDensity struct.</summary>
        </member>
        <member name="T:Towel.Measurements.AreaDensity.Units">
            <summary>Units for AreaDensity measurements.</summary>
        </member>
        <member name="M:Towel.Measurements.AreaDensity.Map(Towel.Measurements.AreaDensity.Units,Towel.Measurements.Mass.Units@,Towel.Measurements.Length.Units@,Towel.Measurements.Length.Units@)">
            <summary>Maps a units to relative base units.</summary>
        </member>
        <member name="T:Towel.Measurements.AreaDensity`1">
            <summary>An AreaDensity measurement.</summary>
            <typeparam name="T">The generic numeric type used to store the AreaDensity measurement.</typeparam>
        </member>
        <member name="M:Towel.Measurements.AreaDensity`1.#ctor(`0,Towel.Measurements.AreaDensity.Units)">
            <summary>Constructs an AreaDensity with the specified measurement and units.</summary>
            <param name="measurement">The measurement of the AreaDensity.</param>
            <param name="units">The units of the AreaDensity.</param>
        </member>
        <member name="P:Towel.Measurements.AreaDensity`1.Item(Towel.Measurements.AreaDensity.Units)">
            <summary>Gets the measurement in the desired units.</summary>
            <param name="units">The units you want the measurement to be in.</param>
            <returns>The measurement in the specified units.</returns>
        </member>
        <member name="T:Towel.Measurements.Attenuation">
            <summary>Contains unit types and conversion factors for the generic Attenuation struct.</summary>
        </member>
        <member name="T:Towel.Measurements.Attenuation.Units">
            <summary>Units for Attenuation measurements.</summary>
        </member>
        <member name="T:Towel.Measurements.Attenuation`1">
            <summary>An Attenuation measurement.</summary>
            <typeparam name="T">The generic numeric type used to store the Attenuation measurement.</typeparam>
        </member>
        <member name="M:Towel.Measurements.Attenuation`1.#ctor(`0,Towel.Measurements.Attenuation.Units)">
            <summary>Constructs an Attenuation with the specified measurement and units.</summary>
            <param name="measurement">The measurement of the Attenuation.</param>
            <param name="units">The units of the Attenuation.</param>
        </member>
        <member name="P:Towel.Measurements.Attenuation`1.Units">
            <summary>The current units used to represent the Attenuation.</summary>
        </member>
        <member name="P:Towel.Measurements.Attenuation`1.Item(Towel.Measurements.Attenuation.Units)">
            <summary>Gets the measurement in the desired units.</summary>
            <param name="units">The units you want the measurement to be in.</param>
            <returns>The measurement in the specified units.</returns>
        </member>
        <member name="T:Towel.Measurements.Density">
            <summary>Contains unit types and conversion factors for the generic Desnity struct.</summary>
        </member>
        <member name="T:Towel.Measurements.Density.Units">
            <summary>Units for Desnity measurements.</summary>
        </member>
        <member name="M:Towel.Measurements.Density.Map(Towel.Measurements.Density.Units,Towel.Measurements.Mass.Units@,Towel.Measurements.Length.Units@,Towel.Measurements.Length.Units@,Towel.Measurements.Length.Units@)">
            <summary>Maps a units to relative base units.</summary>
        </member>
        <member name="T:Towel.Measurements.Density`1">
            <summary>An Density measurement.</summary>
            <typeparam name="T">The generic numeric type used to store the Density measurement.</typeparam>
        </member>
        <member name="M:Towel.Measurements.Density`1.#ctor(`0,Towel.Measurements.Density.Units)">
            <summary>Constructs an Density with the specified measurement and units.</summary>
            <param name="measurement">The measurement of the Density.</param>
            <param name="units">The units of the Density.</param>
        </member>
        <member name="T:Towel.Measurements.ElectricCharge">
            <summary>Contains unit types and conversion factors for the generic ElectricCharge struct.</summary>
        </member>
        <member name="T:Towel.Measurements.ElectricCharge.Units">
            <summary>Units for electric charge measurements.</summary>
        </member>
        <member name="F:Towel.Measurements.ElectricCharge.Units.Yoctocoulombs">
            <summary>Units of an electric charge measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.ElectricCharge.Units.Zeptocoulombs">
            <summary>Units of an electric charge measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.ElectricCharge.Units.Attocoulombs">
            <summary>Units of an electric charge measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.ElectricCharge.Units.Femtocoulombs">
            <summary>Units of an electric charge measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.ElectricCharge.Units.Picocoulombs">
            <summary>Units of an electric charge measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.ElectricCharge.Units.Nanocoulombs">
            <summary>Units of an electric charge measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.ElectricCharge.Units.Microcoulombs">
            <summary>Units of an electric charge measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.ElectricCharge.Units.Millicoulombs">
            <summary>Units of an electric charge measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.ElectricCharge.Units.Centicoulombs">
            <summary>Units of an electric charge measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.ElectricCharge.Units.Decicoulombs">
            <summary>Units of an electric charge measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.ElectricCharge.Units.Coulombs">
            <summary>Units of an electric charge measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.ElectricCharge.Units.Dekacoulombs">
            <summary>Units of an electric charge measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.ElectricCharge.Units.Hectocoulombs">
            <summary>Units of an electric charge measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.ElectricCharge.Units.Kilocoulombs">
            <summary>Units of an electric charge measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.ElectricCharge.Units.Megacoulombs">
            <summary>Units of an electric charge measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.ElectricCharge.Units.Gigacoulombs">
            <summary>Units of an electric charge measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.ElectricCharge.Units.Teracoulombs">
            <summary>Units of an electric charge measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.ElectricCharge.Units.Petacoulombs">
            <summary>Units of an electric charge measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.ElectricCharge.Units.Exacoulombs">
            <summary>Units of an electric charge measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.ElectricCharge.Units.Zettacoulombs">
            <summary>Units of an electric charge measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.ElectricCharge.Units.Yottacoulombs">
            <summary>Units of an electric charge measurement.</summary>
        </member>
        <member name="T:Towel.Measurements.ElectricCharge`1">
            <summary>An ElectricCharge measurement.</summary>
            <typeparam name="T">The generic numeric type used to store the ElectricCharge measurement.</typeparam>
        </member>
        <member name="M:Towel.Measurements.ElectricCharge`1.#ctor(`0,Towel.Measurements.ElectricCharge.Units)">
            <summary>Constructs an ElectricCharge with the specified measurement and units.</summary>
            <param name="measurement">The measurement of the ElectricCharge.</param>
            <param name="units">The units of the ElectricCharge.</param>
        </member>
        <member name="P:Towel.Measurements.ElectricCharge`1.Units">
            <summary>The current units used to represent the ElectricCharge.</summary>
        </member>
        <member name="P:Towel.Measurements.ElectricCharge`1.Item(Towel.Measurements.ElectricCharge.Units)">
            <summary>Gets the measurement in the desired units.</summary>
            <param name="units">The units you want the measurement to be in.</param>
            <returns>The measurement in the specified units.</returns>
        </member>
        <member name="T:Towel.Measurements.ElectricCurrent">
            <summary>Contains unit types and conversion factors for the generic ElectricCurrent struct.</summary>
        </member>
        <member name="T:Towel.Measurements.ElectricCurrent.Units">
            <summary>Units for electric current measurements.</summary>
        </member>
        <member name="F:Towel.Measurements.ElectricCurrent.Units.Yoctoampheres">
            <summary>Units of an electric charge measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.ElectricCurrent.Units.Zeptoampheres">
            <summary>Units of an electric charge measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.ElectricCurrent.Units.Attoampheres">
            <summary>Units of an electric charge measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.ElectricCurrent.Units.Femtoampheres">
            <summary>Units of an electric charge measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.ElectricCurrent.Units.Picoampheres">
            <summary>Units of an electric charge measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.ElectricCurrent.Units.Nanoampheres">
            <summary>Units of an electric charge measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.ElectricCurrent.Units.Microampheres">
            <summary>Units of an electric charge measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.ElectricCurrent.Units.Milliampheres">
            <summary>Units of an electric charge measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.ElectricCurrent.Units.Centiampheres">
            <summary>Units of an electric charge measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.ElectricCurrent.Units.Deciampheres">
            <summary>Units of an electric charge measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.ElectricCurrent.Units.Amperes">
            <summary>Units of an electric charge measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.ElectricCurrent.Units.Dekaampheres">
            <summary>Units of an electric charge measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.ElectricCurrent.Units.Hectoampheres">
            <summary>Units of an electric charge measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.ElectricCurrent.Units.Kiloampheres">
            <summary>Units of an electric charge measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.ElectricCurrent.Units.Megaampheres">
            <summary>Units of an electric charge measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.ElectricCurrent.Units.Gigaampheres">
            <summary>Units of an electric charge measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.ElectricCurrent.Units.Teraampheres">
            <summary>Units of an electric charge measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.ElectricCurrent.Units.Petaampheres">
            <summary>Units of an electric charge measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.ElectricCurrent.Units.Exaampheres">
            <summary>Units of an electric charge measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.ElectricCurrent.Units.Zettaampheres">
            <summary>Units of an electric charge measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.ElectricCurrent.Units.Yottaampheres">
            <summary>Units of an electric charge measurement.</summary>
        </member>
        <member name="M:Towel.Measurements.ElectricCurrent.Map(Towel.Measurements.ElectricCurrent.Units,Towel.Measurements.ElectricCharge.Units@,Towel.Measurements.Time.Units@)">
            <summary>Maps a units to relative base units.</summary>
        </member>
        <member name="T:Towel.Measurements.ElectricCurrent`1">
            <summary>An ElectricCurrent measurement.</summary>
            <typeparam name="T">The generic numeric type used to store the ElectricCurrent measurement.</typeparam>
        </member>
        <member name="M:Towel.Measurements.ElectricCurrent`1.#ctor(`0,Towel.Measurements.ElectricCharge.Units,Towel.Measurements.Time.Units)">
            <summary>Constructs an ElectricCurrent with the specified measurement and units.</summary>
            <param name="measurement">The measurement of the ElectricCurrent.</param>
            <param name="units">The units of the ElectricCurrent.</param>
        </member>
        <member name="P:Towel.Measurements.ElectricCurrent`1.Item(Towel.Measurements.ElectricCurrent.Units)">
            <summary>Gets the measurement in the desired units.</summary>
            <param name="units">The units you want the measurement to be in.</param>
            <returns>The measurement in the specified units.</returns>
        </member>
        <member name="T:Towel.Measurements.Energy">
            <summary>Contains unit types and conversion factors for the generic Energy struct.</summary>
        </member>
        <member name="T:Towel.Measurements.Energy.Units">
            <summary>Units for Energy measurements.</summary>
        </member>
        <member name="T:Towel.Measurements.Energy`1">
            <summary>An Energy measurement.</summary>
            <typeparam name="T">The generic numeric type used to store the Energy measurement.</typeparam>
        </member>
        <member name="M:Towel.Measurements.Energy`1.#ctor(`0,Towel.Measurements.Energy.Units)">
            <summary>Constructs an Energy with the specified measurement and units.</summary>
            <param name="measurement">The measurement of the Energy.</param>
            <param name="units">The units of the Energy.</param>
        </member>
        <member name="P:Towel.Measurements.Energy`1.Units">
            <summary>The current units used to represent the Energy.</summary>
        </member>
        <member name="P:Towel.Measurements.Energy`1.Item(Towel.Measurements.Energy.Units)">
            <summary>Gets the measurement in the desired units.</summary>
            <param name="units">The units you want the measurement to be in.</param>
            <returns>The measurement in the specified units.</returns>
        </member>
        <member name="T:Towel.Measurements.Force">
            <summary>Contains unit types and conversion factors for the generic Force struct.</summary>
        </member>
        <member name="T:Towel.Measurements.Force.Units">
            <summary>Units for Force measurements.</summary>
        </member>
        <member name="F:Towel.Measurements.Force.Units.Newtons">
            <summary>Units of an Force measurement.</summary>
        </member>
        <member name="M:Towel.Measurements.Force.Map(Towel.Measurements.Force.Units,Towel.Measurements.Mass.Units@,Towel.Measurements.Length.Units@,Towel.Measurements.Time.Units@,Towel.Measurements.Time.Units@)">
            <summary>Maps a units to relative base units.</summary>
        </member>
        <member name="T:Towel.Measurements.Force`1">
            <summary>An Force measurement.</summary>
            <typeparam name="T">The generic numeric type used to store the Force measurement.</typeparam>
        </member>
        <member name="M:Towel.Measurements.Force`1.#ctor(`0,Towel.Measurements.Force.Units)">
            <summary>Constructs an speed with the specified measurement and units.</summary>
            <param name="measurement">The measurement of the speed.</param>
            <param name="units">The units of the Speed.</param>
        </member>
        <member name="P:Towel.Measurements.Force`1.Item(Towel.Measurements.Force.Units)">
            <summary>Gets the measurement in the desired units.</summary>
            <param name="units">The units you want the measurement to be in.</param>
            <returns>The measurement in the specified units.</returns>
        </member>
        <member name="T:Towel.Measurements.Length">
            <summary>Contains unit types and conversion factors for the generic Length struct.</summary>
        </member>
        <member name="T:Towel.Measurements.Length.Units">
            <summary>Units for length measurements.</summary>
        </member>
        <member name="F:Towel.Measurements.Length.Units.Yoctometers">
            <summary>Units of an length measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.Length.Units.Zeptometers">
            <summary>Units of an length measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.Length.Units.Attometers">
            <summary>Units of an length measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.Length.Units.Femtometers">
            <summary>Units of an length measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.Length.Units.Picometers">
            <summary>Units of an length measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.Length.Units.Nanometers">
            <summary>Units of an length measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.Length.Units.Micrometers">
            <summary>Units of an length measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.Length.Units.Millimeters">
            <summary>Units of an length measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.Length.Units.Centimeters">
            <summary>Units of an length measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.Length.Units.Inches">
            <summary>Units of an length measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.Length.Units.Decimeters">
            <summary>Units of an length measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.Length.Units.Feet">
            <summary>Units of an length measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.Length.Units.Yards">
            <summary>Units of an length measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.Length.Units.Meters">
            <summary>Units of an length measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.Length.Units.Dekameters">
            <summary>Units of an length measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.Length.Units.Hectometers">
            <summary>Units of an length measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.Length.Units.Kilometers">
            <summary>Units of an length measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.Length.Units.Miles">
            <summary>Units of an length measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.Length.Units.NauticalMiles">
            <summary>Units of an length measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.Length.Units.Megameters">
            <summary>Units of an length measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.Length.Units.Gigameters">
            <summary>Units of an length measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.Length.Units.Terameters">
            <summary>Units of an length measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.Length.Units.Petameters">
            <summary>Units of an length measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.Length.Units.Exameters">
            <summary>Units of an length measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.Length.Units.Zettameters">
            <summary>Units of an length measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.Length.Units.Yottameters">
            <summary>Units of an length measurement.</summary>
        </member>
        <member name="T:Towel.Measurements.Length`1">
            <summary>An Length measurement.</summary>
            <typeparam name="T">The generic numeric type used to store the Length measurement.</typeparam>
        </member>
        <member name="M:Towel.Measurements.Length`1.#ctor(`0,Towel.Measurements.Length.Units)">
            <summary>Constructs an Length with the specified measurement and units.</summary>
            <param name="measurement">The measurement of the Length.</param>
            <param name="units">The units of the Length.</param>
        </member>
        <member name="P:Towel.Measurements.Length`1.Units">
            <summary>The current units used to represent the Length.</summary>
        </member>
        <member name="P:Towel.Measurements.Length`1.Item(Towel.Measurements.Length.Units)">
            <summary>Gets the measurement in the desired units.</summary>
            <param name="units">The units you want the measurement to be in.</param>
            <returns>The measurement in the specified units.</returns>
        </member>
        <member name="T:Towel.Measurements.LinearDensity">
            <summary>Contains unit types and conversion factors for the generic LinearDensity struct.</summary>
        </member>
        <member name="T:Towel.Measurements.LinearDensity.Units">
            <summary>Units for LinearDensity measurements.</summary>
        </member>
        <member name="M:Towel.Measurements.LinearDensity.Map(Towel.Measurements.LinearDensity.Units,Towel.Measurements.Mass.Units@,Towel.Measurements.Length.Units@)">
            <summary>Maps a units to relative base units.</summary>
        </member>
        <member name="T:Towel.Measurements.LinearDensity`1">
            <summary>An LinearDensity measurement.</summary>
            <typeparam name="T">The generic numeric type used to store the LinearDensity measurement.</typeparam>
        </member>
        <member name="M:Towel.Measurements.LinearDensity`1.#ctor(`0,Towel.Measurements.LinearDensity.Units)">
            <summary>Constructs an LinearDensity with the specified measurement and units.</summary>
            <param name="measurement">The measurement of the LinearDensity.</param>
            <param name="units">The units of the LinearDensity.</param>
        </member>
        <member name="P:Towel.Measurements.LinearDensity`1.Item(Towel.Measurements.LinearDensity.Units)">
            <summary>Gets the measurement in the desired units.</summary>
            <param name="units">The units you want the measurement to be in.</param>
            <returns>The measurement in the specified units.</returns>
        </member>
        <member name="T:Towel.Measurements.LinearMass">
            <summary>Contains unit types and conversion factors for the generic LinearMass struct.</summary>
        </member>
        <member name="T:Towel.Measurements.LinearMass.Units">
            <summary>Units for LinearMass measurements.</summary>
        </member>
        <member name="M:Towel.Measurements.LinearMass.Map(Towel.Measurements.LinearMass.Units,Towel.Measurements.Mass.Units@,Towel.Measurements.Length.Units@)">
            <summary>Maps a units to relative base units.</summary>
        </member>
        <member name="T:Towel.Measurements.LinearMass`1">
            <summary>An LinearMass measurement.</summary>
            <typeparam name="T">The generic numeric type used to store the LinearMass measurement.</typeparam>
        </member>
        <member name="M:Towel.Measurements.LinearMass`1.#ctor(`0,Towel.Measurements.LinearMass.Units)">
            <summary>Constructs an LinearMass with the specified measurement and units.</summary>
            <param name="measurement">The measurement of the LinearMass.</param>
            <param name="units">The units of the LinearMass.</param>
        </member>
        <member name="P:Towel.Measurements.LinearMass`1.Item(Towel.Measurements.LinearMass.Units)">
            <summary>Gets the measurement in the desired units.</summary>
            <param name="units">The units you want the measurement to be in.</param>
            <returns>The measurement in the specified units.</returns>
        </member>
        <member name="T:Towel.Measurements.LinearMassFlow">
            <summary>Contains unit types and conversion factors for the generic LinearMassFlow struct.</summary>
        </member>
        <member name="T:Towel.Measurements.LinearMassFlow.Units">
            <summary>Units for LinearMassFlow measurements.</summary>
        </member>
        <member name="M:Towel.Measurements.LinearMassFlow.Map(Towel.Measurements.LinearMassFlow.Units,Towel.Measurements.Mass.Units@,Towel.Measurements.Length.Units@,Towel.Measurements.Time.Units@)">
            <summary>Maps a units to relative base units.</summary>
        </member>
        <member name="T:Towel.Measurements.LinearMassFlow`1">
            <summary>An LinearMassFlow measurement.</summary>
            <typeparam name="T">The generic numeric type used to store the LinearMassFlow measurement.</typeparam>
        </member>
        <member name="M:Towel.Measurements.LinearMassFlow`1.#ctor(`0,Towel.Measurements.LinearMassFlow.Units)">
            <summary>Constructs an LinearMassFlow with the specified measurement and units.</summary>
            <param name="measurement">The measurement of the LinearMassFlow.</param>
            <param name="units">The units of the LinearMassFlow.</param>
        </member>
        <member name="P:Towel.Measurements.LinearMassFlow`1.Item(Towel.Measurements.LinearMassFlow.Units)">
            <summary>Gets the measurement in the desired units.</summary>
            <param name="units">The units you want the measurement to be in.</param>
            <returns>The measurement in the specified units.</returns>
        </member>
        <member name="T:Towel.Measurements.Luminosity">
            <summary>Contains unit types and conversion factors for the generic Luminosity struct.</summary>
        </member>
        <member name="T:Towel.Measurements.Luminosity.Units">
            <summary>Units for Luminosity measurements.</summary>
        </member>
        <member name="T:Towel.Measurements.Luminosity`1">
            <summary>An Luminosity measurement.</summary>
            <typeparam name="T">The generic numeric type used to store the Luminosity measurement.</typeparam>
        </member>
        <member name="M:Towel.Measurements.Luminosity`1.#ctor(`0,Towel.Measurements.Luminosity.Units)">
            <summary>Constructs an Luminosity with the specified measurement and units.</summary>
            <param name="measurement">The measurement of the Luminosity.</param>
            <param name="units">The units of the Luminosity.</param>
        </member>
        <member name="P:Towel.Measurements.Luminosity`1.Units">
            <summary>The current units used to represent the Luminosity.</summary>
        </member>
        <member name="P:Towel.Measurements.Luminosity`1.Item(Towel.Measurements.Luminosity.Units)">
            <summary>Gets the measurement in the desired units.</summary>
            <param name="units">The units you want the measurement to be in.</param>
            <returns>The measurement in the specified units.</returns>
        </member>
        <member name="T:Towel.Measurements.Mass">
            <summary>Contains unit types and conversion factors for the generic Mass struct.</summary>
        </member>
        <member name="T:Towel.Measurements.Mass.Units">
            <summary>Units for Mass measurements.</summary>
        </member>
        <member name="F:Towel.Measurements.Mass.Units.Yoctograms">
            <summary>Units of an mass measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.Mass.Units.Zeptograms">
            <summary>Units of an mass measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.Mass.Units.Attograms">
            <summary>Units of an mass measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.Mass.Units.Femtograms">
            <summary>Units of an mass measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.Mass.Units.Picograms">
            <summary>Units of an mass measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.Mass.Units.Nanograms">
            <summary>Units of an mass measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.Mass.Units.Micrograms">
            <summary>Units of an mass measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.Mass.Units.Milligrams">
            <summary>Units of an mass measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.Mass.Units.Centigrams">
            <summary>Units of an mass measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.Mass.Units.Decigrams">
            <summary>Units of an mass measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.Mass.Units.Grams">
            <summary>Units of an mass measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.Mass.Units.Dekagrams">
            <summary>Units of an mass measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.Mass.Units.Hectograms">
            <summary>Units of an mass measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.Mass.Units.Kilograms">
            <summary>Units of an mass measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.Mass.Units.Megagrams">
            <summary>Units of an mass measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.Mass.Units.Gigagrams">
            <summary>Units of an mass measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.Mass.Units.Teragrams">
            <summary>Units of an mass measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.Mass.Units.Petagrams">
            <summary>Units of an mass measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.Mass.Units.Exagrams">
            <summary>Units of an mass measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.Mass.Units.Zettagrams">
            <summary>Units of an mass measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.Mass.Units.Yottagrams">
            <summary>Units of an mass measurement.</summary>
        </member>
        <member name="T:Towel.Measurements.Mass`1">
            <summary>An Mass measurement.</summary>
            <typeparam name="T">The generic numeric type used to store the Mass measurement.</typeparam>
        </member>
        <member name="M:Towel.Measurements.Mass`1.#ctor(`0,Towel.Measurements.Mass.Units)">
            <summary>Constructs an Mass with the specified measurement and units.</summary>
            <param name="measurement">The measurement of the Mass.</param>
            <param name="units">The units of the Mass.</param>
        </member>
        <member name="P:Towel.Measurements.Mass`1.Units">
            <summary>The current units used to represent the Mass.</summary>
        </member>
        <member name="P:Towel.Measurements.Mass`1.Item(Towel.Measurements.Mass.Units)">
            <summary>Gets the measurement in the desired units.</summary>
            <param name="units">The units you want the measurement to be in.</param>
            <returns>The measurement in the specified units.</returns>
        </member>
        <member name="M:Towel.Measurements.Mass`1.Multiply(Towel.Measurements.Acceleration{`0})">
            <summary>Multiplies an Accleration measurement by a Mass measurement resulting in a Force measurement.</summary>
            <param name="acceleration">The Acceleration measurement to multiply the Mass measurement by.</param>
            <returns>The Force measurement result from the multiplication.</returns>
        </member>
        <member name="T:Towel.Measurements.Power">
            <summary>Contains unit types and conversion factors for the generic Power struct.</summary>
        </member>
        <member name="T:Towel.Measurements.Power.Units">
            <summary>Units for Power measurements.</summary>
        </member>
        <member name="T:Towel.Measurements.Power`1">
            <summary>An Power measurement.</summary>
            <typeparam name="T">The generic numeric type used to store the Power measurement.</typeparam>
        </member>
        <member name="M:Towel.Measurements.Power`1.#ctor(`0,Towel.Measurements.Power.Units)">
            <summary>Constructs an Power with the specified measurement and units.</summary>
            <param name="measurement">The measurement of the Power.</param>
            <param name="units">The units of the Power.</param>
        </member>
        <member name="P:Towel.Measurements.Power`1.Units">
            <summary>The current units used to represent the Power.</summary>
        </member>
        <member name="P:Towel.Measurements.Power`1.Item(Towel.Measurements.Power.Units)">
            <summary>Gets the measurement in the desired units.</summary>
            <param name="units">The units you want the measurement to be in.</param>
            <returns>The measurement in the specified units.</returns>
        </member>
        <member name="T:Towel.Measurements.Pressure">
            <summary>Contains unit types and conversion factors for the generic Pressure struct.</summary>
        </member>
        <member name="T:Towel.Measurements.Pressure.Units">
            <summary>Units for Pressure measurements.</summary>
        </member>
        <member name="T:Towel.Measurements.Pressure`1">
            <summary>An Pressure measurement.</summary>
            <typeparam name="T">The generic numeric type used to store the Pressure measurement.</typeparam>
        </member>
        <member name="M:Towel.Measurements.Pressure`1.#ctor(`0,Towel.Measurements.Pressure.Units)">
            <summary>Constructs an Pressure with the specified measurement and units.</summary>
            <param name="measurement">The measurement of the Pressure.</param>
            <param name="units">The units of the Pressure.</param>
        </member>
        <member name="P:Towel.Measurements.Pressure`1.Units">
            <summary>The current units used to represent the Pressure.</summary>
        </member>
        <member name="P:Towel.Measurements.Pressure`1.Item(Towel.Measurements.Pressure.Units)">
            <summary>Gets the measurement in the desired units.</summary>
            <param name="units">The units you want the measurement to be in.</param>
            <returns>The measurement in the specified units.</returns>
        </member>
        <member name="T:Towel.Measurements.Speed">
            <summary>Contains unit types and conversion factors for the generic Speed struct.</summary>
        </member>
        <member name="T:Towel.Measurements.Speed.Units">
            <summary>Units for Speed measurements.</summary>
        </member>
        <member name="F:Towel.Measurements.Speed.Units.Knots">
            <summary>Units of an speed measurement.</summary>
        </member>
        <member name="M:Towel.Measurements.Speed.Map(Towel.Measurements.Speed.Units,Towel.Measurements.Length.Units@,Towel.Measurements.Time.Units@)">
            <summary>Maps a units to relative base units.</summary>
        </member>
        <member name="T:Towel.Measurements.Speed`1">
            <summary>An Speed measurement.</summary>
            <typeparam name="T">The generic numeric type used to store the Speed measurement.</typeparam>
        </member>
        <member name="M:Towel.Measurements.Speed`1.#ctor(`0,Towel.Measurements.Speed.Units)">
            <summary>Constructs an speed with the specified measurement and units.</summary>
            <param name="measurement">The measurement of the speed.</param>
            <param name="units">The units of the Speed.</param>
        </member>
        <member name="P:Towel.Measurements.Speed`1.Item(Towel.Measurements.Speed.Units)">
            <summary>Gets the measurement in the desired units.</summary>
            <param name="units">The units you want the measurement to be in.</param>
            <returns>The measurement in the specified units.</returns>
        </member>
        <member name="T:Towel.Measurements.MeasurementUnitsSyntaxTypes">
            <summary>Provides the necessary type definitions for the measurement units syntax.</summary>
        </member>
        <member name="T:Towel.Measurements.MeasurementUnitsSyntax">
            <summary>Provides syntax for measurement unit definition. Intended to be referenced via "using static" keyword in files.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementUnitsSyntax.Gradians">
            <summary>Units of an angle measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementUnitsSyntax.Degrees">
            <summary>Units of an angle measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementUnitsSyntax.Radians">
            <summary>Units of an angle measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementUnitsSyntax.Revolutions">
            <summary>Units of an angle measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementUnitsSyntax.Coulombs">
            <summary>Units of an electric charge measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementUnitsSyntax.Amperes">
            <summary>Units of an electric charge measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementUnitsSyntax.Newtons">
            <summary>Units of an force measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementUnitsSyntax.Yoctometers">
            <summary>Units of an length measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementUnitsSyntax.Zeptometers">
            <summary>Units of an length measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementUnitsSyntax.Attometers">
            <summary>Units of an length measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementUnitsSyntax.Femtometers">
            <summary>Units of an length measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementUnitsSyntax.Picometers">
            <summary>Units of an length measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementUnitsSyntax.Nanometers">
            <summary>Units of an length measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementUnitsSyntax.Micrometers">
            <summary>Units of an length measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementUnitsSyntax.Millimeters">
            <summary>Units of an length measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementUnitsSyntax.Centimeters">
            <summary>Units of an length measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementUnitsSyntax.Inches">
            <summary>Units of an length measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementUnitsSyntax.Decimeters">
            <summary>Units of an length measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementUnitsSyntax.Feet">
            <summary>Units of an length measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementUnitsSyntax.Yards">
            <summary>Units of an length measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementUnitsSyntax.Meters">
            <summary>Units of an length measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementUnitsSyntax.Dekameters">
            <summary>Units of an length measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementUnitsSyntax.Hectometers">
            <summary>Units of an length measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementUnitsSyntax.Kilometers">
            <summary>Units of an length measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementUnitsSyntax.Miles">
            <summary>Units of an length measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementUnitsSyntax.NauticalMiles">
            <summary>Units of an length measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementUnitsSyntax.Megameters">
            <summary>Units of an length measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementUnitsSyntax.Gigameters">
            <summary>Units of an length measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementUnitsSyntax.Terameters">
            <summary>Units of an length measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementUnitsSyntax.Petameters">
            <summary>Units of an length measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementUnitsSyntax.Exameters">
            <summary>Units of an length measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementUnitsSyntax.Zettameters">
            <summary>Units of an length measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementUnitsSyntax.Yottameters">
            <summary>Units of an length measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementUnitsSyntax.Yoctograms">
            <summary>Units of an mass measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementUnitsSyntax.Zeptograms">
            <summary>Units of an mass measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementUnitsSyntax.Attograms">
            <summary>Units of an mass measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementUnitsSyntax.Femtograms">
            <summary>Units of an mass measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementUnitsSyntax.Picograms">
            <summary>Units of an mass measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementUnitsSyntax.Nanograms">
            <summary>Units of an mass measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementUnitsSyntax.Micrograms">
            <summary>Units of an mass measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementUnitsSyntax.Milligrams">
            <summary>Units of an mass measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementUnitsSyntax.Centigrams">
            <summary>Units of an mass measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementUnitsSyntax.Decigrams">
            <summary>Units of an mass measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementUnitsSyntax.Grams">
            <summary>Units of an mass measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementUnitsSyntax.Dekagrams">
            <summary>Units of an mass measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementUnitsSyntax.Hectograms">
            <summary>Units of an mass measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementUnitsSyntax.Kilograms">
            <summary>Units of an mass measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementUnitsSyntax.Megagrams">
            <summary>Units of an mass measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementUnitsSyntax.Gigagrams">
            <summary>Units of an mass measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementUnitsSyntax.Teragrams">
            <summary>Units of an mass measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementUnitsSyntax.Petagrams">
            <summary>Units of an mass measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementUnitsSyntax.Exagrams">
            <summary>Units of an mass measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementUnitsSyntax.Zettagrams">
            <summary>Units of an mass measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementUnitsSyntax.Yottagrams">
            <summary>Units of an mass measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementUnitsSyntax.Knots">
            <summary>Units of an speed measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementUnitsSyntax.Milliseconds">
            <summary>Units of an time measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementUnitsSyntax.Seconds">
            <summary>Units of an time measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementUnitsSyntax.Minutes">
            <summary>Units of an time measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementUnitsSyntax.Hours">
            <summary>Units of an time measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementUnitsSyntax.Days">
            <summary>Units of an time measurement.</summary>
        </member>
        <member name="T:Towel.Measurements.Tempurature">
            <summary>Contains unit types and conversion factors for the generic Tempurature struct.</summary>
        </member>
        <member name="T:Towel.Measurements.Tempurature.Units">
            <summary>Units for Tempurature measurements.</summary>
        </member>
        <member name="F:Towel.Measurements.Tempurature.Units.Kelvin">
            <summary>Units of an Tempurature measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.Tempurature.Units.Celsius">
            <summary>Units of an Tempurature measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.Tempurature.Units.Fahrenheit">
            <summary>Units of an Tempurature measurement.</summary>
        </member>
        <member name="T:Towel.Measurements.Tempurature`1">
            <summary>An Tempurature measurement.</summary>
            <typeparam name="T">The generic numeric type used to store the Tempurature measurement.</typeparam>
        </member>
        <member name="M:Towel.Measurements.Tempurature`1.#ctor(`0,Towel.Measurements.Tempurature.Units)">
            <summary>Constructs an Tempurature with the specified measurement and units.</summary>
            <param name="measurement">The measurement of the Tempurature.</param>
            <param name="units">The units of the Tempurature.</param>
        </member>
        <member name="P:Towel.Measurements.Tempurature`1.Units">
            <summary>The current units used to represent the Tempurature.</summary>
        </member>
        <member name="P:Towel.Measurements.Tempurature`1.Item(Towel.Measurements.Tempurature.Units)">
            <summary>Gets the measurement in the desired units.</summary>
            <param name="units">The units you want the measurement to be in.</param>
            <returns>The measurement in the specified units.</returns>
        </member>
        <member name="T:Towel.Measurements.Time">
            <summary>Contains unit types and conversion factors for the generic Time struct.</summary>
        </member>
        <member name="T:Towel.Measurements.Time.Units">
            <summary>Units for time measurements.</summary>
        </member>
        <member name="F:Towel.Measurements.Time.Units.Milliseconds">
            <summary>Units of an time measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.Time.Units.Seconds">
            <summary>Units of an time measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.Time.Units.Minutes">
            <summary>Units of an time measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.Time.Units.Hours">
            <summary>Units of an time measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.Time.Units.Days">
            <summary>Units of an time measurement.</summary>
        </member>
        <member name="T:Towel.Measurements.Time`1">
            <summary>An Time measurement.</summary>
            <typeparam name="T">The generic numeric type used to store the Time measurement.</typeparam>
        </member>
        <member name="M:Towel.Measurements.Time`1.#ctor(`0,Towel.Measurements.MeasurementUnitsSyntaxTypes.TimeUnits)">
            <summary>Constructs an Time with the specified measurement and units.</summary>
            <param name="measurement">The measurement of the Time.</param>
            <param name="units">The units of the Time.</param>
        </member>
        <member name="M:Towel.Measurements.Time`1.#ctor(`0,Towel.Measurements.Time.Units)">
            <summary>Constructs an Time with the specified measurement and units.</summary>
            <param name="measurement">The measurement of the Time.</param>
            <param name="units">The units of the Time.</param>
        </member>
        <member name="P:Towel.Measurements.Time`1.Units">
            <summary>The current units used to represent the Time.</summary>
        </member>
        <member name="P:Towel.Measurements.Time`1.Item(Towel.Measurements.Time.Units)">
            <summary>Gets the measurement in the desired units.</summary>
            <param name="units">The units you want the measurement to be in.</param>
            <returns>The measurement in the specified units.</returns>
        </member>
        <member name="T:Towel.Measurements.Torque">
            <summary>Contains unit types and conversion factors for the generic Torque struct.</summary>
        </member>
        <member name="T:Towel.Measurements.Torque.Units">
            <summary>Units for Torque measurements.</summary>
        </member>
        <member name="T:Towel.Measurements.Torque`1">
            <summary>An Torque measurement.</summary>
            <typeparam name="T">The generic numeric type used to store the Torque measurement.</typeparam>
        </member>
        <member name="M:Towel.Measurements.Torque`1.#ctor(`0,Towel.Measurements.Torque.Units)">
            <summary>Constructs an Torque with the specified measurement and units.</summary>
            <param name="measurement">The measurement of the Torque.</param>
            <param name="units">The units of the Torque.</param>
        </member>
        <member name="P:Towel.Measurements.Torque`1.Units">
            <summary>The current units used to represent the Torque.</summary>
        </member>
        <member name="P:Towel.Measurements.Torque`1.Item(Towel.Measurements.Torque.Units)">
            <summary>Gets the measurement in the desired units.</summary>
            <param name="units">The units you want the measurement to be in.</param>
            <returns>The measurement in the specified units.</returns>
        </member>
        <member name="T:Towel.Measurements.Volume">
            <summary>Contains unit types and conversion factors for the generic Volumne struct.</summary>
        </member>
        <member name="T:Towel.Measurements.Volume.Units">
            <summary>Units for Volumne measurements.</summary>
        </member>
        <member name="M:Towel.Measurements.Volume.Map(Towel.Measurements.Volume.Units,Towel.Measurements.Length.Units@,Towel.Measurements.Length.Units@,Towel.Measurements.Length.Units@)">
            <summary>Maps a units to relative base units.</summary>
        </member>
        <member name="T:Towel.Measurements.Volume`1">
            <summary>An Volume measurement.</summary>
            <typeparam name="T">The generic numeric type used to store the Volume measurement.</typeparam>
        </member>
        <member name="M:Towel.Measurements.Volume`1.#ctor(`0,Towel.Measurements.Length.Units,Towel.Measurements.Length.Units,Towel.Measurements.Length.Units)">
            <summary>Constructs an Volume with the specified measurement and units.</summary>
            <param name="measurement">The measurement of the Volume.</param>
            <param name="units">The units of the Volume.</param>
        </member>
        <member name="P:Towel.Measurements.Volume`1.Item(Towel.Measurements.Volume.Units)">
            <summary>Gets the measurement in the desired units.</summary>
            <param name="units">The units you want the measurement to be in.</param>
            <returns>The measurement in the specified units.</returns>
        </member>
        <member name="P:Towel.Measurements.Volume`1.Item(Towel.Measurements.Length.Units,Towel.Measurements.Length.Units,Towel.Measurements.Length.Units)">
            <summary>Gets the measurement in the desired units.</summary>
            <returns>The measurement in the specified units.</returns>
        </member>
        <member name="T:Towel.StepStatus">
            <summary>Status of data structure iteration.</summary>
        </member>
        <member name="F:Towel.StepStatus.Continue">
            <summary>Continue normal iteration.</summary>
        </member>
        <member name="F:Towel.StepStatus.Break">
            <summary>Iteration cancelation.</summary>
        </member>
        <member name="T:Towel.Step`1">
            <summary>Delegate for data structure iteration.</summary>
            <typeparam name="T">The type of the instances within the data structure.</typeparam>
            <param name="current">The current instance of iteration through the data structure.</param>
        </member>
        <member name="T:Towel.StepRef`1">
            <summary>Delegate for data structure iteration.</summary>
            <typeparam name="T">The type of the instances within the data structure.</typeparam>
            <param name="current">The current instance of iteration through the data structure.</param>
        </member>
        <member name="T:Towel.StepBreak`1">
            <summary>Delegate for data structure iteration.</summary>
            <typeparam name="T">The type of the instances within the data structure.</typeparam>
            <param name="current">The current instance of iteration through the data structure.</param>
            <returns>The status of the iteration. Allows breaking functionality.</returns>
        </member>
        <member name="T:Towel.StepRefBreak`1">
            <summary>Delegate for data structure iteration.</summary>
            <typeparam name="T">The type of the instances within the data structure.</typeparam>
            <param name="current">The current instance of iteration through the data structure.</param>
            <returns>The status of the iteration. Allows breaking functionality.</returns>
        </member>
        <member name="T:Towel.Stepper`1">
            <summary>Delegate for a traversal function on a data structure.</summary>
            <typeparam name="T">The type of instances the will be traversed.</typeparam>
            <param name="step">The foreach function to perform on each iteration.</param>
        </member>
        <member name="T:Towel.StepperRef`1">
            <summary>Delegate for a traversal function on a data structure.</summary>
            <typeparam name="T">The type of instances the will be traversed.</typeparam>
            <param name="step">The foreach function to perform on each iteration.</param>
        </member>
        <member name="T:Towel.StepperBreak`1">
            <summary>Delegate for a traversal function on a data structure.</summary>
            <typeparam name="T">The type of instances the will be traversed.</typeparam>
            <param name="step">The foreach function to perform on each iteration.</param>
        </member>
        <member name="T:Towel.StepperRefBreak`1">
            <summary>Delegate for a traversal function on a data structure.</summary>
            <typeparam name="T">The type of instances the will be traversed.</typeparam>
            <param name="step">The foreach function to perform on each iteration.</param>
        </member>
        <member name="T:Towel.Step`2">
            <summary>Delegate for an action to perform while stepping.</summary>
            <typeparam name="T1">The type of the object to step on.</typeparam>
            <typeparam name="T2">The type of the object to step on.</typeparam>
            <param name="a">The first component of the step.</param>
            <param name="b">The second component of the step.</param>
        </member>
        <member name="T:Towel.StepRef`2">
            <summary>Delegate for an action to perform while stepping.</summary>
            <typeparam name="T1">The type of the object to step on.</typeparam>
            <typeparam name="T2">The type of the object to step on.</typeparam>
            <param name="a">The first component of the step.</param>
            <param name="b">The second component of the step.</param>
        </member>
        <member name="T:Towel.StepBreak`2">
            <summary>Delegate for an action to perform while stepping.</summary>
            <typeparam name="T1">The type of the object to step on.</typeparam>
            <typeparam name="T2">The type of the object to step on.</typeparam>
            <param name="a">The first component of the step.</param>
            <param name="b">The second component of the step.</param>
            <returns>The status of the iteration. Allows breaking functionality.</returns>
        </member>
        <member name="T:Towel.StepRefBreak`2">
            <summary>Delegate for an action to perform while stepping.</summary>
            <typeparam name="T1">The type of the object to step on.</typeparam>
            <typeparam name="T2">The type of the object to step on.</typeparam>
            <param name="a">The first component of the step.</param>
            <param name="b">The second component of the step.</param>
            <returns>The status of the iteration. Allows breaking functionality.</returns>
        </member>
        <member name="T:Towel.Stepper`2">
            <summary>Delegate for stepping through a collection.</summary>
            <typeparam name="T1">The type of the object to step on.</typeparam>
            <typeparam name="T2">The type of the object to step on.</typeparam>
            <param name="step">The action to perform on every step.</param>
        </member>
        <member name="T:Towel.StepperRef`2">
            <summary>Delegate for stepping through a collection.</summary>
            <typeparam name="T1">The type of the object to step on.</typeparam>
            <typeparam name="T2">The type of the object to step on.</typeparam>
            <param name="step">The action to perform on every step.</param>
        </member>
        <member name="T:Towel.StepperBreak`2">
            <summary>Delegate for stepping through a collection.</summary>
            <typeparam name="T1">The type of the object to step on.</typeparam>
            <typeparam name="T2">The type of the object to step on.</typeparam>
            <param name="step">The action to perform on every step.</param>
        </member>
        <member name="T:Towel.StepperRefBreak`2">
            <summary>Delegate for stepping through a collection.</summary>
            <typeparam name="T1">The type of the object to step on.</typeparam>
            <typeparam name="T2">The type of the object to step on.</typeparam>
            <param name="step">The action to perform on every step.</param>
        </member>
        <member name="T:Towel.Step">
            <summary>Extension methods.</summary>
        </member>
        <member name="M:Towel.Step.ToStepper``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>Converts an IEnumerable into a stepper delegate./></summary>
            <typeparam name="T">The generic type being iterated.</typeparam>
            <param name="enumerable">The Ienumerable to convert.</param>
            <returns>The stepper delegate comparable to the IEnumerable provided.</returns>
        </member>
        <member name="M:Towel.Step.Contains``1(Towel.StepperBreak{``0},``0,Towel.Equate{``0})">
            <summary>Checks to see if a given object is in this data structure.</summary>
            <typeparam name="T">The generic type stored in the structure.</typeparam>
            <param name="stepper">The structure to check against.</param>
            <param name="check">The item to check for.</param>
            <param name="equate">Delegate for equating two instances of the same type.</param>
            <returns>true if the item is in this structure; false if not.</returns>
        </member>
        <member name="M:Towel.Step.Contains``2(Towel.StepperBreak{``0},``1,Towel.Equate{``0,``1})">
            <summary>Checks to see if a given object is in this data structure.</summary>
            <typeparam name="T">The generic type stored in the structure.</typeparam>
            <typeparam name="K">The type of the key to look up.</typeparam>
            <param name="stepper">The structure to check against.</param>
            <param name="key">The key to check for.</param>
            <param name="equate">Delegate for equating two instances of different types.</param>
            <returns>true if the item is in this structure; false if not.</returns>
        </member>
        <member name="M:Towel.Step.Get``2(Towel.StepperBreak{``0},``1,Towel.Equate{``0,``1})">
            <summary>Looks up an item this structure by a given key.</summary>
            <typeparam name="T">The generic type stored in the structure.</typeparam>
            <typeparam name="K">The type of the key to look up.</typeparam>
            <param name="stepper">The structure to check against.</param>
            <param name="key">The key to look up.</param>
            <param name="equate">Delegate for equating two instances of different types.</param>
            <returns>The item with the corresponding to the given key.</returns>
        </member>
        <member name="M:Towel.Step.TryGet``2(Towel.StepperBreak{``0},``1,Towel.Equate{``0,``1},``0@)">
            <summary>Trys to look up an item this structure by a given key.</summary>
            <typeparam name="T">The generic type stored in the structure.</typeparam>
            <typeparam name="K">The type of the key to look up.</typeparam>
            <param name="stepper">The structure to check against.</param>
            <param name="key">The key to look up.</param>
            <param name="equate">Delegate for equating two instances of different types.</param>
            <param name="value">The item if it was found or null if not the default(Type) value.</param>
            <returns>true if the key was found; false if the key was not found.</returns>
        </member>
        <member name="M:Towel.Step.ToArray``1(Towel.Stepper{``0})">
            <summary>Converts the stepper into an array.</summary>
            <typeparam name="T">The generic type of the stepper.</typeparam>
            <param name="stepper">The stepper to convert.</param>
            <returns>The array created from the stepper.</returns>
        </member>
        <member name="M:Towel.Step.Count``1(Towel.Stepper{``0})">
            <summary>Counts the number of items in the stepper.</summary>
            <typeparam name="T">The generic type of the stepper.</typeparam>
            <param name="stepper">The stepper to count the items of.</param>
            <returns>The number of items in the stepper.</returns>
        </member>
        <member name="M:Towel.Step.EveryNth``1(Towel.Stepper{``0},System.Int32)">
            <summary>Reduces the stepper to be every nth value.</summary>
            <typeparam name="T">The generic type of the stepper.</typeparam>
            <param name="stepper">The stepper to reduce.</param>
            <param name="nth">Represents the values to reduce the stepper to; "5" means every 5th value.</param>
            <returns>The reduced stepper function.</returns>
        </member>
        <member name="M:Towel.Step.ContainsDuplicates``1(Towel.StepperBreak{``0},Towel.Equate{``0},Towel.Hash{``0})">
            <summary>
            Determines if the data contains any duplicates.
            </summary>
            <typeparam name="T">The generic type of the data.</typeparam>
            <param name="stepper">The stepper function for the data.</param>
            <param name="equate">An equality function for the data</param>
            <param name="hash">A hashing function for the data.</param>
            <returns>True if the data contains duplicates. False if not.</returns>
        </member>
        <member name="M:Towel.Step.ContainsDuplicates``1(Towel.Stepper{``0},Towel.Equate{``0},Towel.Hash{``0})">
            <summary>
            Determines if the data contains any duplicates.
            </summary>
            <typeparam name="T">The generic type of the data.</typeparam>
            <param name="stepper">The stepper function for the data.</param>
            <param name="equate">An equality function for the data</param>
            <param name="hash">A hashing function for the data.</param>
            <returns>True if the data contains duplicates. False if not.</returns>
            <remarks>Use the StepperBreak overload if possible. It is more effiecient.</remarks>
        </member>
        <member name="M:Towel.Step.ContainsDuplicates``1(Towel.StepperBreak{``0})">
            <summary>
            Determines if the data contains any duplicates.
            </summary>
            <typeparam name="T">The generic type of the data.</typeparam>
            <param name="stepper">The stepper function for the data.</param>
            <returns>True if the data contains duplicates. False if not.</returns>
        </member>
        <member name="M:Towel.Step.ContainsDuplicates``1(Towel.Stepper{``0})">
            <summary>
            Determines if the data contains any duplicates.
            </summary>
            <typeparam name="T">The generic type of the data.</typeparam>
            <param name="stepper">The stepper function for the data.</param>
            <returns>True if the data contains duplicates. False if not.</returns>
            <remarks>Use the StepperBreak overload if possible. It is more effiecient.</remarks>
        </member>
        <member name="T:System.TowelSystemExtensions">
            <summary>Contains Extension methods on common System types.</summary>
        </member>
        <member name="M:System.TowelSystemExtensions.Repeat(System.Char,System.Int32)">
            <summary>Creates a string of a repreated character a provided number of times.</summary>
            <param name="character">The character to repeat.</param>
            <param name="count">The number of repetitions of the charater (aka resulting string length).</param>
            <returns>The string of the repeated character.</returns>
        </member>
        <member name="M:System.TowelSystemExtensions.ContainsAny(System.String,System.Char[])">
            <summary>
            Checks if a string contains any of a collections on characters
            </summary>
            <param name="@string"></param>
            <param name="chars"></param>
            <returns></returns>
        </member>
        <member name="M:System.TowelSystemExtensions.StandardizeNewLines(System.String)">
            <summary>Removes carriage returns and then replaces all new line characters with System.Environment.NewLine.</summary>
            <param name="@string">The string to standardize the new lines of.</param>
            <returns>The new line standardized string.</returns>
        </member>
        <member name="M:System.TowelSystemExtensions.Repeat(System.String,System.Int32)">
            <summary>Creates a string of a repreated string a provided number of times.</summary>
            <param name="str">The string to repeat.</param>
            <param name="count">The number of repetitions of the string to repeat.</param>
            <returns>The string of the repeated string to repeat.</returns>
        </member>
        <member name="M:System.TowelSystemExtensions.SplitLines(System.String)">
            <summary>Splits the string into the individual lines.</summary>
            <param name="@string">The string to get the lines of.</param>
            <returns>an array of the individual lines of the string.</returns>
        </member>
        <member name="M:System.TowelSystemExtensions.IndentLines(System.String)">
            <summary>Indents every line in a string with a single tab character.</summary>
            /// <param name="@string">The string to indent the lines of.</param>
            <returns>The indented string.</returns>
        </member>
        <member name="M:System.TowelSystemExtensions.IndentLines(System.String,System.Int32)">
            <summary>Indents every line in a string with a given number of tab characters.</summary>
            <param name="@string">The string to indent the lines of.</param>
            <param name="count">The number of tabs of the indention.</param>
            <returns>The indented string.</returns>
        </member>
        <member name="M:System.TowelSystemExtensions.IndentNewLinesBetweenIndeces(System.String,System.Int32,System.Int32)">
            <summary>Indents after every new line sequence found between two string indeces.</summary>
            <param name="@string">The string to be indented.</param>
            <param name="start">The starting index to look for new line sequences to indent.</param>
            <param name="end">The starting index to look for new line sequences to indent.</param>
            <returns>The indented string.</returns>
        </member>
        <member name="M:System.TowelSystemExtensions.IndentNewLinesBetweenIndeces(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>Indents after every new line sequence found between two string indeces.</summary>
            <param name="@string">The string to be indented.</param>
            <param name="count">The number of tabs of this indention.</param>
            <param name="start">The starting index to look for new line sequences to indent.</param>
            <param name="end">The starting index to look for new line sequences to indent.</param>
            <returns>The indented string.</returns>
        </member>
        <member name="M:System.TowelSystemExtensions.IndentLineNumbers(System.String,System.Int32,System.Int32)">
            <summary>Indents a range of line numbers in a string.</summary>
            <param name="@string">The string to indent specified lines of.</param>
            <param name="startingLineNumber">The line number to start line indention on.</param>
            <param name="endingLineNumber">The line number to stop line indention on.</param>
            <returns>The string with the specified lines indented.</returns>
        </member>
        <member name="M:System.TowelSystemExtensions.IndentLineNumbers(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>Indents a range of line numbers in a string.</summary>
            <param name="@string">The string to indent specified lines of.</param>
            <param name="count">The number of tabs for the indention.</param>
            <param name="startingLineNumber">The line number to start line indention on.</param>
            <param name="endingLineNumber">The line number to stop line indention on.</param>
            <returns>The string with the specified lines indented.</returns>
        </member>
        <member name="M:System.TowelSystemExtensions.PadLinesLeft(System.String,System.String)">
            <summary>Adds a string onto the beginning of every line in a string.</summary>
            <param name="@string">The string to pad.</param>
            <param name="padding">The padding to add to the front of every line.</param>
            <returns>The padded string.</returns>
        </member>
        <member name="M:System.TowelSystemExtensions.PadSubstringLinesRight(System.String,System.String)">
            <summary>Adds a string onto the end of every line in a string.</summary>
            <param name="@string">The string to pad.</param>
            <param name="padding">The padding to add to the front of every line.</param>
            <returns>The padded string.</returns>
        </member>
        <member name="M:System.TowelSystemExtensions.PadLinesLeftBetweenIndeces(System.String,System.String,System.Int32,System.Int32)">
            <summary>Adds a string after every new line squence found between two indeces of a string.</summary>
            <param name="@string">The string to be padded.</param>
            <param name="padding">The padding to apply after every newline sequence found.</param>
            <param name="start">The starting index of the string to search for new line sequences.</param>
            <param name="end">The ending index of the string to search for new line sequences.</param>
            <returns>The padded string.</returns>
        </member>
        <member name="M:System.TowelSystemExtensions.PadLinesRightBetweenIndeces(System.String,System.String,System.Int32,System.Int32)">
            <summary>Adds a string before every new line squence found between two indeces of a string.</summary>
            <param name="@string">The string to be padded.</param>
            <param name="padding">The padding to apply before every newline sequence found.</param>
            <param name="start">The starting index of the string to search for new line sequences.</param>
            <param name="end">The ending index of the string to search for new line sequences.</param>
            <returns>The padded string.</returns>
        </member>
        <member name="M:System.TowelSystemExtensions.PadLinesLeft(System.String,System.String,System.Int32,System.Int32)">
            <summary>Adds a string after every new line squence found between two indeces of a string.</summary>
            <param name="@string">The string to be padded.</param>
            <param name="padding">The padding to apply after every newline sequence found.</param>
            <param name="start">The starting index of the string to search for new line sequences.</param>
            <param name="end">The ending index of the string to search for new line sequences.</param>
            <returns>The padded string.</returns>
        </member>
        <member name="M:System.TowelSystemExtensions.PadLinesRight(System.String,System.String,System.Int32,System.Int32)">
            <summary>Adds a string before every new line squence found between two indeces of a string.</summary>
            <param name="@string">The string to be padded.</param>
            <param name="padding">The padding to apply before every newline sequence found.</param>
            <param name="startingLineNumber">The starting index of the string to search for new line sequences.</param>
            <param name="endingLineNumber">The ending index of the string to search for new line sequences.</param>
            <returns>The padded string.</returns>
        </member>
        <member name="M:System.TowelSystemExtensions.Reverse(System.String)">
            <summary>Reverses the characters in a string.</summary>
            <param name="@string">The string to reverse the characters of.</param>
            <returns>The reversed character string.</returns>
        </member>
        <member name="M:System.TowelSystemExtensions.Remove(System.String,System.Predicate{System.Char})">
            <summary>Removes all the characters from a string based on a predicate.</summary>
            <param name="@string">The string to remove characters from.</param>
            <param name="where">The predicate determining removal of each character.</param>
            <returns>The string after removing any predicated characters.</returns>
        </member>
        <member name="M:System.TowelSystemExtensions.CountLines(System.String)">
            <summary>Counts the number of lines in the string.</summary>
            <param name="str">The string to get the line count of.</param>
            <returns>The number of lines in the string.</returns>
        </member>
        <member name="M:System.TowelSystemExtensions.NextString(System.Random,System.Int32)">
            <summary>Generates a random string of a given length using the System.Random generator.</summary>
            <param name="random">The random generation algorithm.</param>
            <param name="length">The length of the randomized string to generate.</param>
            <returns>The generated randomized string.</returns>
        </member>
        <member name="M:System.TowelSystemExtensions.NextString(System.Random,System.Int32,System.Char[])">
            <summary>Generates a random string of a given length using the System.Random generator with a specific set of characters.</summary>
            <param name="random">The random generation algorithm.</param>
            <param name="length">The length of the randomized string to generate.</param>
            <param name="allowableChars">The set of allowable characters.</param>
            <returns>The generated randomized string.</returns>
        </member>
        <member name="M:System.TowelSystemExtensions.NextAlphaNumericString(System.Random,System.Int32)">
            <summary>Generates a random alphanumeric string of a given length using the System.Random generator.</summary>
            <param name="random">The random generation algorithm.</param>
            <param name="length">The length of the randomized alphanumeric string to generate.</param>
            <returns>The generated randomized alphanumeric string.</returns>
        </member>
        <member name="M:System.TowelSystemExtensions.NumericString(System.Random,System.Int32)">
            <summary>Generates a random numeric string of a given length using the System.Random generator.</summary>
            <param name="random">The random generation algorithm.</param>
            <param name="length">The length of the randomized numeric string to generate.</param>
            <returns>The generated randomized numeric string.</returns>
        </member>
        <member name="M:System.TowelSystemExtensions.NextAlphabeticString(System.Random,System.Int32)">
            <summary>Generates a random alhpabetical string of a given length using the System.Random generator.</summary>
            <param name="random">The random generation algorithm.</param>
            <param name="length">The length of the randomized alphabetical string to generate.</param>
            <returns>The generated randomized alphabetical string.</returns>
        </member>
        <member name="M:System.TowelSystemExtensions.NextChar(System.Random)">
            <summary>Generates a random char value.</summary>
            <param name="random">The random generation algorithm.</param>
            <returns>A randomly generated char value.</returns>
        </member>
        <member name="M:System.TowelSystemExtensions.NextChar(System.Random,System.Char,System.Char)">
            <summary>Generates a random char value.</summary>
            <param name="random">The random generation algorithm.</param>
            <param name="min">Minimum allowed value of the random generation.</param>
            <param name="max">Maximum allowed value of the random generation.</param>
            <returns>A randomly generated char value.</returns>
        </member>
        <member name="M:System.TowelSystemExtensions.NextLong(System.Random)">
            <summary>Generates a random long value.</summary>
            <param name="random">The random generation algorithm.</param>
            <returns>A randomly generated long value.</returns>
        </member>
        <member name="M:System.TowelSystemExtensions.NextLong(System.Random,System.Int64)">
            <summary>Generates a random long value.</summary>
            <param name="random">The random generation algorithm.</param>
            <param name="max">Maximum allowed value of the random generation.</param>
            <returns>A randomly generated long value.</returns>
        </member>
        <member name="M:System.TowelSystemExtensions.NextLong(System.Random,System.Int64,System.Int64)">
            <summary>Generates a random long value.</summary>
            <param name="random">The random generation algorithm.</param>
            <param name="min">Minimum allowed value of the random generation.</param>
            <param name="max">Maximum allowed value of the random generation.</param>
            <returns>A randomly generated long value.</returns>
        </member>
        <member name="M:System.TowelSystemExtensions.NextDecimal(System.Random)">
            <summary>Generates a random decimal value.</summary>
            <param name="random">The random generation algorithm.</param>
            <returns>A randomly generated decimal value.</returns>
        </member>
        <member name="M:System.TowelSystemExtensions.NextDecimal(System.Random,System.Decimal)">
            <summary>Generates a random decimal value.</summary>
            <param name="random">The random generation algorithm.</param>
            <param name="max">The maximum allowed value of the random generation.</param>
            <returns>A randomly generated decimal value.</returns>
        </member>
        <member name="M:System.TowelSystemExtensions.NextDecimal(System.Random,System.Decimal,System.Decimal)">
            <summary>Generates a random decimal value.</summary>
            <param name="random">The random generation algorithm.</param>
            <param name="min">The minimum allowed value of the random generation.</param>
            <param name="max">The maximum allowed value of the random generation.</param>
            <returns>A randomly generated decimal value.</returns>
        </member>
        <member name="M:System.TowelSystemExtensions.NextDateTime(System.Random)">
            <summary>Generates a random DateTime value.</summary>
            <param name="random">The random generation algorithm.</param>
            <returns>A randomly generated DateTime value.</returns>
        </member>
        <member name="M:System.TowelSystemExtensions.NextDateTime(System.Random,System.DateTime)">
            <summary>Generates a random DateTime value.</summary>
            <param name="random">The random generation algorithm.</param>
            <param name="max">The maximum allowed value of the random generation.</param>
            <returns>A randomly generated DateTime value.</returns>
        </member>
        <member name="M:System.TowelSystemExtensions.NextDateTime(System.Random,System.DateTime,System.DateTime)">
            <summary>Generates a random DateTime value.</summary>
            <param name="random">The random generation algorithm.</param>
            <param name="min">The minimum allowed value of the random generation.</param>
            <param name="max">The maximum allowed value of the random generation.</param>
            <returns>A randomly generated DateTime value.</returns>
        </member>
        <member name="M:System.TowelSystemExtensions.NextTimeSpan(System.Random)">
            <summary>Generates a random TimeSpan value.</summary>
            <param name="random">The random generation algorithm.</param>
            <returns>A randomly generated TimeSpan value.</returns>
        </member>
        <member name="M:System.TowelSystemExtensions.NextTimeSpan(System.Random,System.TimeSpan)">
            <summary>Generates a random TimeSpan value.</summary>
            <param name="random">The random generation algorithm.</param>
            <param name="max">The maximum allowed value of the random generation.</param>
            <returns>A randomly generated TimeSpan value.</returns>
        </member>
        <member name="M:System.TowelSystemExtensions.NextTimeSpan(System.Random,System.TimeSpan,System.TimeSpan)">
            <summary>Generates a random TimeSpan value.</summary>
            <param name="random">The random generation algorithm.</param>
            <param name="min">The minimum allowed value of the random generation.</param>
            <param name="max">The maximum allowed value of the random generation.</param>
            <returns>A randomly generated TimeSpan value.</returns>
        </member>
        <member name="M:System.TowelSystemExtensions.Shuffle``1(System.Random,System.Collections.Generic.IList{``0})">
            <summary>Shuffles the elements of an IList into random order.</summary>
            <typeparam name="T">The generic type of the IList.</typeparam>
            <param name="random">The random algorithm for index generation.</param>
            <param name="iList">The structure to be shuffled.</param>
        </member>
        <member name="M:System.TowelSystemExtensions.Shuffle``1(System.Random,Towel.GetIndex{``0},Towel.SetIndex{``0},System.Int32,System.Int32)">
            <summary>Shuffles the elements of an IList into random order.</summary>
            <typeparam name="T">The generic type of the IList.</typeparam>
            <param name="random">The random algorithm for index generation.</param>
            <param name="get">The get accessor for the structure to shuffle.</param>
            <param name="assign">The set accessor for the structure to shuffle.</param>
            <param name="start">The starting index of the shuffle.</param>
            <param name="end">The </param>
        </member>
        <member name="M:System.TowelSystemExtensions.Choose``1(System.Random,``0[])">
            <summary>Chooses an item at random (all equally weighted).</summary>
            <typeparam name="T">The generic type of the items to choose from.</typeparam>
            <param name="random">The random algorithm for index generation.</param>
            <param name="values">The values to choose from.</param>
            <returns>A randomly selected value from the supplied options.</returns>
        </member>
        <member name="M:System.TowelSystemExtensions.ConvertToCsharpSource(System.Type)">
            <summary>Converts a System.Type into a string as it would appear in C# source code.</summary>
            <param name="type">The "System.Type" to convert to a string.</param>
            <returns>The string as the "System.Type" would appear in C# source code.</returns>
        </member>
        <member name="M:System.TowelSystemExtensions.Remove``1(System.Collections.Generic.IList{``0},System.Predicate{``0})">
            <summary>Removes all predicated elements from an IList.</summary>
            <typeparam name="T">The generic type of elements in the IList.</typeparam>
            <param name="iList">The IList to perform the predicated removal on.</param>
            <param name="predicate">The predicate determining if an element is removed (True) or not (False).</param>
        </member>
        <member name="M:System.TowelSystemExtensions.ConstructRectangularJaggedArray``1(System.Int32,System.Int32)">
            <summary>Constructs a square jagged array of the desired dimensions.</summary>
            <typeparam name="T">The generic type to store in the jagged array.</typeparam>
            <param name="length1">The length of the first dimension.</param>
            <param name="length2">The length of the second dimension.</param>
            <returns>The constructed jagged array.</returns>
        </member>
        <member name="M:System.TowelSystemExtensions.ConstructSquareJaggedArray``1(System.Int32)">
            <summary>Constructs a square jagged array of the desired dimensions.</summary>
            <typeparam name="T">The generic type to store in the jagged array.</typeparam>
            <param name="sideLength">The length of each dimension.</param>
            <returns>The constructed jagged array.</returns>
        </member>
        <member name="M:System.TowelSystemExtensions.GetEnumAttribute``1(System.Enum)">
            <summary>Gets a custom attribute on an enum value by generic type.</summary>
            <typeparam name="AttributeType">The type of attribute to get.</typeparam>
            <param name="enumValue">The enum value to get the attribute of.</param>
            <returns>The attribute on the enum value of the provided type.</returns>
        </member>
        <member name="M:System.TowelSystemExtensions.GetEnumAttributes``1(System.Enum)">
            <summary>Gets custom attribus on an enum value by generic type.</summary>
            <typeparam name="AttributeType">The type of attribute to get.</typeparam>
            <param name="enumValue">The enum value to get the attribute of.</param>
            <returns>The attributes on the enum value of the provided type.</returns>
        </member>
        <member name="M:System.TowelSystemExtensions.GetLastEnumValue``1">
            <summary>Gets the maximum value of an enum.</summary>
            <typeparam name="ENUM">The enum type to get the maximum value of.</typeparam>
            <returns>The maximum enum value of the provided type.</returns>
        </member>
        <member name="M:System.TowelSystemExtensions.GetTypesWithAttribute``1(System.Reflection.Assembly)">
            <summary>Enumerates through all the classes with a custom attribute.</summary>
            <typeparam name="AttributeType">The type of the custom attribute.</typeparam>
            <param name="assembly">The assembly to iterate through the types of.</param>
            <returns>The IEnumerable of the types with the provided attribute type.</returns>
        </member>
        <member name="M:System.TowelSystemExtensions.GetDerivedTypes``1(System.Reflection.Assembly)">
            <summary>Gets all the types in an assembly that derive from a base.</summary>
            <typeparam name="Base">The base type to get the deriving types of.</typeparam>
            <param name="assembly">The assmebly to perform the search on.</param>
            <returns>The IEnumerable of the types that derive from the provided base.</returns>
        </member>
        <member name="M:System.TowelSystemExtensions.LoadXmlDocumentation(System.String)">
            <summary>Loads the XML code documentation into memory so it can be accessed by extension methods on reflection types.</summary>
            <param name="xmlDocumentation">The content of the XML code documentation.</param>
        </member>
        <member name="M:System.TowelSystemExtensions.ClearXmlDocumentation">
            <summary>Clears the currently loaded XML documentation.</summary>
        </member>
        <member name="M:System.TowelSystemExtensions.GetDocumentation(System.Type)">
            <summary>Gets the XML documentation on a type.</summary>
            <param name="type">The type to get the XML documentation of.</param>
            <returns>The XML documentation on the type.</returns>
            <remarks>The XML documentation must be loaded into memory for this function to work.</remarks>
        </member>
        <member name="M:System.TowelSystemExtensions.GetDocumentation(System.Reflection.MethodInfo)">
            <summary>Gets the XML documentation on a method.</summary>
            <param name="methodInfo">The method to get the XML documentation of.</param>
            <returns>The XML documentation on the method.</returns>
            <remarks>The XML documentation must be loaded into memory for this function to work.</remarks>
        </member>
        <member name="M:System.TowelSystemExtensions.GetDocumentation(System.Reflection.ConstructorInfo)">
            <summary>Gets the XML documentation on a constructor.</summary>
            <param name="constructorInfo">The constructor to get the XML documentation of.</param>
            <returns>The XML documentation on the constructor.</returns>
            <remarks>The XML documentation must be loaded into memory for this function to work.</remarks>
        </member>
        <member name="M:System.TowelSystemExtensions.GetDocumentation(System.Reflection.PropertyInfo)">
            <summary>Gets the XML documentation on a property.</summary>
            <param name="propertyInfo">The property to get the XML documentation of.</param>
            <returns>The XML documentation on the property.</returns>
            <remarks>The XML documentation must be loaded into memory for this function to work.</remarks>
        </member>
        <member name="M:System.TowelSystemExtensions.GetDocumentation(System.Reflection.FieldInfo)">
            <summary>Gets the XML documentation on a field.</summary>
            <param name="fieldInfo">The field to get the XML documentation of.</param>
            <returns>The XML documentation on the field.</returns>
            <remarks>The XML documentation must be loaded into memory for this function to work.</remarks>
        </member>
        <member name="M:System.TowelSystemExtensions.GetDocumentation(System.Reflection.EventInfo)">
            <summary>Gets the XML documentation on an event.</summary>
            <param name="eventInfo">The event to get the XML documentation of.</param>
            <returns>The XML documentation on the event.</returns>
            <remarks>The XML documentation must be loaded into memory for this function to work.</remarks>
        </member>
        <member name="M:System.TowelSystemExtensions.GetDocumentation(System.Reflection.MemberInfo)">
            <summary>Gets the XML documentation on a member.</summary>
            <param name="memberInfo">The member to get the XML documentation of.</param>
            <returns>The XML documentation on the member.</returns>
            <remarks>The XML documentation must be loaded into memory for this function to work.</remarks>
        </member>
        <member name="M:System.TowelSystemExtensions.Time_DateTime(System.Action)">
            <summary>Times an action using System.DateTime.</summary>
            <param name="action">The action to time.</param>
            <returns>The TimeSpan the action took to complete.</returns>
        </member>
        <member name="M:System.TowelSystemExtensions.Time_StopWatch(System.Action)">
            <summary>Times an action using System.Diagnostics.Stopwatch.</summary>
            <param name="action">The action to time.</param>
            <returns>The TimeSpan the action took to complete.</returns>
        </member>
    </members>
</doc>
